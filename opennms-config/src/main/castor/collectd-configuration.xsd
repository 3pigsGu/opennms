<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="http://xmlns.opennms.org/xsd/config/collectd" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:this="http://xmlns.opennms.org/xsd/config/collectd"
  xmlns:ns2="http://www.w3.org/1999/xhtml" xmlns:ns="http://www.w3.org/2001/XMLSchema" xmlns:hfp="http://www.w3.org/2001/XMLSchema-hasFacetAndProperty">
  <annotation>
    <documentation>XML Schema for the collectd-configuration.xml configuration file.</documentation>
  </annotation>

  <element name="collectd-configuration">
    <annotation>
      <documentation>Top-level element for the collectd-configuration.xml configuration file.</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element maxOccurs="unbounded" minOccurs="1" ref="this:package" />
        <element maxOccurs="unbounded" minOccurs="1" ref="this:collector" />
      </sequence>
      <attribute ref="this:threads" use="required" />
    </complexType>
  </element>

  <element name="collector">
    <annotation>
      <documentation>Collector for a service</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element maxOccurs="unbounded" minOccurs="0" ref="this:parameter" />
      </sequence>

      <attribute ref="this:service" use="required" />
      <attribute ref="this:class-name" use="required" />
    </complexType>
  </element>

  <element name="package">
    <annotation>
      <documentation>Package encapsulating addresses eligible to have SNMP data collected from them.</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element maxOccurs="1" minOccurs="1" ref="this:filter" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:specific" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:include-range" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:exclude-range" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:include-url" />
        <element maxOccurs="1" minOccurs="0" ref="this:storeByIfAlias" />
        <element maxOccurs="1" minOccurs="0" ref="this:storeByNodeID" />
        <element maxOccurs="1" minOccurs="0" ref="this:ifAliasDomain" />
        <element maxOccurs="1" minOccurs="0" ref="this:storFlagOverride" />
        <element maxOccurs="1" minOccurs="0" ref="this:ifAliasComment" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:service" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:outage-calendar" />
      </sequence>
      <attribute ref="this:name" use="required" />
    </complexType>
  </element>

  <element name="filter">
    <annotation>
      <documentation>A rule which addresses belonging to this package must pass. This package is applied only to addresses that pass this filter.</documentation>
    </annotation>

    <complexType>
      <simpleContent>
        <extension base="string" />
      </simpleContent>
    </complexType>
  </element>

  <element name="specific" type="string">
    <annotation>
      <documentation>Addresses in this package</documentation>
    </annotation>
  </element>

  <element name="include-range">
    <annotation>
      <documentation>Range of addresses to be included in this package</documentation>
    </annotation>

    <complexType>
      <attribute ref="this:begin" use="required" />
      <attribute ref="this:end" use="required" />
    </complexType>
  </element>

  <element name="exclude-range">
    <annotation>
      <documentation>Range of adresses to be excluded from this package</documentation>
    </annotation>

    <complexType>
      <attribute ref="this:begin" use="required" />
      <attribute ref="this:end" use="required" />
    </complexType>
  </element>

  <element name="include-url" type="string">
    <annotation>
      <documentation>A file URL holding specific addresses to be polled.
        Each line in the URL file can be one of:
        "&lt;IP&gt;&lt;space&gt;#&lt;comments&gt;"; "&lt;IP&gt;";
        "#&lt;comments&gt;"; Lines starting with a '#' are ignored and so
        are characters after a '&lt;space&gt;#' in a line.</documentation>
    </annotation>
  </element>

  <element name="storeByIfAlias" type="string">
    <annotation>
      <documentation>Flag for storing collected data by domain/ifAlias. Defaults to false. Allowable values are true, false.
            </documentation>
    </annotation>
  </element>

  <element name="storeByNodeID" type="string">
    <annotation>
      <documentation>Flag for storing collected data by nodeid/interface name. Defaults to normal. Allowable values are true, false, normal.
            </documentation>
    </annotation>
  </element>

  <element name="ifAliasDomain" type="string">
    <annotation>
      <documentation>The name of the domain covered by this collection package. Defaults to package name.
            </documentation>
    </annotation>
  </element>

  <element name="storFlagOverride" type="string">
    <annotation>
      <documentation>Flag for controlling how interfaces are selected for
        data collection by domain/ifAlias. If true, storage will occur for
        any interface on the node found to have an valid ifAlias. Otherwise
        data will be stored only if the interface is configured for data
        collection. Defaults to false.
            </documentation>
    </annotation>
  </element>

  <element name="ifAliasComment" type="string">
    <annotation>
      <documentation>A character or string for terminating ifAlias text.
        In effect, any text beginning with this character or string becomes
        a comment and is not considered part of the ifAlias when naming
        storage files and displaying data. Defaults to null.
            </documentation>
    </annotation>
  </element>

  <element name="service">
    <annotation>
      <documentation>Service to be collected for addresses in this package</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element maxOccurs="unbounded" minOccurs="0" ref="this:parameter" />
      </sequence>
      <attribute ref="this:name" use="required" />
      <attribute ref="this:interval" use="required" />
      <attribute ref="this:user-defined" use="optional" />
      <attribute ref="this:status" use="optional" />
    </complexType>
  </element>

  <element name="outage-calendar" type="string">
    <annotation>
      <documentation>Scheduled outages - data collection is not performed during scheduled outages</documentation>
    </annotation>
  </element>

  <element name="parameter">
    <annotation>
      <documentation>Parameters to be used for collecting this service. Parameters are specific to the service monitor.</documentation>
    </annotation>

    <complexType>
      <attribute ref="this:key" use="required" />
      <attribute ref="this:value" use="required" />
    </complexType>
  </element>


  <attribute name="threads" type="int">
    <annotation>
      <documentation>The maximum number of threads used for data collection.</documentation>
    </annotation>
  </attribute>


  <attribute name="service" type="string">
    <annotation>
      <documentation>The service name</documentation>
    </annotation>
  </attribute>

  <attribute name="class-name" type="string">
    <annotation>
      <documentation>The class used to perform data collection via the service</documentation>
    </annotation>
  </attribute>

  <attribute name="name" type="string" />

  <attribute name="begin" type="string">
    <annotation>
      <documentation>Starting address of the range</documentation>
    </annotation>
  </attribute>

  <attribute name="end" type="string">
    <annotation>
      <documentation>Ending address of the range</documentation>
    </annotation>
  </attribute>

  <attribute name="interval" type="long">
    <annotation>
      <documentation>the interval at which the service is to be collected</documentation>
    </annotation>
  </attribute>

  <attribute name="user-defined">
    <annotation>
      <documentation>marker to say if service is user defined, used specifically for UI purposes</documentation>
    </annotation>

    <simpleType>
      <restriction base="string">
        <pattern value="(true|false)" />
      </restriction>
    </simpleType>
  </attribute>

  <attribute name="status">
    <annotation>
      <documentation>status of the service, service is collected only if on</documentation>
    </annotation>

    <simpleType>
      <restriction base="string">
        <pattern value="(on|off)" />
      </restriction>
    </simpleType>
  </attribute>

  <attribute name="key" type="string" />

  <attribute name="value" type="string" />
</schema>

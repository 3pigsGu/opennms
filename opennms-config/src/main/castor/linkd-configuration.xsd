<?xml version="1.0"?>
<schema targetNamespace="http://xmlns.opennms.org/xsd/config/linkd" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:this="http://xmlns.opennms.org/xsd/config/linkd"
  xmlns:ns2="http://www.w3.org/1999/xhtml" xmlns:ns="http://www.w3.org/2001/XMLSchema" xmlns:hfp="http://www.w3.org/2001/XMLSchema-hasFacetAndProperty">
  <annotation>
    <documentation>XML Schema for the linkd-configuration.xml configuration file.</documentation>
  </annotation>

  <element name="linkd-configuration">
    <annotation>
      <documentation>Top-level element for the linkd-configuration.xml configuration file.</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element ref="this:iproutes" minOccurs="0" maxOccurs="1">
          <annotation>
            <documentation>A section to get specific Vendors ipRoute informations that are used to get ipRoute tables on nodes.</documentation>
          </annotation>
        </element>

        <element ref="this:vlans" minOccurs="1" maxOccurs="1">
          <annotation>
            <documentation>A section to get specific Vendors Vlan informations that are used to get vlan tables on nodes.</documentation>
          </annotation>
        </element>

        <element maxOccurs="unbounded" minOccurs="1" ref="this:package">
          <annotation>
            <documentation>Package encapsulating addresses, data to be collected for these addresses, etc.</documentation>
          </annotation>
        </element>

      </sequence>

      <attribute ref="this:threads" use="required" />
      <attribute ref="this:initial_sleep_time" use="required" />
      <attribute ref="this:snmp_poll_interval" use="required" />
      <attribute ref="this:discovery_link_interval" use="required" />
      <attribute ref="this:auto-discovery" use="optional" default="false" />
      <attribute ref="this:enable-discovery-download" use="optional" default="false" />
      <attribute ref="this:enable-vlan-discovery" use="optional" default="true" />
      <attribute ref="this:use-cdp-discovery" use="optional" default="true" />
      <attribute ref="this:use-ip-route-discovery" use="optional" default="true" />
      <attribute ref="this:use-bridge-discovery" use="optional" default="true" />
      <attribute ref="this:save-route-table" use="optional" default="true" />
      <attribute ref="this:save-stp-node-table" use="optional" default="true" />
      <attribute ref="this:save-stp-interface-table" use="optional" default="true" />
      <attribute ref="this:force-ip-route-discovery-on-ethernet" use="optional" default="false" />
    </complexType>
  </element>

  <element name="iproutes">
    <complexType>
      <sequence>
        <element ref="this:vendor" minOccurs="1" maxOccurs="unbounded">
          <annotation>
            <documentation>Identifies the classes to get ipRouute from specific vendor devices SysOIDs.</documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <element name="vlans">
    <complexType>
      <sequence>
        <element ref="this:vendor" minOccurs="1" maxOccurs="unbounded">
          <annotation>
            <documentation>Identifies the classes to get Vlans from specific vendor devices SysOIDs.</documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <element name="vendor">
    <complexType>
      <sequence>
        <element ref="this:specific" minOccurs="1" maxOccurs="unbounded" />
        <element ref="this:include-range" minOccurs="0" maxOccurs="unbounded" />
        <element ref="this:exclude-range" minOccurs="0" maxOccurs="unbounded" />
      </sequence>

      <attribute ref="this:vendor_name" use="required" />
      <attribute ref="this:sysoidRootMask" use="required" />
      <attribute ref="this:class-name" use="required" />
    </complexType>
  </element>

  <element name="specific" type="string">
    <annotation>
      <documentation>Specific SysOID submask node to be polled to get vlan.</documentation>
    </annotation>
  </element>

  <element name="include-range">
    <complexType>
      <attribute ref="this:begin" use="required" />
      <attribute ref="this:end" use="required" />
    </complexType>
  </element>

  <!--- the range of addresses to be excluded from the polling -->
  <element name="exclude-range">
    <complexType>
      <attribute ref="this:begin" use="required" />
      <attribute ref="this:end" use="required" />
    </complexType>
  </element>

  <element name="include-url" type="string">
    <annotation>
      <documentation>
        A file URL holding specific addresses to be polled. Each line in the URL file can be one
        of: &lt;IP&gt;&lt;space&gt;#&lt;comments&gt; or &lt;IP&gt; or #&lt;comments&gt;. Lines
        starting with a '#' are ignored and so are characters after a '&lt;space&gt;#' in a line.
            </documentation>
    </annotation>
  </element>

  <element name="package">
    <annotation>
      <documentation>Package encapsulating addresses to performs the Discovery of Links among them.</documentation>
    </annotation>

    <complexType>
      <sequence>
        <element maxOccurs="1" minOccurs="1" ref="this:filter" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:specific" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:include-range" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:exclude-range" />
        <element maxOccurs="unbounded" minOccurs="0" ref="this:include-url" />
      </sequence>

      <attribute ref="this:name" use="required" />
      <attribute ref="this:snmp_poll_interval" />
      <attribute ref="this:discovery_link_interval" />
      <attribute ref="this:auto-discovery" />
      <attribute ref="this:enable-discovery-download" />
      <attribute ref="this:enable-vlan-discovery" />
      <attribute ref="this:use-cdp-discovery" />
      <attribute ref="this:use-ip-route-discovery" />
      <attribute ref="this:use-bridge-discovery" />
      <attribute ref="this:save-route-table" />
      <attribute ref="this:save-stp-node-table" />
      <attribute ref="this:save-stp-interface-table" />
      <attribute ref="this:force-ip-route-discovery-on-ethernet" use="optional" default="false" />
    </complexType>

  </element>

  <element name="filter">
    <annotation>
      <documentation>A rule which addresses belonging to this package must pass. This package is applied only to addresses that pass this filter</documentation>
    </annotation>

    <complexType>
      <simpleContent>
        <extension base="string" />
      </simpleContent>
    </complexType>
  </element>
  <attribute name="name" type="string" />

  <attribute name="threads" type="int">
    <annotation>
      <documentation>The max number of threads used for polling SNMP devices and discovery links.</documentation>
    </annotation>
  </attribute>

  <attribute name="initial_sleep_time" type="long">
    <annotation>
      <documentation>The initial sleep time in milliseconds before starting SNMP Collection.</documentation>
    </annotation>
  </attribute>

  <attribute name="snmp_poll_interval" type="long">
    <annotation>
      <documentation>SNMP Poll Time interval in mill seconds.</documentation>
    </annotation>
  </attribute>

  <attribute name="discovery_link_interval" type="long">
    <annotation>
      <documentation>Time interval in milliseconds from last SNMP collection and link discovery.</documentation>
    </annotation>
  </attribute>

  <attribute name="auto-discovery" type="boolean">
    <annotation>
      <documentation>Whether Linkd should generate newSuspect events for IP addresses unknown to OpenNMS found on nodes SNMP tables.</documentation>
    </annotation>
  </attribute>

  <attribute name="enable-discovery-download" type="boolean">
    <annotation>
      <documentation>
        Whether Discovery Link should try to get specific SNMP bridge info probably lost in SNMP data collection.
        Should be enabled only in very complex network where SNMP collection often fails.
        Enabling this flags slows the discovery process a lot.   
          </documentation>
    </annotation>
  </attribute>

  <attribute name="enable-vlan-discovery" type="boolean">
    <annotation>
      <documentation>Whether SNMP collection has to collect SNMP Vlan tables on devices. The Vlan data collection is made using the classes defined in vlans elements.</documentation>
    </annotation>
  </attribute>

  <attribute name="use-cdp-discovery" type="boolean">
    <annotation>
      <documentation>Whether links discovery process should use cisco discovery protocol SNMP tables.</documentation>
    </annotation>
  </attribute>

  <attribute name="use-ip-route-discovery" type="boolean">
    <annotation>
      <documentation>Whether links discovery process should use IP route tables.</documentation>
    </annotation>
  </attribute>

  <attribute name="use-bridge-discovery" type="boolean">
    <annotation>
      <documentation>Whether links discovery process should use SNMP bridge and spanning tree tables.</documentation>
    </annotation>
  </attribute>

  <attribute name="save-route-table" type="boolean">
    <annotation>
      <documentation>Whether Linkd has to save SNMP IP route tables to database</documentation>
    </annotation>
  </attribute>

  <attribute name="save-stp-node-table" type="boolean">
    <annotation>
      <documentation>Whether Linkd has save bridge base informations to database.</documentation>
    </annotation>
  </attribute>

  <attribute name="save-stp-interface-table" type="boolean">
    <annotation>
      <documentation>Whether Linkd has to save to database bridge interfaces informations to database.</documentation>
    </annotation>
  </attribute>

  <attribute name="force-ip-route-discovery-on-ethernet" type="boolean">
    <annotation>
      <documentation>Whether Linkd has to find links using IP route tables on ethernet interfaces.</documentation>
    </annotation>
  </attribute>

  <attribute name="vendor_name" type="string">
    <annotation>
      <documentation>Vendor identifier.</documentation>
    </annotation>
  </attribute>

  <attribute name="sysoidRootMask" type="string">
    <annotation>
      <documentation>Vendor SysOID root identifier.</documentation>
    </annotation>
  </attribute>

  <attribute name="class-name" type="string">
    <annotation>
      <documentation>Java Class Name to get Vlans Info on matching SysOIDs.</documentation>
    </annotation>
  </attribute>

  <attribute name="begin" type="string">
    <annotation>
      <documentation>Starting address of the range.</documentation>
    </annotation>
  </attribute>

  <attribute name="end" type="string">
    <annotation>
      <documentation>Ending address of the range.</documentation>
    </annotation>
  </attribute>

</schema>

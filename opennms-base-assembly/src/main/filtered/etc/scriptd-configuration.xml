<?xml version="1.0"?>
<scriptd-configuration>
	<engine language="beanshell" className="bsh.util.BeanShellBSFEngine" extensions="bsh"/>
	<start-script language="beanshell">
		log = bsf.lookupBean("log");
		event = bsf.lookupBean("event");
		snmpTrapHelper = new org.opennms.netmgt.scriptd.helper.SnmpTrapHelper();
		String line;
                targetList = new LinkedList();
                BufferedReader br = new BufferedReader(new FileReader("/etc/snmp/snmpd.conf"));
                while ((line = br.readLine())!= null) {
                        String[] fields = line.split(" ");
                        if (fields.length > 1){
                                if (fields[0].equals("trap2sink")){
                                        targetList.add(fields[1]);
                                        log.debug("target: " + fields[1]);
                                }
                        }

                }
      	</start-script>
	<event-script language="beanshell">
		<uei name="uei.opennms.org/vendor/Juniper/SpacePlatform/traps/jnxNetworkMonitoringStart"/>
		event = bsf.lookupBean("event");
		for (String target : targetList) {
			if (java.net.InetAddress.getLocalHost().getHostAddress().equals(target)) {
				log.debug("skip sending to local, otherwise there will be loop");
				continue;
			}
			log.debug("Forwarding jnxNetworkingMonitoringStart trap to " + target);
			snmpTrapHelper.forwardTrap(event, target, 162);
		}
        </event-script>
	<event-script language="beanshell">
		<uei name="uei.opennms.org/nodes/nodeDown"/>
		event = bsf.lookupBean("event");
		log.debug("received nodeDown trap from node " + event.host);
		if (event.host.toString().startsWith("space-")) {
			for (String target : targetList) {
				try {
					<!-- send trap to each target -->
					SnmpTrapBuilder trap = snmpTrapHelper.createV1Trap(".1.3.6.1.4.1.2636.1.3.1.1", target, 6, 2, 0);
					t_interface = event.getInterface();
					if (t_interface != null) 
						snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.2636.1.3.1.2.1", "OctetString", "text", t_interface);
					else 
						snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.2636.1.3.1.2.1", "OctetString", "text", "null");
					<!-- target is the northbound system -->
					log.debug("Forwarding a trap to " + target); 
					trap.send(target, 162, "public"); 
				} catch (e) { 
					sw = new StringWriter(); 
					pw = new PrintWriter(sw); 
					e.printStackTrace(pw); 
					log.debug(sw.toString()); 
				}
                	}
                }
	</event-script>
	<event-script language="beanshell">
		<uei name="uei.opennms.org/standard/rfc2981/traps/mteTriggerFired" />
		import org.opennms.netmgt.capsd.EventUtils;
		event = bsf.lookupBean("event");
		log.debug("received Disman trap from node " + event.host);
		log.debug("mteHotOID is " + EventUtils.getParm(event, ".1.3.6.1.2.1.88.2.1.4"));
		<!-- if mteHotOID is prErrorFlag, check whether the prName is run.sh (jboss)-->
		if (EventUtils.getParm(event, ".1.3.6.1.2.1.88.2.1.4").startsWith(".1.3.6.1.4.1.2021.2.1.100")) {
			log.debug("prName is " + EventUtils.getParm(event, ".1.3.6.1.4.1.2021.2.1.2"));
			if ("run.sh".equals(EventUtils.getParm(event, ".1.3.6.1.4.1.2021.2.1.2"))) {
				for (String target : targetList) {
                                        <!-- send trap to each target -->
					try {
	                                        trap = snmpTrapHelper.createV1Trap(".1.3.6.1.4.1.2636.1.3.1.1", target, 6, 3, 0);
	                                        t_interface = event.getInterface();
	                                        if (t_interface != null)
	                                                snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.2636.1.3.1.2.1", "OctetString", "text", t_interface);
	                                        else
	                                                snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.2636.1.3.1.2.1", "OctetString", "text", "null");
	                                        log.debug("Forwarding a trap to " + target);
	                                        trap.send(target, 162, "public");
	                                } catch (e) {
	                                        sw = new StringWriter();
	                                        pw = new PrintWriter(sw);
	                                        e.printStackTrace(pw);
	                                        log.debug(sw.toString());
                               		}
				}
			}				
		}
        </event-script>

</scriptd-configuration>


<?xml version="1.0" encoding="UTF-8" standalone="no"?><VacuumdConfiguration period="86400000">
  <statement>
    <!-- removes references in topo maps to nodes that have been marked as deleted - cascading deletes cannot work here -->
    DELETE FROM element
     WHERE element.elementtype = 'N'
       AND element.elementid IN
           (SELECT nodeid
              FROM node
             WHERE nodetype = 'D');
  </statement>

  <statement>
    <!-- this deletes all entries in atInterface that have been marked as deleted -->
    DELETE FROM atInterface WHERE atInterface.status = 'D';
  </statement>

  <statement>
    <!-- this deletes all entries in datalinkInterface that have been marked as deleted -->
    DELETE FROM datalinkInterface WHERE datalinkInterface.status = 'D';
  </statement>

  <statement>
    <!-- this deletes all entries in ipRouteInterface that have been marked as deleted -->
    DELETE FROM ipRouteInterface WHERE ipRouteInterface.status = 'D';
  </statement>

  <statement>
    <!-- this deletes all entries in stpInterface that have been marked as deleted -->
    DELETE FROM stpInterface WHERE stpInterface.status = 'D';
  </statement>
   
  <statement>
    <!-- this deletes all the snmpInterfaces that have been marked as deleted -->
    DELETE FROM snmpInterface WHERE snmpInterface.snmpCollect = 'D';
  </statement>

  <statement>
    <!-- this deletes all the nodes that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM node WHERE node.nodeType = 'D';
  </statement>
   
  <statement>
    <!-- this deletes all the interfaces that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM ipInterface WHERE ipInterface.isManaged = 'D';
  </statement>
   
  <statement>
    <!-- this deletes all the services that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM ifServices WHERE ifServices.status = 'D';
  </statement>
   
  <statement>
    <!-- this deletes any events that are not associated with outages - Thanks to Chris Fedde for this -->
    DELETE FROM events WHERE NOT EXISTS 
      (SELECT svclosteventid FROM outages WHERE svclosteventid = events.eventid  
    UNION 
      SELECT svcregainedeventid FROM outages WHERE svcregainedeventid = events.eventid 
    UNION 
      SELECT eventid FROM notifications WHERE eventid = events.eventid) 
    AND eventtime &lt; now() - interval '6 weeks';
  </statement>
    
  <automations>
    <!--WARNING This automation is to be disactevated becouse wind automations do the work -->
    <automation action-name="clearProblems" active="false" interval="30000" name="cosmicClear" trigger-name="selectResolvers"/>
                
    <automation action-name="deletePastClearedAlarms" active="true" interval="60000" name="cleanUp"/>
                
    <automation action-name="deleteAllPastClearedAlarms" active="true" interval="300000" name="fullCleanUp"/>
                
    <automation action-name="garbageCollect" active="true" interval="300000" name="GC"/>
                
    <automation action-name="fullGarbageCollect" active="true" interval="300000" name="fullGC"/>
                
    <!--WARNING This automation is to be disactevated becouse wind automations do the work -->
    <automation action-name="resetSeverity" active="false" interval="30000" name="unclear" trigger-name="selectClearedAlarms"/>

    <automation action-event="eventEscalated" action-name="escalateAlarm" active="false" interval="30000" name="escalation" trigger-name="selectSuspectAlarms"/>
                
    <automation action-name="deletePurgeableStatisticsReports" active="true" interval="3600000" name="purgeStatisticsReports"/>
    
    <!-- Enable these automation for automatic Trouble Ticketing -->
    <automation action-event="createTicket" action-name="acknowledgeAlarm" active="false" interval="30000" name="createTickets" trigger-name="selectNullTicketStateAlarms"/>
    <automation action-event="createTicket" action-name="acknowledgeAlarm" active="false" interval="30000" name="createCriticalTicket" trigger-name="selectCritialOpenAlarms"/>
    <automation action-event="updateTicket" action-name="updateAutomationTime" active="false" interval="15000" name="updateTickets" trigger-name="selectNotNullTicketStateAlarms"/>
    <automation action-event="closeTicket" action-name="updateAutomationTime" active="false" interval="60000" name="closeClearedAlarmTickets" trigger-name="selectClearedAlarmWithOpenTicketState"/>
    <automation action-name="clearClosedTicketAlarms" active="false" interval="60000" name="clearAlarmsForClosedTickets" trigger-name="selectClosedTicketStateForProblemAlarms"/>
   
    
    <!-- Here are the automations for INS Proxy-->
    
    <automation action-event="raiseAlarmEvent" action-name="resetSeverity" active="true" interval="30000" name="forwardRisingAlarms" trigger-name="selectNewRisingAlarms"/>
                                
    <automation action-event="clearAlarmEvent" action-name="clearProblemsUsingAlarmId" active="true" interval="30000" name="forwardClearingAlarms" trigger-name="selectNewClearingAlarms"/>

    <automation action-event="notifAlarmEvent" action-name="updateAutomationTime" active="true" interval="30000" name="forwardNotificationAlarms" trigger-name="selectNotificationAlarms"/>    

    <!-- End of INS Automation -->            
 
  </automations>
  
  <triggers>


	<!-- INS Trigger -->

    <trigger name="selectNewClearingAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT b.alarmid as _alarmcorrid,
                 a.alarmid as _alarmid,
                 a.severity as _severity,
                 a.eventuei as _eventuei,
                 a.nodeid as _nodeid,
                 a.ipaddr as _ipaddr,
                 a.description as _descr,
                 a.serviceid as _serviceid,
                 a.ifindex as _ifindex,
                 s.servicename as _servicename,
                 a.logmsg as _logmsg,
                 a.lasteventtime as _lasteventtime,
                 n.nodelabel as _nodelabel,
                 now() as _ts
            FROM (alarms a INNER JOIN alarms b ON a.clearkey = b.reductionkey)
         LEFT OUTER JOIN service s ON  s.serviceid = a.serviceid
         JOIN node n on n.nodeid = a.nodeid
         WHERE a.alarmtype=2
         AND b.alarmtype = 1
         AND (a.lastautomationtime is null OR a.lasteventtime &gt; a.lastautomationtime)
      </statement>
    </trigger>

	<trigger name="selectNewRisingAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid as _id,e.eventseverity AS _sev,
                 a.severity as _severity,
                 a.eventuei as _eventuei,
                 a.nodeid as _nodeid,
                 a.ipaddr as _ipaddr,
                 a.description as _descr,
                 a.serviceid as _serviceid,
                 a.ifindex as _ifindex,
                 s.servicename as _servicename,
                 a.logmsg as _logmsg,
                 n.nodelabel as _nodelabel,
                 now() as _ts
            FROM alarms a
         JOIN events e
            ON e.eventid = a.lasteventid
         LEFT OUTER JOIN service s
            ON s.serviceid = a.serviceid
         JOIN node n on n.nodeid = a.nodeid
         WHERE alarmType=1
         AND (a.lastautomationtime is null OR a.lasteventtime &gt; a.lastautomationtime)
      </statement>
    </trigger>

	<trigger name="selectNotificationAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid as _alarmid,
                 a.severity as _severity,
                 a.eventuei as _eventuei,
                 a.nodeid as _nodeid,
                 a.ipaddr as _ipaddr,
                 a.description as _descr,
                 a.serviceid as _serviceid,
                 a.ifindex as _ifindex,
                 s.servicename as _servicename,
                 a.logmsg as _logmsg,
                 n.nodelabel as _nodelabel,
                 now() as _ts
            FROM alarms a
        LEFT OUTER JOIN service s
              ON s.serviceid = a.serviceid
         JOIN node n on n.nodeid = a.nodeid
         WHERE alarmType=3
         AND lastautomationtime is null
      </statement>
    </trigger>
    
	<!--End INS Triggers -->
	
    <!-- Find Alarms that have a closed ticket state that haven't been cleared, yet -->
    <trigger name="selectClosedTicketStateForProblemAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 now() AS _ts
            FROM alarms a
           WHERE a.tticketstate = 3
             AND a.severity &gt; 2
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
      </statement>
    </trigger>
  
    <!-- Find Alarms that are older than 15 minutes with no Ticket ID (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectNullTicketStateAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 a.eventuei AS _eventuei, 
                 'admin' AS _user, 
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity &gt; 2 
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.alarmAckUser is NULL 
             AND a.tticketState IS NULL
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>

    <!-- Find Alarms that are in critical state with no TicketID and open ticket.  This handles issues where 
         alarms are continuously being reduced and has escalated high enough to require a ticket when 
         the alarm hasn't been escalated. (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectCritialOpenAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 a.eventuei AS _eventuei, 
                 'admin' AS _user, 
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity = 7 
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.alarmAckUser is NULL 
             AND a.tticketState IS NULL
             AND lasteventtime &lt; now() - interval '5 minutes'
      </statement>
    </trigger>
    
    <!-- Find Alarms that have a TicketState (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectNotNullTicketStateAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 a.eventuei AS _eventuei, 
                 'admin' AS _user, 
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity &gt; 2 
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.tticketState IS NOT NULL
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>

    <!-- Find Alarms that have cleared and have an open ticket state (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectClearedAlarmWithOpenTicketState" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 a.eventuei AS _eventuei, 
                 'admin' AS _user, 
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity = 2 
             AND a.alarmType = 1 
             AND a.tticketState = 0
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>    
  
    <trigger name="selectSuspectAlarms" operator="&gt;=" row-count="1">
      <statement>
          SELECT a.alarmid AS _alarmid, 
                 a.eventuei AS _eventuei, 
                 a.nodeid AS _nodeid, 
                 a.ipaddr AS _ipaddr, 
                 a.serviceid AS _serviceid,
                 s.servicename AS _servicename,
                 now() AS _ts
            FROM alarms a
 LEFT OUTER JOIN service s
              ON s.serviceid = a.serviceid
           WHERE ( a.alarmType = 1 OR a.alarmType = 3 )
             AND severity &gt; 3
             AND severity &lt; 7
             AND alarmacktime IS NULL
             AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '60 minutes'
      </statement>
    </trigger>
  
    <!-- This finds problems that have reoccurred since the previoius clear -->
    <trigger name="selectClearedAlarms" operator="&gt;=" row-count="1">
      <statement>
        SELECT a.alarmid AS _id, e.eventseverity AS _sev, now() AS _ts
          FROM alarms a
          JOIN events e
            ON e.eventid = a.lasteventid
         WHERE severity = 2
           AND alarmtype = 1
           AND a.lasteventtime &gt; a.lastautomationtime
      </statement>
    </trigger>
    
 
    <!-- Find all alarms that potentially clear problems --> 
    <trigger name="selectResolvers" operator="&gt;=" row-count="1">
      <statement>
        SELECT *, now() AS _ts 
          FROM alarms 
         WHERE alarmType=2
      </statement>
    </trigger>

  </triggers>
    
  <actions>

    <action name="acknowledgeAlarm">
      <statement>
        UPDATE alarms
           SET alarmackuser = ${_user}, alarmacktime = ${_ts}, lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
  
    <action name="updateAutomationTime">
      <statement>
        UPDATE alarms
           SET lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
  
    <action name="escalateAlarm">
      <statement>
        UPDATE alarms
           SET alarmAckUser = null, alarmAckTime = null, severity = severity +1, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
  
    <action name="resetSeverity">
      <statement>
        UPDATE alarms
           SET severity = ${_sev}, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_id}
      </statement>
    </action>

    <!-- action used for postgres 7.4 compatibility
    <action name="garbageCollect" >
      <statement>
        DELETE FROM alarms
         WHERE COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '3 days'
           AND alarmacktime IS NULL
      </statement>
    </action>
   -->
    <!-- a better action when using postgres 8.1 -->
    <action name="garbageCollect">
      <statement>
        DELETE FROM alarms
         WHERE GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '3 days'
           AND alarmacktime IS NULL
      </statement>
    </action>
    <!--  -->
  
    <!-- action used for postgres 7.4 compatibility 
    <action name="fullGarbageCollect" >
      <statement>
        DELETE FROM alarms
         WHERE COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '8 days'
      </statement>
    </action>
  -->
    <!-- a better action when using postgres 8.1 -->
    <action name="fullGarbageCollect">
      <statement>
        DELETE FROM alarms
         WHERE GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '8 days'
      </statement>
    </action>
    <!-- -->
    
    <!--  ticket state of 3 is closed -->
    <!--  action name="deletePastClearedAlarms" >
      <statement>
        DELETE FROM alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '2 minutes'
           AND (alarmacktime IS NULL OR tticketState = 3)
      </statement>
    </action-->

    <action name="deletePastClearedAlarms">
      <statement>
        DELETE FROM alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '5 minutes'
           AND (alarmacktime IS NULL AND (tticketstate IS NULL OR tticketState = 3))
      </statement>
    </action>
    
    <!-- May need to add a check for Open ticket state and wait for the state to be closed based on
         update ticket action-event -->
    <action name="deleteAllPastClearedAlarms">
      <statement>
        DELETE from alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '24 hours'
           AND (tticketState IS NULL OR tticketState = 3)
      </statement>
    </action>
  
    <!--  New and optimized version of clearing problems -->
    <action name="clearProblems">
      <statement>
        UPDATE alarms 
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmType=1 
           AND severity &gt; 2 
           AND lastEventTime &lt;  ${lastEventTime} 
           AND reductionKey = ${clearKey} 
      </statement> 
    </action>
    
    <!--  New version of clearing problems using the alarmId created for Wind -->
    <action name="clearProblemsUsingAlarmId">
      <statement>
        UPDATE alarms 
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmType=1 
           AND severity &gt; 2 
           AND lastEventTime &lt;  ${_lasteventtime} 
           AND alarmid = ${_alarmcorrid}; 
        UPDATE alarms 
           SET firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmType=2 
           AND alarmid = ${_alarmid}; 
      </statement> 
    </action>
    <!--  clear alarms that have a trouble ticket assigned as closed and alarm has not cleared-->
    <action name="clearClosedTicketAlarms">
      <statement>
        UPDATE alarms 
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement> 
    </action>
    
    <action name="deletePurgeableStatisticsReports">
      <statement>
        DELETE from statisticsReport
         WHERE purgeDate &lt; now()
      </statement>
    </action>

  </actions>

  <!--  Deprecating this element... see the new <action-events> element -->    
  <auto-events>
    <auto-event name="escalationEvent">
      <uei>uei.opennms.org/vacuumd/alarmEscalated</uei>
    </auto-event>
  </auto-events>

  <!-- Note: action events that have tokens require the for-each-result attribute to be set to true -->
  <action-events>
  
    <action-event for-each-result="true" name="createTicket">
      <assignment name="uei" type="field" value="uei.opennms.org/troubleTicket/create"/>
      <assignment name="alarmUei" type="parameter" value="${_eventuei}"/>
      <assignment name="user" type="parameter" value="${_user}"/>
      <assignment name="alarmId" type="parameter" value="${_alarmid}"/>
    </action-event>
    
    <action-event for-each-result="true" name="updateTicket">
      <assignment name="uei" type="field" value="uei.opennms.org/troubleTicket/update"/>
      <assignment name="alarmUei" type="parameter" value="${_eventuei}"/>
      <assignment name="user" type="parameter" value="${_user}"/>
      <assignment name="alarmId" type="parameter" value="${_alarmid}"/>
      <assignment name="troubleTicket" type="parameter" value="${_tticketID}"/>
    </action-event>

    <action-event for-each-result="true" name="closeTicket">
      <assignment name="uei" type="field" value="uei.opennms.org/troubleTicket/close"/>
      <assignment name="alarmUei" type="parameter" value="${_eventuei}"/>
      <assignment name="user" type="parameter" value="${_user}"/>
      <assignment name="alarmId" type="parameter" value="${_alarmid}"/>
      <assignment name="troubleTicket" type="parameter" value="${_tticketID}"/>
    </action-event>
    
    <action-event for-each-result="true" name="eventEscalated">
      <assignment name="uei" type="field" value="uei.opennms.org/vacuumd/alarmEscalated"/>
      <assignment name="nodeid" type="field" value="${_nodeid}"/>
      <assignment name="interface" type="field" value="${_ipaddr}"/>
      <assignment name="service" type="field" value="${_servicename}"/>
      <assignment name="alarmId" type="parameter" value="${_alarmid}"/>
      <assignment name="alarmEventUei" type="parameter" value="${_eventUei}"/>
    </action-event>

   <action-event for-each-result="true" name="raiseAlarmEvent">
      <assignment name="uei" type="field" value="uei.opennms.org/internal/alarms/AlarmRaised"/>
      <assignment name="nodeid" type="field" value="${_nodeid}"/>
      <assignment name="interface" type="field" value="${_ipaddr}"/>
      <assignment name="service" type="field" value="${_servicename}"/>
      <assignment name="descr" type="field" value="${_descr}"/>
      <assignment name="ifIndex" type="field" value="${_ifindex}"/>
      <assignment name="operinstruct" type="field" value="${_id}"/>
      <assignment name="alarmEventUei" type="parameter" value="${_eventUei}"/>
      <assignment name="nnmFormat" type="parameter" value="${_logmsg}"/>
      <assignment name="severity" type="parameter" value="${_severity}"/>
      <assignment name="nodelabel" type="parameter" value="${_nodelabel}"/>
    </action-event>
    
    <action-event for-each-result="true" name="clearAlarmEvent">
      <assignment name="uei" type="field" value="uei.opennms.org/internal/alarms/AlarmCleared"/>
      <assignment name="nodeid" type="field" value="${_nodeid}"/>
      <assignment name="interface" type="field" value="${_ipaddr}"/>
      <assignment name="service" type="field" value="${_servicename}"/>
      <assignment name="descr" type="field" value="${_descr}"/>
      <assignment name="ifIndex" type="field" value="${_ifindex}"/>
      <assignment name="operinstruct" type="field" value="${_alarmcorrid}"/>
      <assignment name="alarmEventUei" type="parameter" value="${_eventUei}"/>
      <assignment name="nnmFormat" type="parameter" value="${_logmsg}"/>
      <assignment name="severity" type="parameter" value="${_severity}"/>
      <assignment name="nodelabel" type="parameter" value="${_nodelabel}"/>
    </action-event>
 
    <action-event for-each-result="true" name="notifAlarmEvent">
      <assignment name="uei" type="field" value="uei.opennms.org/internal/alarms/NotificationAlarm"/>
      <assignment name="nodeid" type="field" value="${_nodeid}"/>
      <assignment name="interface" type="field" value="${_ipaddr}"/>
      <assignment name="service" type="field" value="${_servicename}"/>
      <assignment name="descr" type="field" value="${_descr}"/>
      <assignment name="ifIndex" type="field" value="${_ifindex}"/>
      <assignment name="operinstruct" type="field" value="${_alarmid}"/>
      <assignment name="alarmEventUei" type="parameter" value="${_eventUei}"/>
      <assignment name="nnmFormat" type="parameter" value="${_logmsg}"/>
      <assignment name="severity" type="parameter" value="${_severity}"/>
      <assignment name="nodelabel" type="parameter" value="${_nodelabel}"/>
    </action-event> 
  </action-events>
</VacuumdConfiguration>
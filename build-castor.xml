<?xml version="1.0"?>

<!--=================================================================

   $Id$

==================================================================== -->

<project name="opennms" default="castor.sources.generate" basedir=".">
	
	<description>Build file for OpenNMS' castor-generated Java files.</description>

	<property name="dev.lib.dir" value="${basedir}/devlib"/>
	<property name="packaged.lib.dir" value="${basedir}/lib"/>
	
	<taskdef classname="com.tombrus.cleanImports.ant.CleanImports" classpath="${dev.lib.dir}/cleanImports.jar" name="cleanimports" />
	
	<target name="castor.setup">
		<mkdir dir="${build.dir}/castor-config/org/exolab/castor/builder" />
		<copy tofile="${build.dir}/castor-config/org/exolab/castor/builder/castorbuilder.properties" file="${dev.lib.dir}/castorbuilder.properties"/>
		
	
	<taskdef name="castor" classname="org.exolab.castor.tools.ant.taskdefs.CastorSourceGenTask">
	    <classpath>
	    	  <pathelement location="${build.dir}/castor-config" />
	    	  <pathelement location="${dev.lib.dir}/castor-0.9.6-srcgen-ant-task.jar" />
	    	  <pathelement location="${packaged.lib.dir}/castor-0.9.6.jar" />
	      <pathelement location="${packaged.lib.dir}/xercesImpl-2.6.2.jar" />
	    	  <pathelement location="${packaged.lib.dir}/commons-logging.jar" />
	    </classpath>
	</taskdef>
	
	


	<macrodef name="castor-gen">
		<attribute name="file" default="" />
		<attribute name="srcpackage" />
		<element name="pathelements" optional="yes" implicit="yes" />
		<sequential>
			<mkdir dir="${build.castor.source.dir}" />

			<!-- compute the package dir from the package name -->
			<propertyregex property="@{srcpackage}.srcdir" input="@{srcpackage}" regexp="\." replace="/" global="true" />

			<!-- store the package dir in castor.gen.target.dir -->
			<propertycopy override="true" name="castor.gen.targetdir" from="@{srcpackage}.srcdir" />

			<!-- HACK:  Seems like outofdate below doesn't like it if there are no files and
    	     no dir which seems like would be common when bootstrapping.  But... it doesn't
    	     really matter here.  As a result if the dir doesn't exist I set a flag that
    	     forces castor to run for this .xsd
    	     -->
			<if>
				<not>
					<available file="${build.castor.source.dir}/${castor.gen.targetdir}" />
				</not>
				<then>
					<mkdir dir="${build.castor.source.dir}/${castor.gen.targetdir}" />
					<property name="@{srcpackage}.force" value="true" />
					<propertycopy override="true" name="castor.gen.force" from="@{srcpackage}.force" />
				</then>
				<else>
					<property name="@{srcpackage}.force" value="false" />
					<propertycopy override="true" name="castor.gen.force" from="@{srcpackage}.force" />
				</else>
			</if>

			<!-- now rerun castor if the .java files are out of date. We delete the
			     files so castor doesn't ask us if we want to overwrite it.  -->
			<outofdate force="${castor.gen.force}">
				<!-- the xsds -->
				<sourcefiles>
					<pathelement path="@{file}" />
					<pathelements />
				</sourcefiles>
				<!-- the generated files -->
				<targetfiles>
					<fileset dir="${build.castor.source.dir}/${castor.gen.targetdir}">
						<include name="*.java" />
					</fileset>
				</targetfiles>
				<!-- we delete all the targets if they are out of date so if doesn't ask -->
				<deletetargets all="true" quiet="true" />
				<sequential>
					<!-- run the castor task for every xsd -->
					<for param="xsd">
						<!-- this are the elements that 'for' loops over -->
						<path>
							<pathelement path="@{file}" />
							<pathelements />
						</path>
						<!-- run castor -->
						<sequential>
							<castor  file="@{xsd}" package="@{srcpackage}"
								properties="${dev.lib.dir}/castorbuilder.properties"
								todir="${build.castor.source.dir}" types="${castor.typefactory}" />
							<!--
							<castor  file="@{xsd}" srcpackage="@{srcpackage}"
								castorBuilderProperties="${dev.lib.dir}/castorbuilder.properties"
								destination="${build.castor.source.dir}" typefactory="${castor.typefactory}" />
							-->
						</sequential>
					</for>

					<!-- Clean the imports so when using eclipse we don't have so many warnings -->
					<if>
						<istrue value="${build.clean.imports}" />
						<then>
							<echo>Cleaning imports for @{srcpackage}...</echo>
							<cleanimports srcdir="${build.castor.source.dir}" includes="${castor.gen.targetdir}/*.java">
								<classpath>
								  <path refid="libraries.java.path" />
								  <pathelement location="${build.castor.source.dir}" />
								</classpath>
							</cleanimports>
						</then>
					</if>

				</sequential>
			</outofdate>

		</sequential>
	</macrodef>
		
	</target>
		

	<!-- this target processes each xsd -->

	<!-- NOTE:  You must change devlib/castorbuilder.properties if you change the namespace or packages for these files -->
	<target name="castor.sources.generate" depends="castor.setup">
		<castor-gen file="${castor.config.dir}/types.xsd" srcpackage="org.opennms.netmgt.config.common" />
		<castor-gen srcpackage="org.opennms.netmgt.config.threshd">
			<pathelement path="${castor.config.dir}/threshd-configuration.xsd" />
			<pathelement path="${castor.config.dir}/thresholding-config.xsd" />
		</castor-gen>
		<castor-gen srcpackage="org.opennms.netmgt.config.collectd">
			<pathelement path="${castor.config.dir}/collectd-configuration.xsd" />
			<pathelement path="${castor.config.dir}/jmx-datacollection-config.xsd" />
		</castor-gen>
		<castor-gen file="${castor.config.dir}/datacollection-config.xsd" srcpackage="org.opennms.netmgt.config.datacollection" />
		<castor-gen srcpackage="org.opennms.netmgt.config.poller">
			<pathelement path="${castor.config.dir}/poller-configuration.xsd" />
			<pathelement path="${castor.config.dir}/poll-outages.xsd" />
		</castor-gen>
		<castor-gen file="${castor.config.dir}/actiond-configuration.xsd" srcpackage="org.opennms.netmgt.config.actiond" />
		<castor-gen file="${castor.xsd.dir}/availability_report.xsd" srcpackage="org.opennms.report.availability" />
		<castor-gen file="${castor.config.dir}/capsd-configuration.xsd" srcpackage="org.opennms.netmgt.config.capsd" />
		<castor-gen file="${castor.config.dir}/categories.xsd" srcpackage="org.opennms.netmgt.config.categories" />
		<castor-gen file="${castor.config.dir}/chart-configuration.xsd" srcpackage="org.opennms.netmgt.config.charts" />
		<castor-gen file="${castor.config.dir}/destinationPaths.xsd" srcpackage="org.opennms.netmgt.config.destinationPaths" />
		<castor-gen file="${castor.config.dir}/dhcpd-configuration.xsd" srcpackage="org.opennms.netmgt.config.dhcpd" />
		<castor-gen file="${castor.config.dir}/discovery-configuration.xsd" srcpackage="org.opennms.netmgt.config.discovery" />
		<castor-gen file="${castor.xsd.dir}/event.xsd" srcpackage="org.opennms.netmgt.xml.event" />
		<castor-gen file="${castor.xsd.dir}/eventconf.xsd" srcpackage="org.opennms.netmgt.xml.eventconf" />
		<castor-gen file="${castor.config.dir}/eventd-configuration.xsd" srcpackage="org.opennms.netmgt.config.eventd" />
		<castor-gen file="${castor.config.dir}/events-archiver-configuration.xsd" srcpackage="org.opennms.netmgt.config.archiver.events" />
		<castor-gen file="${castor.config.dir}/database-schema.xsd" srcpackage="org.opennms.netmgt.config.filter" />
		<castor-gen file="${castor.config.dir}/groups.xsd" srcpackage="org.opennms.netmgt.config.groups" />
		<castor-gen file="${castor.config.dir}/ksc-performance-reports.xsd" srcpackage="org.opennms.netmgt.config.kscReports" />
		<castor-gen file="${castor.config.dir}/notifd-configuration.xsd" srcpackage="org.opennms.netmgt.config.notifd" />
		<castor-gen file="${castor.config.dir}/notificationCommands.xsd" srcpackage="org.opennms.netmgt.config.notificationCommands" />
		<castor-gen file="${castor.config.dir}/notifications.xsd" srcpackage="org.opennms.netmgt.config.notifications" />
		<castor-gen file="${castor.config.dir}/outage-configuration.xsd" srcpackage="org.opennms.netmgt.config.outage" />
		<castor-gen file="${castor.config.dir}/vacuumd-configuration.xsd" srcpackage="org.opennms.netmgt.config.vacuumd" />
		<castor-gen file="${castor.config.dir}/rtc-configuration.xsd" srcpackage="org.opennms.netmgt.config.rtc" />
		<castor-gen file="${castor.xsd.dir}/rtceui.xsd" srcpackage="org.opennms.netmgt.xml.rtc" />
		<castor-gen file="${castor.config.dir}/scriptd-configuration.xsd" srcpackage="org.opennms.netmgt.config.scriptd" />
		<castor-gen file="${castor.config.dir}/opennms-server.xsd" srcpackage="org.opennms.netmgt.config.server" />
		<castor-gen file="${castor.config.dir}/service-configuration.xsd" srcpackage="org.opennms.netmgt.config.service" />
		<castor-gen file="${castor.config.dir}/snmp-config.xsd" srcpackage="org.opennms.netmgt.config.snmp" />
		<castor-gen file="${castor.config.dir}/trapd-configuration.xsd" srcpackage="org.opennms.netmgt.config.trapd" />
		<castor-gen file="${castor.config.dir}/vulnscand-configuration.xsd" srcpackage="org.opennms.netmgt.config.vulnscand" />
		<castor-gen file="${castor.config.dir}/xmlrpcd-configuration.xsd" srcpackage="org.opennms.netmgt.config.xmlrpcd" />
		<castor-gen file="${castor.config.dir}/users.xsd" srcpackage="org.opennms.netmgt.config.users" />
		<castor-gen file="${castor.config.dir}/views.xsd" srcpackage="org.opennms.netmgt.config.views" />
		<castor-gen file="${castor.config.dir}/viewsdisplay.xsd" srcpackage="org.opennms.netmgt.config.viewsdisplay" />
		<castor-gen file="${castor.config.dir}/webui-colors.xsd" srcpackage="org.opennms.netmgt.config.webuiColors" />

	</target>




</project>

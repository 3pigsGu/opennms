/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2002-2014 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.trapd;

import static org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.util.Objects;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.dao.api.InterfaceToNodeCache;
import org.opennms.netmgt.dao.api.MonitoringLocationDao;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.model.events.snmp.SyntaxToEvent;
import org.opennms.netmgt.snmp.SnmpObjId;
import org.opennms.netmgt.snmp.SnmpValue;
import org.opennms.netmgt.snmp.SnmpVarBindDTO;
import org.opennms.netmgt.snmp.TrapIdentity;
import org.opennms.netmgt.snmp.TrapInformation;
import org.opennms.netmgt.xml.event.Event;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Strings;

class EventCreator {
	
	private static final Logger LOG = LoggerFactory.getLogger(EventCreator.class);

    private final InterfaceToNodeCache m_cache;

    public EventCreator(InterfaceToNodeCache cache) {
        m_cache = Objects.requireNonNull(cache);
    }

    public Event getEvent(TrapInformation trapInformation) {
        // Validate trap before continuing
        trapInformation.validate();

        // TODO MVR make log message nice
        LOG.debug("{} trap - trapInterface: ()", trapInformation.getVersion(), trapInformation.getTrapAddress());

        // Set event data
        final EventBuilder eventBuilder = new EventBuilder(null, "trapd");
        eventBuilder.setTime(new Date(trapInformation.getCreationTime()));
        eventBuilder.setCommunity(trapInformation.getCommunity());
        eventBuilder.setSnmpTimeStamp(trapInformation.getTimeStamp());
        eventBuilder.setSnmpVersion(trapInformation.getVersion());
        eventBuilder.setSnmpHost(str(trapInformation.getTrapAddress()));
        eventBuilder.setInterface(trapInformation.getTrapAddress());
        eventBuilder.setHost(InetAddressUtils.toIpAddrString(trapInformation.getAgentAddress()));

        // Handle trap identity
        final TrapIdentity trapIdentity = trapInformation.getTrapIdentity();
        if (trapIdentity != null) {
            // TODO MVR make Log message nice
            LOG.debug("setTrapIdentity: SNMP trap {}", trapIdentity);
            eventBuilder.setGeneric(trapIdentity.getGeneric());
            eventBuilder.setSpecific(trapIdentity.getSpecific());
            eventBuilder.setEnterpriseId(trapIdentity.getEnterpriseId());
        }

        // Handle var bindings
        for (int i = 0; i < trapInformation.getPduLength(); i++) {
            final SnmpVarBindDTO varBind = trapInformation.getSnmpVarBindDTO(i);
            if (varBind != null) {
                final SnmpObjId name = varBind.getSnmpObjectId();
                final SnmpValue value = varBind.getSnmpValue();
                eventBuilder.addParam(SyntaxToEvent.processSyntax(name.toString(), value));
                if (EventConstants.OID_SNMP_IFINDEX.isPrefixOf(name)) {
                    eventBuilder.setIfIndex(value.toInt());
                }
            }
        }

        // Resolve Node id and set, if known by OpenNMS
        final long nodeId = resolveNodeId(trapInformation);
        if (nodeId != -1) {
            eventBuilder.setNodeid(nodeId);
        }

        // If there was no systemId in the trap message, assume that
        // it was generated by this system. Eventd will fill in the
        // systemId of the local system if it remains null here.
        if (!Strings.isNullOrEmpty(trapInformation.getSystemId())) {
            eventBuilder.setDistPoller(trapInformation.getSystemId());
        }
        return eventBuilder.getEvent();
    }

    private long resolveNodeId(TrapInformation trapInformation) {
        // If there was no location in the trap message, assume that
        // it was generated in the default location
        if (Strings.isNullOrEmpty(trapInformation.getLocation())) {
            return  m_cache.getNodeId(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID, trapInformation.getTrapAddress());
        }
        return m_cache.getNodeId(trapInformation.getLocation(), trapInformation.getTrapAddress());
    }
}

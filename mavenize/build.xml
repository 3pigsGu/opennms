<?xml version="1.0"?>

<!--=================================================================

   $Id$
 
   Build file that will reorganize a opennms 1.x source tree to an opennms 2.x tree
 
==================================================================== -->

<project name="opennms-mavenize" default="usage" basedir=".">
	<description>
Reorganize an existing opennms 1.x source tree 
into a maven built 2.x source tree

Make sure you set ${maven.basedir} to the directory
to put the reorg code into. 
  </description>

	<property name="opennms.dir" value=".." />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${opennms.dir}/devlib/ant-contrib.jar" />
		</classpath>
	</taskdef>
	
	<property name="template.dir" value="templates" />
	<property name="module.resources.dir" value="module-resources" />

	<property name="maven.basedir" value="tmp" />

	<property name="java.subdir" value="src/main/java" />
	<property name="test.subdir" value="src/test/java" />
	<property name="castor.subdir" value="src/main/castor" />
	<property name="sablecc.subdir" value="src/main/sablecc" />
	<property name="native.subdir" value="src/main/native" />

	<property name="module.prefix" value="opennms-" />
	<property name="ROOT-groupId" value="org.opennms"/>
	<property name="ROOT-artifactId" value="opennms" />
	<property name="ROOT-version" value="1.3.1-SNAPSHOT" />
	<property name="ROOT-basedir" value="${maven.basedir}"/>

	<macrodef name="stack-init">
		<attribute name="stack-name"/>
		<attribute name="initial-value"/>
		<sequential>
			<var name="@{stack-name}-values" value=""/>
			<var name="@{stack-name}-top" value="@{initial-value}"/>
		</sequential>
	</macrodef>
			
	<macrodef name="stack-push">
		<attribute name="stack-name"/>
		<attribute name="value"/>
		<sequential>
			<var name="@{stack-name}-values" value="${@{stack-name}-top}#${@{stack-name}-values}" />
			<var name="@{stack-name}-top" value="@{value}" />
		</sequential>
	</macrodef>
	
	<macrodef name="stack-pop">
		<attribute name="stack-name"/>
		<sequential>
			<propertyregex property="@{stack-name}-top" override="true" input="${@{stack-name}-values}" regexp="([^#]*)#.*" select="\1" />
			<propertyregex property="@{stack-name}-values" override="true" input="${@{stack-name}-values}" regexp="[^#]*#(.*)" select="\1" />
		</sequential>
	</macrodef>
	
	<macrodef name="module-stack-init">
		<sequential>
			<stack-init stack-name="modules" initial-value="ROOT"/>
		</sequential>
	</macrodef>
	
    <macrodef name="push-module">
        <attribute name="module-id" />
        <sequential>
        		<stack-push stack-name="modules" value="@{module-id}"/>
        </sequential>
    </macrodef>

    <macrodef name="pop-module">
        <sequential>
        		<stack-pop stack-name="modules" />
        </sequential>
    </macrodef>


	<target name="usage" description="--> How to use this build file">
		<java fork="true" dir="${basedir}" jar="${ant.library.dir}/ant-launcher.jar">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- ================================= 
          target: reorg              
         ================================= -->
	<target name="reorg" depends="clean,modules" description="--> Reorganize the project to a maven2 style">
	</target>

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" depends="" description="--> Remove mavenized project files">
		<delete dir="${maven.basedir}" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-and-copy       
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-and-copy">
		<attribute name="dir" />
		<element name="files" implicit="yes" />
		<sequential>
			<mkdir dir="@{dir}" />
			<copy todir="@{dir}">
				<files />
			</copy>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-module-dir         
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-module-dir">
		<attribute name="module-id" />
		<attribute name="target-dir" />
		<element name="files" implicit="yes" />
		<sequential>
			<create-and-copy dir="${@{module-id}-basedir}/@{target-dir}">
				<files />
			</create-and-copy>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: dependency-helper          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="dependency-helper">
		<attribute name="module-id" />
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="version" />
		<attribute name="scope" default="compile" />
		<sequential>
			<concat destfile="dependencies.@{module-id}" append="true">
				<filelist dir="${basedir}" files="${template.dir}/dependency.tmpl" />
				<filterchain>
					<replacetokens>
						<token key="dependency.groupId" value="@{groupId}" />
						<token key="dependency.artifactId" value="@{artifactId}" />
						<token key="dependency.version" value="@{version}" />
						<token key="dependency.scope" value="@{scope}" />
					</replacetokens>
				</filterchain>
			</concat>
		</sequential>
	</macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          macrodef: create-parent-section          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="create-parent-section">
        <attribute name="property" />
    	    <attribute name="parent-module-id" />
        <sequential>
			<copy file="${template.dir}/parent.tmpl" tofile="tmp-parent">
				<filterchain>
					<replacetokens>
						<token key="parent.groupId" value="${@{parent-module-id}-groupId}" />
						<token key="parent.artifactId" value="${@{parent-module-id}-artifactId}" />
						<token key="parent.version" value="${@{parent-module-id}-version}" />
					</replacetokens>
				</filterchain>
			</copy>
        		<loadfile property="@{property}" srcfile="tmp-parent"/>
        		<delete file="tmp-parent" />
        </sequential>
    </macrodef>

	<!-- -->
	<macrodef name="dependencies">
		<element name="deps" optional="yes" implicit="true"/>
		<sequential>
			<deps/>
		</sequential>
	</macrodef>

	<!-- use this to define a dependency for this module -->
	<macrodef name="dependency">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="version" />
		<attribute name="scope" default="compile" />
		<sequential>
			<dependency-helper module-id="${modules-top}" groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" scope="@{scope}"/>
		</sequential>
	</macrodef>

	<!-- this defines a dependency on another opennms module -->
	<macrodef name="module-dependency">
		<attribute name="id" />
		<attribute name="scope" default="compile" />
		<sequential>
			<dependency-helper module-id="${modules-top}" groupId="${@{id}-groupId}" artifactId="${@{id}-artifactId}" version="${@{id}-version}" scope="@{scope}"/>
		</sequential>
	</macrodef>
	
	<!-- this defines the sources that need to be copied for this module -->
	<macrodef name="sources">
		<attribute name="source-type" />
		<element name="filesets" implicit="yes"/>
		<sequential>
			<create-module-dir module-id="${modules-top}" target-dir="${@{source-type}.subdir}">
				<filesets />
			</create-module-dir>
		</sequential>
	</macrodef>
	
	
    <!-- = = = = = = = = = = = = = = = = =
          macrodef: create-empty-module          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="module">
    		<attribute name="module-id" />
    		<attribute name="module-name" />
    		<attribute name="module-type" />
    		<attribute name="module-packaging" default="jar" />
    		<element name="contents" optional="true" implicit="yes"/>
    		<sequential>
			<create-empty-module-helper module-id="@{module-id}" module-name="@{module-name}" module-type="@{module-type}" module-packaging="@{module-packaging}" parent-module-id="${modules-top}">
    				<contents/>
    			</create-empty-module-helper>
        </sequential>
    </macrodef>


	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: create-empty-module-helper
          This macro defines a new module that has a pom.xml and other related file
          but no buildable contents.  This is used as a workhorse for other create-XXX-module
          macros that define which also copy files into appropriate locations         
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="create-empty-module-helper">
		<attribute name="module-id" />
		<attribute name="module-name" />
		<attribute name="module-type" />
		<attribute name="module-packaging" default="jar" />
		<attribute name="pom-template" default="${template.dir}/@{module-type}-pom.tmpl" />
		<attribute name="parent-module-id" default="ROOT" />
		<element name="contents" optional="true" implicit="yes"/>
		<sequential>
			<!-- set up properfies for the module that can be used to set up dependeices in other modules -->
			<property name="@{module-id}-parent" value="@{" />
			<property name="@{module-id}-groupId" value="${@{parent-module-id}-groupId}"/>
			<property name="@{module-id}-artifactId" value="${module.prefix}@{module-id}"/>
			<property name="@{module-id}-version" value="${@{parent-module-id}-version}"/>
			<property name="@{module-id}-basedir" value="${@{parent-module-id}-basedir}/@{module-id}"/>
			
			<push-module module-id="@{module-id}"/>

			<!-- initial the sub modules file for this module -->
			<delete quiet="true" file="modules.@{module-id}" />
			<touch file="modules.@{module-id}"/>

			<!-- initial the dependencies file for this module -->
			<delete quiet="true" file="dependencies.@{module-id}" />
			<touch file="dependencies.@{module-id}" />

			<!-- add the new module to top level project -->
			<module-helper module-id="@{module-id}" parent-module-id="@{parent-module-id}" />

			<!-- process the contents of the module -->
			<contents />
			
			<create-parent-section property="@{module-id}-parent-section" parent-module-id="@{parent-module-id}" />

			<!-- create the pom.xml file for this module -->
			<!-- first load the dependencies we just created -->
			<loadfile property="dependencies-@{module-id}" srcfile="dependencies.@{module-id}" />

			<!-- now load the submodules for this modules -->
			<loadfile property="modules-@{module-id}" srcfile="modules.@{module-id}" />

			<!-- now copy the pom.xml template to the module dir substiting as necessary -->
			<copy file="@{pom-template}" tofile="${@{module-id}-basedir}/pom.xml">
				<filterchain>
					<replacetokens>
						<token key="module.parent" value="${@{module-id}-parent-section}" />
						<token key="module.artifactId" value="${@{module-id}-artifactId}" />
						<token key="module.name" value="@{module-name}" />
						<token key="module.packaging" value="@{module-packaging}"/>
						<token key="module.dependencies" value="${dependencies-@{module-id}}" />
						<token key="module.modules" value="${modules-@{module-id}}" />
					</replacetokens>
					<tokenfilter>
						<replacestring from="$${dependencies-@{module-id}}" to="" />
						<replacestring from="$${modules-@{module-id}}" to="" />
					</tokenfilter>
				</filterchain>
			</copy>
			<delete file="dependencies.@{module-id}" />
			<delete file="modules.@{module-id}" />

			<!-- now copy any custom resources to the module dir  -->
			<copy failonerror="false" verbose="false" todir="${@{module-id}-basedir}">
				<fileset dir="${module.resources.dir}/@{module-id}">
				</fileset>
			</copy>
			
			<pop-module/>
		</sequential>
	</macrodef>



	<macrodef name="simple-jar-module" description="define a simple jar based module">
		<attribute name="module-id" />
		<attribute name="module-name" />
		<attribute name="src-dir" />
		<element name="contents" implicit="yes" optional="yes" />
		<sequential>
			<module module-id="@{module-id}" module-type="java" module-name="@{module-name}" module-packaging="jar">
				<sources source-type="java">
					<fileset dir="@{src-dir}">
						<include name="**/*.java" />
						<exclude name="**/*Test*.java" />
					</fileset>
				</sources>
				<sources source-type="test">
					<fileset dir="@{src-dir}">
						<include name="**/*Test*.java" />
					</fileset>
				</sources>
				<dependencies>
					<contents />
				</dependencies>
			</module>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: module-helper          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="module-helper">
		<attribute name="module-id" />
		<attribute name="parent-module-id" default="ROOT" />
		<sequential>
			<concat destfile="modules.@{parent-module-id}" append="true">
				<filelist dir="${basedir}" files="${template.dir}/module.tmpl" />
				<filterchain>
					<replacetokens>
						<token key="module.id" value="@{module-id}" />
					</replacetokens>
				</filterchain>
			</concat>
		</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: create-toplevel-project          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="toplevel-project">
    		<element name="submodules" implicit="true"/>
        <sequential>
        		<module-stack-init/>
			<create-empty-module-helper module-id="ROOT" module-name="OpenNMS" module-type="toplevel" module-packaging="pom" parent-module-id="SUPER">
				<submodules/>
			</create-empty-module-helper>
        		<delete quiet="true" file="modules.SUPER"/>
        </sequential>
    </macrodef>

	<fileset dir="${basedir}" id="empty.set">
		<filename name="nomatch" />
	</fileset>

	<!-- - - - - - - - - - - - - - - - - - 
          target: modules                      
         - - - - - - - - - - - - - - - - - -->
	<target name="modules">
		<toplevel-project>
		
			<!-- core module -->
			<simple-jar-module module-id="core" module-name="OpenNMS Core Utilities" src-dir="${opennms.dir}/src/core" />
		
			<!-- joesnmp module -->
			<simple-jar-module module-id="joesnmp" module-name="OpenNMS JoeSNMP library" src-dir="${opennms.dir}/src/joesnmp" />
		
			<!-- install module -->
			<simple-jar-module module-id="install" module-name="OpenNMS Installation Utilities" src-dir="${opennms.dir}/src/install" />
		
			<!-- config-util - this module has the ConfigFileConstants which is used in many places -->
			<module module-id="config-utils" module-type="java" module-name="OpenNMS Config Utilities">
				<sources source-type="java">
					<fileset dir="${opennms.dir}/src/services">
						<include name="org/opennms/netmgt/ConfigFileConstants.java" />
					</fileset>
				</sources>
				<dependencies>
					<module-dependency id="core" />
				</dependencies>
			</module>
			
			<!-- the db module - this has the DatabaseConnectionFactory -->
			<module module-id="db" module-type="java" module-name="OpenNMS DB Access">
				<sources source-type="java">
					<fileset dir="${opennms.dir}/src/services">
						<include name="org/opennms/netmgt/config/DatabaseConnectionFactory.java" />
						<include name="org/opennms/netmgt/config/DbConnectionFactory.java" />
					</fileset>
				</sources>
				<dependencies>
					<module-dependency id="core" />
					<module-dependency id="config-utils" />
					<dependency groupId="castor" artifactId="castor" version="0.9.7" />
				</dependencies>
			</module>
			
			<!-- the filtering module - this parse the filter rules in package and converts to SQL
			     based on database-schema.xml -->
			<module module-id="filter" module-type="sablecc" module-name="OpenNMS Service Filtering">
				<sources source-type="java">
					<fileset dir="${opennms.dir}/src/services">
						<include name="org/opennms/netmgt/config/DatabaseSchemaConfigFactory.java" />
						<include name="org/opennms/netmgt/filter/*.java" />
						<exclude name="org/opennms/netmgt/filter/*Test*.java" />
					</fileset>
				</sources>
				<sources source-type="castor">
					<fileset dir="${opennms.dir}/src/services/org/opennms/netmgt/config">
						<include name="database-schema.xsd" />
					</fileset>
					<fileset dir="${opennms.dir}/devlib">
						<include name="castorbuilder.properties"/>
					</fileset>
				</sources>
				<sources source-type="sablecc">
					<fileset dir="${opennms.dir}/src/services/org/opennms/netmgt/filter">
						<include name="filter.grammar"/>
					</fileset>
				</sources>
				<dependencies>
					<module-dependency id="core" />
					<module-dependency id="db" />
					<dependency groupId="castor" artifactId="castor" version="0.9.7" />
				</dependencies>
			</module>
			
			<module module-id="icmp" module-type="composite" module-name="OpenNMS ICMP Library">
					<!-- the icmp module.. has the java code for the icmp lib -->
					<module module-id="icmp-jar" module-name="OpenNMS ICMP Interface" module-type="java" >
						<sources source-type="java">
							<fileset dir="${opennms.dir}/src/services">
								<include name="org/opennms/protocols/icmp/*.java" />
								<include name="org/opennms/protocols/ip/*.java" />
							</fileset>
						</sources>
						<dependencies/>
					</module>
				
					<!-- the jni code for icmp -->
					<module module-id="icmp-jni" module-type="native" module-name="OpenNMS ICMP JNI Library">
						<sources source-type="native">
							<fileset dir="${opennms.dir}/src/services/org/opennms/protocols/icmp">
								<include name="*.c" />
								<include name="*.h" />
							</fileset>
						</sources>
						<dependencies>
							<module-dependency id="icmp-jar" />
						</dependencies>
					</module>
			</module>
			<module module-id="rrd" module-type="composite" module-packaging="pom" module-name="OpenNMS RRD Module">
				<!-- rrd - a module used to define the highlevel interface for accessing RRD Data -->
				<module module-id="rrd-jar" module-type="java" module-name="OpenNMS RRD Interface">
					<sources source-type="java">
						<fileset dir="${opennms.dir}/src/services">
							<include name="org/opennms/netmgt/rrd/*.java" />
						</fileset>
					</sources>
					<dependencies>
						<module-dependency id="core" />
						<module-dependency id="config-utils"  />
					</dependencies>
				</module>
			
				<!-- an implementation of the rrd interfaces using the pure java JRobin library -->
				<module module-id="rrd-jrobin" module-type="java" module-name="OpenNMS JRobin RRD Implementation">
					<sources source-type="java">
						<fileset dir="${opennms.dir}/src/services">
							<include name="org/opennms/netmgt/rrd/jrobin/*.java" />
						</fileset>
					</sources>
					<dependencies>
						<module-dependency id="rrd-jar" />
						<dependency groupId="jrobin" artifactId="jrobin" version="1.4.0" />
					</dependencies>
				</module>
			
				<module module-id="rrd-rrdtool" module-type="composite" module-packaging="pom" module-name="OpenNMS RRDTool RRD Implementation">
				<!-- an implementation of the rrd interfaces using the a jni layer to rrdtool --> 
					<module module-id="rrdtool-java" module-type="java" module-name="OpenNMS RRDTool RRD Interface">
						<sources source-type="java">
							<fileset dir="${opennms.dir}/src/services">
								<include name="org/opennms/netmgt/rrd/rrdtool/*.java" />
							</fileset>
						</sources>
						<dependencies>
							<module-dependency id="rrd-jar" />
						</dependencies>
					</module>
			
					<!-- rrdtool-jni a JNI layer to accessing rrdtool -->
					<module module-id="rrdtool-jni" module-type="native" module-name="OpenNMS RRDTool JNI Library">
						<sources source-type="native">
							<fileset dir="${opennms.dir}/src/services/org/opennms/netmgt/rrd/rrdtool">
								<include name="*.c" />
								<include name="*.h" />
							</fileset>
						</sources>
						<dependencies>
							<module-dependency id="rrdtool-java" />
						</dependencies>
					</module>
				</module>
			</module>
			
			<!-- posgresql iplike function module -->
			<module module-id="iplike" module-type="native" module-name="OpenNMS iplike Stored Procedure for PostgreSQL">
				<sources source-type="native">
					<fileset dir="${opennms.dir}/src/postgresql">
						<include name="*.c" />
					</fileset>
				</sources>
				<dependencies/>
			</module>
			<!-- report code 
			<simple-jar-module module-id="reporting" module-name="OpenNMS Reporting" src-dir="${opennms.dir}/src/report">
				<module-dependency id="core"/>
			</simple-jar-module>
			-->
			
			<dependencies>
				<dependency groupid="log4j" artifactid="log4j" version="1.2.7" />
				<dependency groupid="junit" artifactid="junit" version="3.8.1" />
			</dependencies>
		</toplevel-project>
	</target>

</project>

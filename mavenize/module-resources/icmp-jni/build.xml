<?xml version="1.0"?>
 
<project name="opennms" default="jicmp.compile" basedir=".">
  <description>
Build file for OpenNMS.

OpenNMS is a network monitoring system implemented in Java.
For more information consult the README file included in
your distribution.
  </description>
	
  <property name="build.dir" value="target"/>
  <property name="build.jicmp.dir" value="${build.dir}/jicmp"/>
 
  <!-- versioning options -->
  <property name="product.version" value="1.3.0"/>
  <property name="product.release" value="0"/>
  <property name="product.snapshot" value="true"/>
  <property name="product.fullversion"
	    value="${product.version}-${product.release}"/>

  <property name="services.source.dir" value="${source.dir}/services"/>

  <!-- test results directory -->
  <property name="test.xml.dir" value="${build.dir}/test-results" />
  <property name="mock.logLevel" value="WARN" />
  <property name="mock.debug" value="false" />
  <property name="mock.rundbtests" value="false" />

  <!-- docs source directory -->
  <property name="docs.source.dir" value="${basedir}/docs"/>

  <taskdef resource="cpptasks.tasks">
  </taskdef>

  <taskdef resource="cpptasks.types">
  </taskdef>

<!--
  <taskdef resource="net/sf/antcontrib/antlib.xml">
  </taskdef>
-->

    <filter token="build.soext" value="${build.soext}"/>

<target name="prep"/>

 <target name="platform.check" depends="platform.init, platform.darwin,
                                         platform.freebsd, platform.linux,
                                         platform.sun, platform.default"/>


 <target name="platform.init">
    <condition property="platform.darwin">
      <os name="Mac OS X"/>
    </condition>
    <condition property="platform.freebsd">
      <os name="FreeBSD"/>
    </condition>
    <condition property="platform.linux">
      <os name="Linux"/>
    </condition>
    <condition property="platform.sun">
      <os name="SunOS"/>
    </condition>
  </target>



  <target name="platform.darwin" if="platform.darwin">
    <property name="build.platform.define" value="__DARWIN__"/>
    <property name="build.soext" value="dylib"/>
    <property name="build.jniext" value="jnilib"/>
    <property name="build.java.jnimd.dir" value=""/>
  </target>

  <target name="platform.freebsd" if="platform.freebsd">
    <property name="build.platform.define" value="__FreeBSD__"/>
    <property name="build.soext" value="so"/>
    <property name="build.jniext" value="so"/>
    <property name="build.java.jnimd.dir" value="/freebsd"/>
  </target>

  <target name="platform.linux" if="platform.linux">
    <property name="build.platform.define" value="__LINUX__"/>
    <property name="build.soext" value="so"/>
    <property name="build.jniext" value="so"/>
    <property name="build.java.jnimd.dir" value="/linux"/>
  </target>

  <target name="platform.sun" if="platform.sun">
    <property name="build.platform.define" value="__SOLARIS__"/>
    <property name="build.soext" value="so"/>
    <property name="build.jniext" value="so"/>
    <property name="build.java.jnimd.dir" value="/solaris"/>
    <property name="build.jrrd.linker.arg" value="-R${build.rrdtool.lib.dir}"/>
  </target>

  <target name="platform.default" unless="build.platform.define">
    <fail>
      Your operating system is not supported by the build system.  See the
      platform.* targets in the build.xml file for details on supported
      platforms.  You can try to work around this error by modifying an
      existing platform or creating your own (and don't forget to add it
      to the depends list in the platform.check target).
    </fail>
  </target>

  <target name="java.check">
    <condition property="java.versionokay">
    	  <or>
      <contains string="${java.vm.version}" substring="1.4."/>
    	  <contains string="${java.vm.version}" substring="1.5."/>
    	  </or>
    </condition>

    <fail unless="java.versionokay">
      Your Java version (${java.vm.version}) is not supported.  The
      build system is currently designed and tested to work with Java
      versions 1.4 and 1.5.  You can try to work around this error by
      modifying the java.check target in the build.xml file.
    </fail>
  </target>

  <target name="compile.check" depends="prep">
    <condition property="compile.check.postgresql.include">
      <available file="${build.postgresql.include.dir}/postgres.h"/>
    </condition>
   
    <fail unless="compile.check.postgresql.include">
      Could not find postgres.h include file in ${build.postgresql.include.dir}.
      Please make sure that you have the PostgreSQL development files installed
      or, if they are installed in a non-standard location, you may need to
      set the build.postgresql.include.dir property to the directory that
      contains postgres.h.  See README.build for details on setting properties.
    </fail>

    <condition property="compile.check.rrdtool.include">
      <available file="${build.rrdtool.include.dir}/rrd.h"/>
    </condition>
   
    <fail unless="compile.check.rrdtool.include">
      Could not find rrd.h include file in ${build.rrdtool.include.dir}.
      Please make sure that you have the rrdtool development files installed
      or, if they are installed in a non-standard location, you may need
      to set the build.rrdtool.include.dir property to the directory that
      contains rrd.h.  See README.build for details on setting properties.
    </fail>

    <condition property="compile.check.rrdtool.lib">
      <or>
	<available file="${build.rrdtool.lib.dir}/librrd.a"/>
	<available file="${build.rrdtool.lib.dir}/librrd.so"/>
      </or>
    </condition>
   
    <fail unless="compile.check.rrdtool.lib">
      Could not find librrd.a or librrd.so library in ${build.rrdtool.lib.dir}.
      Please make sure that you have the rrdtool development files installed
      or, if they are installed in a non-standard location, you may need
      to set the build.rrdtool.lib.dir property to the directory that
      contains librrd.a or librrd.so.  See README.build for details on setting
      properties.
    </fail>

    <available property="apple.apis.present" classname="com.apple.cocoa.foundation.NSArray" classpathref="libraries.java.path" />

  </target>
 
 <target name="info" depends="prep"
	 description="Show information about this build instance">
  <echo>
  === Java ===
  JVM Version                  = ${java.vm.vendor} ${java.vm.name} ${java.vm.version}
  Java Home                    = ${java.home}
  CLASSPATH                    = ${java.class.path}
  Ant Version                  = ${ant.version}
  Ant project name             = ${ant.project.name}
  Ant project base directory   = ${basedir}

  === System ===
  OS Name                      = ${os.name}
  OS Version                   = ${os.version}
  User                         = ${user.name}
  Home Directory               = ${user.home}
  OpenNMS Version              = ${product.fullversion.stamp}
  Compilation Defines          = ${build.platform.define}

  === Build/Install Tools ===
  PostgreSQL Include Arguments = ${build.postgresql.include.dir}
  RRDTool Include Arguments    = ${build.rrdtool.include.dir}
  RRDTool Library Arguments    = ${build.rrdtool.lib.dir}

  === Build Directories ===
  Build Working Directory      = ${build.dir}
  Class Working Directory      = ${build.classes.dir}
  Release Tarball Directory    = ${build.release.dir}

  === Install Directories ===
  Installation Prefix          = ${install.prefix}
  Installation Directory       = ${install.dir}
  init.d Directory             = ${install.init.dir}
  PostgreSQL Library Directory = ${install.postgresql.dir}
  Shared Files Directory       = ${install.share.dir}
  Servlet Directory            = ${install.servlet.dir}

  === RPM Details ===
  RPM Platform                 = ${rpm.platform}
  RPM Install Directory        = ${rpm.install.dir}
  </echo>
 </target>
 
 <!-- USAGE targets -->
 <target name="usage" description="How to use this build file">
  <java fork="true" dir="${basedir}" jar="${ant.library.dir}/ant-launcher.jar">
    <arg value="-projecthelp"/>
  </java>
 </target>

 <!-- "meta" targets -->
 <target name="check" depends="java.check, platform.check, compile.check"
	  description="check prerequisites for build"/>


  <target name="jicmp.compile" depends="prep, platform.check">
    <mkdir dir="${build.jicmp.dir}"/>
    <javah class="org.opennms.protocols.icmp.IcmpSocket"
           outputFile="${build.jicmp.dir}/IcmpSocket.h">
                 <classpath refid="maven.dependency.classpath"/>
    </javah>
    <copy todir="${build.jicmp.dir}">
      <fileset dir="src/main/native">
        <include name="IcmpSocket.c"/>
        <include name="byteswap.h"/>
      </fileset>
    </copy>
    <cc debug="true" link="shared"
        objdir="${build.jicmp.dir}"
	outfile="${build.jicmp.dir}/jicmp-build"
	outputfileproperty="build.jicmp.output.lib">
      <compiler name="gcc">
	 <compilerarg value="-D${build.platform.define}"/>
      </compiler>
      <linker name="gcc"/>
      <fileset dir="${build.jicmp.dir}" includes="IcmpSocket.c"/>
      <includepath path="${java.home}/include"/> 
      <includepath path="${java.home}/include${build.java.jnimd.dir}"/>
      <!-- XXX hack -->
      <includepath path="${java.home}/../include"/>
      <includepath path="${java.home}/../include${build.java.jnimd.dir}"/>
    </cc>
    <copy file="${build.jicmp.output.lib}"
          tofile="${build.jicmp.dir}/libjicmp.${build.jniext}"/>
  </target>

  <target name="jrrd.compile" depends="prep">
    <mkdir dir="${build.jrrd.dir}"/>
    <javah class="org.opennms.netmgt.rrd.rrdtool.Interface"
	   classpath="${build.classes.dir}"
           outputFile="${build.jrrd.dir}/rrd_jinterface.h"/>
    <copy todir="${build.jrrd.dir}">
      <fileset dir="${services.source.dir}/org/opennms/netmgt/rrd">
        <include name="rrd_jinterface.c"/>
      </fileset>
    </copy>
    <cc debug="true" link="shared"
        objdir="${build.jrrd.dir}"
	outfile="${build.jrrd.dir}/jrrd-build"
	outputfileproperty="build.jrrd.output.lib">
      <compiler name="gcc">
        <compilerarg value="-D${build.platform.define}"/>
      </compiler>
      <linker name="gcc">
	<linkerarg value="${build.jrrd.linker.arg}"
		   if="build.jrrd.linker.arg"/>
      </linker>
      <fileset dir="${build.jrrd.dir}" includes="rrd_jinterface.c"/>
      <libset dir="${build.rrdtool.lib.dir}" libs="rrd"/>
      <includepath path="${java.home}/include"/>
      <includepath path="${java.home}/include${build.java.jnimd.dir}"/>
      <!-- XXX hack -->
      <includepath path="${java.home}/../include"/>
      <includepath path="${java.home}/../include${build.java.jnimd.dir}"/>
      <includepath path="${build.rrdtool.include.dir}"/>
    </cc>
    <copy file="${build.jrrd.output.lib}"
          tofile="${build.jrrd.dir}/libjrrd.${build.jniext}"/>
  </target>

  <target name="postgresql.compile" depends="prep">
    <mkdir dir="${build.postgresql.dir}"/>
    <copy todir="${build.postgresql.dir}">
      <fileset dir="${postgresql.source.dir}">
        <include name="iplike.c"/>
      </fileset>
    </copy>
    <cc debug="true" link="plugin"
        objdir="${build.postgresql.dir}"
	outfile="${build.postgresql.dir}/iplike-build"
	outputfileproperty="build.postgresql.output.lib">
      <compiler name="gcc">
      </compiler>
      <fileset dir="${build.postgresql.dir}" includes="iplike.c"/>
      <includepath path="${build.postgresql.include.dir}"/>
    </cc>
    <copy file="${build.postgresql.output.lib}"
          tofile="${build.postgresql.dir}/iplike.${build.soext}"/>
  </target>

</project>

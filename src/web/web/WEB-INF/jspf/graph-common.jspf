<%@page import="java.util.Date,
		java.util.Calendar,
		org.opennms.web.performance.PerformanceModel,
            	org.opennms.netmgt.utils.IfLabel,
		java.sql.SQLException
	"
%>

<%!

    public String encodeRRDNamesAsParmString(String[] rrds) {
        if (rrds == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        String parmString = "";

        if(rrds.length > 0) {
            StringBuffer buffer = new StringBuffer("rrd=");
            buffer.append(java.net.URLEncoder.encode(rrds[0]));

            for(int i=1; i < rrds.length; i++ ) {
                buffer.append("&rrd=");
                buffer.append(java.net.URLEncoder.encode(rrds[i]));
            }

            parmString = buffer.toString();
        }

        return parmString;
    }
 

    /** intf can be null */           
    public String[] getRRDNames(int nodeId, String intf, PrefabGraph graph) {
        if (graph == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }            
    
        String[] columns = graph.getColumns();
        String[] rrds = new String[columns.length];
         
        for (int i=0; i < columns.length; i++) {
            StringBuffer buffer = new StringBuffer();

	    if (nodeId >= 0) {
		buffer.append(nodeId);            
		buffer.append(File.separator);
	    }

	    boolean addInterface = false;
	    if (intf != null) {
		if (nodeId < 0) {
		    // Response time graph, it's always interface specific
		    addInterface = true;
		} else if (PerformanceModel.INTERFACE_GRAPH_TYPE.equals(graph.getType())) {
		    // Performance graph where type == interface
		    addInterface = true;
		}
	    
		if (addInterface) {
		    buffer.append(intf);
		    buffer.append(File.separator);
		}
	    }

            
            buffer.append(columns[i]);
            buffer.append(org.opennms.netmgt.utils.RrdFileConstants.RRD_SUFFIX);            

            rrds[i] = buffer.toString();
        }   

        return rrds;             
    }

    public String[] getRRDNames(String dom, String intf, PrefabGraph graph) {
        if(graph == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        String[] columns = graph.getColumns();
        String[] rrds = new String[columns.length];

        for(int i=0; i < columns.length; i++ ) {
            StringBuffer buffer = new StringBuffer();
            buffer.append(dom);            
            buffer.append(File.separator);
            buffer.append(intf);
            buffer.append(File.separator);
            buffer.append(columns[i]);
            buffer.append(org.opennms.netmgt.utils.RrdFileConstants.RRD_SUFFIX);

            rrds[i] = buffer.toString();
        }

        return rrds;
    }

    /**
     * currently only know how to handle ifSpeed external value;
     * intf can be null
     */
    public String encodeExternalValuesAsParmString(int nodeId, String intf,
						   PrefabGraph graph)
		throws SQLException {
        if (graph == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");      
        }
        
        String parmString = "";        
        String[] externalValues = graph.getExternalValues();
        
        if (externalValues != null && externalValues.length > 0) {
            StringBuffer buffer = new StringBuffer();
            
            for(int i=0; i < externalValues.length; i++) {
                if("ifSpeed".equals(externalValues[i])) {
                    String speed = this.getIfSpeed(nodeId, intf);
                    
                    if(speed != null) {
                        buffer.append(externalValues[i]);
                        buffer.append("=");                        
                        buffer.append(speed);   
                        buffer.append("&");                        
                    }
                }
                else {
                    throw new IllegalStateException("Unsupported external value name: " + externalValues[i]);
                }                
            }
            
            parmString = buffer.toString();
        }        
        
        return parmString;
    }

    
    public String getIfSpeed(int nodeId, String intf) throws SQLException {
        if (intf == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        String speed = null;
        
        try {
            Map intfInfo = IfLabel.getInterfaceInfoFromIfLabel(nodeId, intf);

            // if the extended information was found correctly
            if (intfInfo != null) {
                speed = (String)intfInfo.get("snmpifspeed");
            }
        } catch (SQLException e) {
            log("SQLException while trying to fetch extended interface info", e);
        }

        return speed;
    }


    public class TimePeriod {
    	   private String m_id = null;
	   private String m_name = null;
	   private int m_offsetField = Calendar.DATE;
	   private int m_offsetAmount = -1;

	   public TimePeriod() {
	   }

	   public TimePeriod(String id, String name, int offsetField,
	   	  	     int offsetAmount) {
	   	  m_id = id;
		  m_name = name;
		  m_offsetField = offsetField;
		  m_offsetAmount = offsetAmount;
	   }

	   public String getId() {
	   	  return m_id;
	   }

	   public void setId(String id) {
	   	  m_id = id;
	   }

	   public String getName() {
	   	  return m_name;
	   }

	   public void setName(String name) {
	   	  m_name = name;
	   }

	   public int getOffsetField() {
	   	  return m_offsetField;
	   }

	   public void setOffsetField(int offsetField) {
	   	  m_offsetField = offsetField;
	   }

	   public int getOffsetAmount() {
	   	  return m_offsetAmount;
	   }

	   public void setOffsetAmount(int offsetAmount) {
	   	  m_offsetAmount = offsetAmount;
	   }
    }

    private TimePeriod[] m_periods;

    private void initPeriods() {
	m_periods = new TimePeriod[] {
	    new TimePeriod("lastday", "Last Day", Calendar.DATE, -1),
            new TimePeriod("lastweek", "Last Week", Calendar.DATE, -7),
            new TimePeriod("lastmonth", "Last Month", Calendar.DATE, -31),
            new TimePeriod("lastyear", "Last Year", Calendar.DATE, -366)
        };
    }

    private void printRelativeTimeForm(JspWriter out, String relativetime,
    	 		       int nodeId, String intf, String[] reports,
			       String URL) throws IOException {
   	if (relativetime == null) {
            relativetime = "unknown";
        }

        String reportList = "";
	for (int i = 0; i < reports.length; i++) {
	    reportList = reportList + "&reports=" + reports[i];
	}

	out.println("    <div align=\"center\">");
	out.println("      <form name=\"reltimeform\" action=\"\">");
	out.println("        <table class=\"periods\">");
	out.println("	       <tbody>");

	out.println("	         <tr>");
	for (int i = 0; i < m_periods.length; i++) {
	    out.println("	           <td>" + m_periods[i].getName() +
	    		"</td>");
	}
	out.println("	         </tr>");

	out.println("	         <tr>");
	for (int i = 0; i < m_periods.length; i++) {
	    out.println("	           <td>" +
	    	        "<input type=\"radio\" name=\"rtstatus\"" +
			(relativetime.equals(m_periods[i].getId()) ?
			    " checked=\"checked\"" : "") +
			" onclick=\"top.location = " +
			"'" + URL + "?" +
			"relativetime=" + m_periods[i].getId() +
			"&intf=" + intf +
			"&node=" + nodeId +
			reportList + "'\"/></td>");
	}
	out.println("	         </tr>");
	out.println("	       </tbody>");
	out.println("        </table>");
	out.println("      </form>");
	out.println("    </div>");
    }

%>

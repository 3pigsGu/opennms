<?xml version="1.0"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://xmlns.opennms.org/xsd/config/inventory">
	<element name="inventory-configuration">
		<complexType>
			<sequence>
				<!--- package encapsulating addresses, services to be polled for these addresses etc. -->
				<element ref="package" minOccurs="1" maxOccurs="unbounded"/>
				<!--- service monitors -->
				<element ref="monitor" minOccurs="1" maxOccurs="unbounded"/>
				<element ref="visualization" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>
			<!--- the max number of threads used for polling -->
			<attribute name="threads" type="int" use="required"/>
			<!--- interval for refreshing pollable group list -->
			<attribute name="refreshListTime" type="int" use="required"/>
			<!--- set the inventory to send all Download-Success events.
				if his value is false, only first Download-Success event is sent.
			-->
			<attribute name="sendEachSuccessEvent" type="boolean" use="required"/>
			<!--- Set the path to save node configurations -->
			<attribute name="fileRepository" type="String" use="required"/>
		</complexType>
	</element>
	<!--- monitor for a group -->
	<element name="monitor">
		<complexType>
			<!--- the parameters for do the inventory -->
			<sequence>
				<element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<!--- the group name -->
			<attribute name="group" type="string" use="required"/>
			<attribute name="required-service" type="string" use="required"/>
			<attribute name="class-name" type="string" use="required"/>
			<!--- the attribute to define the inventory type (hardware, software, etc.) -->
			<attribute name="inventory-type" type="string" use="required"/>
			<!--- visualization refers to visualization-type -->
			<attribute name="visualization" type="string" use="required"/>
		</complexType>
	</element>
	<element name="visualization">
		<complexType>
			<!--- define the class to use for visualization -->
			<attribute name="class-name" type="string" use="required"/>
			<!--- visualization type (es. tree, text ecc.) -->
			<attribute name="type" type="string" use="required"/>
		</complexType>
	</element>
	<!--- package encapsulating addresses, services to be polled for these addresses etc. -->
	<element name="package">
		<complexType>
			<sequence>
				<!--- a rule which adresses belonging to this package must pass - 
				      this package is applied only to addresses that pass this filter
				-->
				<element ref="filter" minOccurs="1" maxOccurs="1"/>
				<!--- adresseses in this package -->
				<element name="specific" type="string" minOccurs="0" maxOccurs="unbounded"/>
				<!--- range of adresses in this package -->
				<element ref="include-range" minOccurs="0" maxOccurs="unbounded"/>
				<!--- range of adresses to be excluded from this package -->
				<element ref="exclude-range" minOccurs="0" maxOccurs="unbounded"/>
				<!--- a file URL holding specific addresses to be polled. Each line in
				      the URL file can be one of-
					<IP><space>#<comments>
					or
					<IP>
					or
					#<comments>
				       Lines starting with a '#' are ignored and so are characters after
				       a '<space>#' in a line.
				-->
				<element name="include-url" type="string" minOccurs="0" maxOccurs="unbounded"/>
				<element ref="group" minOccurs="1" maxOccurs="unbounded"/>
				<!--- downtime model that determines rate at which addresses are to be
				      polled when they remain down for extended periods
				-->
				<element ref="downtime" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>
			<!--- the name or identifier for this package -->
			<attribute name="name" type="string" use="required"/>
		</complexType>
	</element>
	<!--- a rule which adresses belonging to this package must pass - 
	      this package is applied only to addresses that pass this filter
	-->
	<element name="filter">
		<complexType>
			<simpleContent>
				<extension base="string"/>
			</simpleContent>
		</complexType>
	</element>
	<!--- range of adresses to be included in this package -->
	<element name="include-range">
		<complexType>
			<!--- starting address of the range -->
			<attribute name="begin" type="string" use="required"/>
			<!--- ending address of the range -->
			<attribute name="end" type="string" use="required"/>
		</complexType>
	</element>
	<!--- range of adresses to be excluded from this package -->
	<element name="exclude-range">
		<complexType>
			<!--- starting address of the range -->
			<attribute name="begin" type="string" use="required"/>
			<!--- ending address of the range -->
			<attribute name="end" type="string" use="required"/>
		</complexType>
	</element>
	<!--- service to be polled for addresses in this package -->
	<element name="group">
		<complexType>
			<!--- parameters to be used for polling this service -->
			<sequence>
				<element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<!--- the service name -->
			<attribute name="name" type="string" use="required"/>
			<!--- the interval at which the service is to be polled -->
			<attribute name="interval" type="long" use="required"/>
			<!--- set the service to send/not-send events for this group-->
			<attribute name="send-events" type="boolean" use="required"/>
			<!--- set the service to compare/not compare old and new inventory for this group-->
			<attribute name="compare" type="boolean" use="required"/>
		</complexType>
	</element>
	<!--- downtime model that determines rates at which addresses are to be
	      polled when they remain down for extended periods - usually are
	      polled at lower rates when down until they reach a certain downtime
	      at which they are marked 'deleted'
	-->
	<element name="downtime">
		<complexType>
			<!--- start of the interval -->
			<attribute name="begin" type="long" use="required"/>
			<!--- end of the interval -->
			<attribute name="end" type="long" use="optional"/>
			<!--- attribute that determines if service is to be deleted when
			      down continously until the start time
			-->
			<attribute name="delete" type="string" use="optional">
				<simpleType>
					<restriction base="string">
						<pattern value="(yes|true)"/>
					</restriction>
				</simpleType>
			</attribute>
			<!--- interval at which service is to be polled between the specified
			      start and end when service has been continously down
			 -->
			<attribute name="interval" type="long" use="optional"/>
		</complexType>
	</element>
	<!--- parameters to be used for polling this service -  for eg. for polling HTTP,
	      the URL to hit is configurable via a parameter. Parameters are specfic to
	      the service monitor
	-->
	<element name="parameter">
		<complexType>
			<attribute name="key" type="string" use="required"/>
			<attribute name="value" type="string" use="required"/>
		</complexType>
	</element>

</schema>

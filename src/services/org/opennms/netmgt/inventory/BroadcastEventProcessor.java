//
// Copyright (C) 1999-2001 Oculan Corp.  All rights reserved.
// Copyright (C) 2001 Oculan Corp.  All rights reserved.
//  
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software 
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// 
// For more information contact: 
//	Brian Weaver	<weave@opennms.org>
//	http://www.opennms.org/
//
// Tab Size = 8
//
package org.opennms.netmgt.inventory;


import java.util.List;
import java.util.ArrayList;



import org.apache.log4j.Category;
import org.opennms.core.utils.ThreadCategory;



import org.opennms.netmgt.ExtendedEventConstants;
import org.opennms.netmgt.eventd.EventListener;
import org.opennms.netmgt.eventd.EventIpcManagerFactory;
import org.opennms.netmgt.scheduler.Scheduler;

// These generated by castor
//

import org.opennms.netmgt.xml.event.Event;


/**
 *
 * @author <a href="mailto:weave@opennms.org">Brian Weaver</a>
 * @author <a href="http://www.opennms.org/">OpenNMS</a>
 */
final class BroadcastEventProcessor
	implements EventListener
{
	/**
	 * The scheduler assocated with this reciever
	 */
	private Scheduler	m_scheduler;

	/**
	 * List of PollableGroup objects.
     */
	private	List		m_pollableGroups;
	
	/**
	 * Create message selector to set to the subscription
	 */
	private void createMessageSelectorAndSubscribe()
	{
		// Create the selector for the ueis this Group is interested in
		//
		List ueiList = new ArrayList();
		//		Add Inventory events to the list
		//
	
		ueiList.add(ExtendedEventConstants.INVENTORY_SUCCESS_EVENT_UEI);
		ueiList.add(ExtendedEventConstants.INVENTORY_FAILURE_EVENT_UEI);
		ueiList.add(ExtendedEventConstants.CONFIGURATION_CHANGED_EVENT_UEI);
			 // Subscribe to eventd
		
		EventIpcManagerFactory.init();
		EventIpcManagerFactory.getInstance().getManager().addEventListener(this, ueiList);
	}

	
	/**
	 * Constructor
	 *
	 * @param pollableGroups List of all the PollableGroup objects 
	 * 			  scheduled for inventory
	 */
	BroadcastEventProcessor(List pollableGroups)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		// Set the configuration for this event 
		// receiver.
		//
		m_scheduler= Inventory.getInstance().getScheduler();
		m_pollableGroups    = pollableGroups;

		// Create the message selector and subscribe to eventd
		createMessageSelectorAndSubscribe();
		if(log.isDebugEnabled())
			log.debug("Subscribed to eventd");

	}

	/**
	 * Unsubscribe from eventd
	 */
	public void close()
	{
		EventIpcManagerFactory.getInstance().getManager().removeEventListener(this);
	}

	/**
	 * Not implemented
	 *
	 * @param event	The event 
	 */
	public void onEvent(Event event)
	{
		

	} // end onEvent()

	/**
	 * Return an id for this event listener
	 */
	public String getName()
	{
		return "Inventory:BroadcastEventProcessor";
	}
} // end class

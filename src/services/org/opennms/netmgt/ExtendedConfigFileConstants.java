//
// Copyright (C) 1999-2001 Oculan Corp.  All rights reserved.
//  
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software 
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// 
// For more information contact: 
//	Brian Weaver	<weave@opennms.org>
//	http://www.opennms.org/
//
package org.opennms.netmgt;


import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;

import org.opennms.core.utils.ThreadCategory;
import org.apache.log4j.Category;

/**
 * This class holds all OpenNMS related config filenames
 *
 * @author <A HREF="http://www.opennms.org/">OpenNMS</A>
 */
public final class ExtendedConfigFileConstants
{
	private static final String[] FILE_ID_TO_NAME;

	/**
	 * The opennms inventory config file
	 */
	public static final int INVENTORY_CONFIG_FILE_NAME;
	public static final int ASSETLOCATION_CONF_FILE_NAME;
	public static final int LDAP_CONF_FILE_NAME;
	public static final int LINKD_CONF_FILE_NAME;
	public static final int MAP_CONF_FILE_NAME;
	public static final int APPLICATION_CONFIG_FILE_NAME;
	//
	// Initialize the class data. This section is used to initialize the 
	// integer constants to their final values and to build the array
	// of integer identifiers to file names.
	//
	static
	{
		// Initialize the constants
		//
		INVENTORY_CONFIG_FILE_NAME			= 0;
		ASSETLOCATION_CONF_FILE_NAME		= 1;
		LDAP_CONF_FILE_NAME		        	= 2;
		LINKD_CONF_FILE_NAME                = 3;
		MAP_CONF_FILE_NAME					= 4;	
		APPLICATION_CONFIG_FILE_NAME		= 5;
		// Allocate and build the mapping of identifiers to names
		//
		FILE_ID_TO_NAME = new String[6];

		FILE_ID_TO_NAME[INVENTORY_CONFIG_FILE_NAME] 		= "inventory-configuration.xml";
		FILE_ID_TO_NAME[ASSETLOCATION_CONF_FILE_NAME]		= "assetLocation.xml";
		FILE_ID_TO_NAME[LDAP_CONF_FILE_NAME]	    		= "ldap-config.xml";
		FILE_ID_TO_NAME[LINKD_CONF_FILE_NAME]	    		= "linkd-configuration.xml";
		FILE_ID_TO_NAME[MAP_CONF_FILE_NAME]					= "maps-configuration.xml";
		FILE_ID_TO_NAME[APPLICATION_CONFIG_FILE_NAME]		= "applications.xml";
	}

	/**
	 * Returns the base name of the identified file as defined by the
	 * passed integer value. This name has not yet been resolved and 
	 * is only the name of the file with no path location information
	 * prepended. If the fully qualified name of the file is needed then
	 * use {@link #getFile(int) getFile()} to returned the 
	 * {@link java.io.File File} object. The java File object can be queried
	 * to get more detailed information on the file.
	 *
	 * @param id 	The identifier of the desired file.
	 *
	 * @return The base name of the file that matches the identifier.
	 *
	 */
	public static final String getFileName(int id)
	{
		return FILE_ID_TO_NAME[id];
	}

	/**
	 * <p>Returns the java {@link java.io.File File} information for the 
	 * file identified by the passed integer identifier. If the file cannot
	 * be located by the search algorithm then an excption is generated.</p>
	 *
	 * <p>The file is looked for in the <em>etc</em> directory of the OpenNMS
	 * home location identified by the System property <em>opennms.home</em>.
	 * If the file is not found in the <em>etc</em> directory then an attempt
	 * is made to find it in the root OpenNMS directory. If it still cannot
	 * be found then a {@link java.io.FileNotFoundException FileNotFoundException}
	 * is generated by the method.</p>
	 *
	 * @param id	The identifer for the configuration file.
	 *
	 * @return The File handle to the passed identifier.
	 *
	 * @throws java.io.FileNotFoundException Thrown if the file cannot be located.
	 * @throws java.io.IOException	Thrown if an error occurs accessing the file system.
	 *
	 */
	public static final File getFile(int id)
		throws IOException
	{
		Category log = ThreadCategory.getInstance(ExtendedConfigFileConstants.class);

		// Recover the home directory from the system properties.
		//
		String home = getHome();

		// Check to make sure that the home directory exists
		//
		File fhome = new File(home);
		if(!fhome.exists())
		{
			log.warn("getFile: The specified home directory does not exist");
			throw new FileNotFoundException("The OpenNMS home directory \"" + home + "\" does not exist");
		}

		String rfile = getFileName(id);
		File frfile = new File(home + File.separator + "etc" + File.separator + rfile);
		if(!frfile.exists())
		{
			frfile = new File(home + File.separator + rfile);
			if(!frfile.exists())
			{
				throw new FileNotFoundException("The requested file could not be found");
			}
		}

		return frfile;
	}

	/**
	 * <p>Returns the java {@link java.io.File File} information for the 
	 * file identified by the passed base file name. If the file cannot
	 * be located by the search algorithm then an excption is generated.</p>
	 *
	 * <p>The file is looked for in the <em>etc</em> directory of the OpenNMS
	 * home location identified by the System property <em>opennms.home</em>.
	 * If the file is not found in the <em>etc</em> directory then an attempt
	 * is made to find it in the root OpenNMS directory. If it still cannot
	 * be found then a {@link java.io.FileNotFoundException FileNotFoundException}
	 * is generated by the method.</p>
	 *
	 * @param id	The base file name of the configuration file.
	 *
	 * @return The File handle to the named file.
	 *
	 * @throws java.io.FileNotFoundException Thrown if the file cannot be located.
	 * @throws java.io.IOException	Thrown if an error occurs accessing the file system.
	 *
	 */
	public static final File getConfigFileByName(String fname)
		throws IOException
	{
		Category log = ThreadCategory.getInstance(ExtendedConfigFileConstants.class);

		// Recover the home directory from the system properties.
		//
		String home = getHome();

		// Check to make sure that the home directory exists
		//
		File fhome = new File(home);
		if(!fhome.exists())
		{
			log.warn("getConfigFileByName: The specified home directory does not exist");
			throw new FileNotFoundException("The OpenNMS home directory \"" + home + "\" does not exist");
		}

		File frfile = new File(home + File.separator + "etc" + File.separator + fname);
		if(!frfile.exists())
		{
			frfile = new File(home + File.separator + fname);
			if(!frfile.exists())
			{
				throw new FileNotFoundException("The requested file could not be found");
			}
		}

		return frfile;
	}

	public static final String getHome()
	{
		String home = System.getProperty("opennms.home");
		if(home == null)
		{
			ThreadCategory.getInstance(ExtendedConfigFileConstants.class).warn("getConfigFileByName: The \"opennms.home\" property was not set, falling back to /opt/OpenNMS");
			home = File.separator + "opt" + File.separator + "OpenNMS";
		}
		// Remove the trailing slash if necessary
		//
		if(home.endsWith("/") || home.endsWith(File.separator))
			home = home.substring(0, home.length()-1);

		return home;
	}

	/**
	 * Method to return the string for the managed address include files for discovery, capsd and inventory.
	 * @return String, the file url for the include file
	 */
	 public static final String getIncludeFileString()
	 {
		return "file:" + getHome() + File.separator + "etc" + File.separator + "include";
	 }
	 
	 /**
	  * Method to return the string for path of the etc directory.
	  * @return String, the file url for the include file
	  */
	  public static final String getFilePathString()
	  {
		return getHome() + File.separator + "etc" + File.separator ;
	  }

	 /**
	  * 
	  */
	 public static final String getTimezoneFileDir()
	 {
		return File.separator + "usr" + File.separator + "share" + File.separator + "zoneinfo" + File.separator + "US";
	 }
	
}


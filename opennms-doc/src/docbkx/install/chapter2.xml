<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Preparing for install</title>

  <section>
    <title>Prerequisite Package: Java</title>

    <para>OpenNMS is written mainly in Java, although there are a few JNI
    calls to some C code in order to implement things such as ICMP. and so it
    follows that Java would need to be installed.</para>

    <para>As the current code has a small dependency on a Sun-only library
    ("com.sun.net.ssl.internal.www.protocol" in the HTTPS Monitor), it is
    recommended that Sun's SDK is used. It should be possible to use IBM's
    SDK, but you'll get an error in the logs when the poller starts.</para>

    <para>The instructions below are on using Sun's Java distribution, however
    a number of users have had success with the <ulink
    url="http://www.blackdown.org/">Blackdown</ulink> builds of Sun's
    Java.</para>

    <para>XXX Add something about 32-bit vs 64-bit for libjicmp and
    librrd.</para>

    <section>
      <title>Installing Java on Debian</title>

      <para>Note: At the moment OpenNMS does not have Debian packages, nor
      does it correctly run on Java 6 (just yet). You can install the Sun Java
      5 binary for linux and build OpenNMS on Debian just fine,
      however.</para>
    </section>

    <section>
      <title>Everything Else</title>

      <note>
        <para>It is important to install the JDK instead of the JRE, as Tomcat
        will need to compile Java code (which requires "javac" in the
        JDK).</para>
      </note>

      <para>You will need to use Sun's Java 2 Platform, Standard Edition,
      version 5 (1.5) or later. You can <ulink
      url="http://java.sun.com/javase/downloads/index_jdk5.jsp">download
      it</ulink> from Sun's <ulink url="http://java.sun.com/">Java</ulink>
      website. Step through the licensing process and then download the proper
      version of Java for your operating system. If you will be using an
      RPM-based Linux package of OpenNMS, you will need to download the RPM
      package of Java, otherwise, you will want the "<code>.bin</code>" file.
      Install Java according to the instructions from Sun. Note that all
      64-bit versions of OpenNMS RPMs have been built against the 64-bit
      version of Java (available toward the bottom of that page).</para>
    </section>
  </section>

  <section>
    <title>Prerequisite Package: Tomcat5 (version 5.5 or greater)</title>

    <para><ulink
    url="http://jakarta.apache.org/tomcat/index.html">Tomcat</ulink> is part
    of the Jakarta project in Apache, and it is a Java servlet engine. What
    that means is that Tomcat is a web server that serves up HTML that is
    built from small Java programs called "servlets". Note that this is much
    different than Java "applets"--servlets are run on the server, not
    downloaded to the browser. Once a servlet is compiled, Tomcat will cache
    it, which means that the first visit to a particular page may be slow, but
    subsequent visits should be rather fast.</para>

    <section>
      <title>Installing Appropriate Tomcat5</title>

      <para>Some distributions are able to use the <ulink
      url="http://www.jpackage.org/">JPackage</ulink> project to download
      Tomcat5, but easy to install RPMs are hard to find. Usually, just <ulink
      url="http://tomcat.apache.org/download-55.cgi">downloading</ulink> the
      tarball and placing it on the OpenNMS server is enough. There is no
      longer a requirement for a Tomcat RPM in OpenNMS.</para>
    </section>

    <section>
      <title>Customizing Tomcat5</title>

      <para>It is recommended that you run Tomcat as "root" so that it has
      access to the files in the OpenNMS configuration and log directories.
      Usually, just setting JAVA_HOME to point to your Java 5 directory and
      running the startup scripts in the Tomcat bin directory is enough to get
      Tomcat running.</para>

      <para>If you choose not to set the user that runs Tomcat to
      <code>root</code>, you will need to make the following changes so that
      the Tomcat user can read and write the OpenNMS configuration files. This
      process adds the "<code>tomcat</code>" and "<code>root</code>" users to
      the "<code>tomcat5</code>" group, and then changes permissions so that
      the "<code>tomcat5</code>" group can write to the OpenNMS
      "<filename>etc</filename>" and "<filename>logs</filename>" directory.
      You have to do this <emphasis role="bold">after</emphasis> the OpenNMS
      software is installed.</para>

      <orderedlist>
        <listitem>
          <para>The "<code>tomcat</code>" user should have been created on
          installation of Tomcat--verify this by looking in
          <filename>/etc/passwd</filename>.</para>
        </listitem>

        <listitem>
          <para>Edit <filename>/etc/group</filename> and add
          "<code>tomcat</code>" and "<code>root</code>" as members of the
          "<code>tomcat4</code>" group. It should look something like:</para>

          <para><programlisting><code>tomcat5:x:91:tomcat,root</code></programlisting></para>
        </listitem>

        <listitem>
          <para>Locate the OpenNMS "<filename>etc</filename>" directory. It is
          usually in <filename>/opt/OpenNMS/etc</filename> or
          <filename>/etc/opennms</filename>. It will have a number of files
          with an "<filename>.xml</filename>" extension, such as
          <filename>capsd-configuration.xml</filename>. Run the
          commands:</para>

          <para><programlisting><computeroutput># </computeroutput><command>chgrp -R tomcat5 $OPENNMS_HOME/etc
</command><computeroutput># </computeroutput><command>chmod -R g+w $OPENNMS_HOME/etc</command></programlisting></para>

          <para>where <varname>$OPENNMS_HOME/etc</varname> is the OpenNMS
          "<filename>etc</filename>" directory.</para>
        </listitem>

        <listitem>
          <para>Locate the OpenNMS webapp logs directory.  This is usually
          <filename>/var/log/opennms/webapp</filename> or in
          <filename>logs/webapp</filename> under the OpenNMS home directory.
          Run the commands:</para>

          <para><programlisting><computeroutput># </computeroutput><command>chgrp -R tomcat5 /var/log/opennms/webapp
</command><computeroutput># </computeroutput><command>chmod -R g+w /var/log/opennms/webapp</command></programlisting></para>

          <para>where <varname>/var/log/opennms/webapp</varname> is the
          OpenNMS webapp logs directory.</para>
        </listitem>

        <listitem>
          <para>Locate the OpenNMS reports directory.  This is usually
          <filename>share/reports</filename> under the OpenNMS home directory.
          Run the commands:</para>

          <para><programlisting><computeroutput># </computeroutput><command>chgrp -R tomcat5 $OPENNMS_HOME/share/reports
</command><computeroutput># </computeroutput><command>chmod -R g+w $OPENNMS_HOME/share/reports/</command></programlisting></para>

          <para>where <varname>$OPENNMS_HOME/share/reports</varname> is the
          OpenNMS reports directory.</para>
        </listitem>
      </orderedlist>

      <para>Tomcat will start with just the first change, but without the
      second change you'll start seeing errors in the OpenNMS logs, and
      administration commands run in the web UI will fail because Tomcat
      cannot change the configuration files.</para>

      <para>One more change that needs to be made is to allow Tomcat to access
      more memory than the default. The easiest way to do this is via the
      <varname>CATALINA_OPTS</varname> environment variable. If the Tomcat
      software being used has a configuration file as above, it can be added
      to that file. Otherwise it is best just to add it to
      <filename>catalina.sh</filename>.</para>

      <para><programlisting>CATALINA_OPTS="-Xmx1024m"</programlisting></para>

      <para>The -Xmx option allows Tomcat to access up to 1GB of memory. Of
      course, the assumes that there is 1GB of available memory on the system.
      It will need to be tuned to the particular server in use.</para>
    </section>
  </section>

  <section>
    <title>Prerequisite Package: RRDtool</title>

    <para><ulink
    url="http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/">RRDtool</ulink>
    is the genesis of probably the first widely used open-source network
    management tool, <ulink
    url="http://people.ee.ethz.ch/~oetiker/webtools/mrtg/">MRTG</ulink>.</para>

    <para>RRDtool provides a "round robin" database that stores time-series
    data quickly and in a small amount of space. OpenNMS stores its
    performance-related data in RRD files created using RRDtool.</para>

    <para>We require no special configuration for using RRDtool. As long as it
    was installed as a package, the OpenNMS package should be able to find it
    and configure itself to use the proper commands. OpenNMS 1.3 and beyond
    require RRDtool 1.2.</para>

    <note>
      <para>OpenNMS can also use JRobin for storing and graphing of
      time-series data, however it is always built with RRDtool support. For
      the time being, you will still need to install RRDtool to build OpenNMS
      or to install an OpenNMS RPM package, even if you plan on using JRobin
      (see enhancement bug 1335). You can read more about JRobin in the
      release notes.</para>
    </note>
  </section>

  <section>
    <title>Prerequisite Package: PostgreSQL</title>

    <para>XXX add a comment about 32-bit vs. 64-bit stuff for the iplike.so
    module</para>

    <para><ulink url="http://www.postgresql.org/">PostgreSQL</ulink> (or
    "Postgres") is a relational database that OpenNMS uses to store
    information about devices on the network, as well as information about
    events, notifications and outages.</para>

    <para>When installing OpenNMS, two things must happen. First, OpenNMS has
    to be able to contact the database over TCP/IP (even on localhost) and
    second, the installation process must be able to create the
    database.</para>

    <para>OpenNMS requires version 7.4 or later of PostgreSQL.</para>

    <para>The minimum packages you will need to install should be:</para>

    <itemizedlist>
      <listitem>
        <para><filename>postgresql-server</filename></para>
      </listitem>
    </itemizedlist>

    <para>Note that Red Hat Enterprise Linux 3 and CentOS 3 call their
    PostgreSQL packages "rhdb" for the "Red Hat DataBase" and older releases
    of SuSE call their packages "postgres".</para>

    <para>Once you have installed Postgres, you will need to make two changes
    to Postgres configuration files: <filename>postgresql.conf</filename> and
    <filename>pg_hba.conf</filename>. These files are only created once
    Postgres has been started, so if your installation method for Postgres did
    not start the database, do so before continuing. Usually, startup scripts
    will be placed in <filename>/etc/init.d</filename>.</para>

    <para>Locate the Postgres "data" directory. Often this is
    /var/lib/pgsql/data. You should then find the two files we need to modify
    in that directory.</para>

    <section>
      <title>Customizing the <filename>postgresql.conf</filename> file</title>

      <para>This file controls some basic parameters of Postgres. We need to
      change three of these parameters.</para>

      <orderedlist>
        <listitem>
          <para>Find the line in the file that contains
          <varname>tcpip_socket</varname>. It needs to read (this can be
          ignored on PostgreSQL 8.0 and later as this is the default):</para>

          <para><programlisting>tcpip_socket = true</programlisting></para>

          <para>Make sure that there is no comment character ("#") in front of
          that line (or the other two that you change). This will enable
          OpenNMS to talk to the database.</para>
        </listitem>

        <listitem>
          <para>Find the line in the file that contains
          <varname>max_connections</varname>. It needs to read:</para>

          <para><programlisting>max_connections = 256</programlisting></para>
        </listitem>

        <listitem>
          <para>Find the line that contains <varname>shared_buffers</varname>.
          It needs to read:</para>

          <para><programlisting>shared_buffers = 1024</programlisting></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Customizing the <filename>pg_hba.conf</filename> file</title>

      <para>The <filename>pg_hba.conf</filename> file controls which machines
      and users can access the database on a given machine via TCP/IP.</para>

      <para>Since that is how OpenNMS accesses the database (via
      <code>localhost</code>) it is necessary to modify this file to allow
      OpenNMS to work. The easiest thing to do is to just allow anyone from
      the localhost to access the database (do not add the last line if your
      system does not support IPv6):</para>

      <para><programlisting># TYPE DATABASE USER IP-ADDRESS IP-MASK METHOD
local all all trust
host all all 127.0.0.1 255.255.255.255 trust
host all all ::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff trust</programlisting></para>

      <para>Make sure that no other lines are uncommented in this file.</para>

      <para>You will need to stop and restart Postgres after making these
      changes.</para>
    </section>

    <section>
      <title>Creating the PostgreSQL Database on Solaris</title>

      <para>You will need to create an <code>opennms</code> database.</para>

      <para>As the <code>postgres</code> user, go to the
      <filename>/usr/local/pgsql/bin</filename> directory, and run the
      following command:</para>

      <para><programlisting><computeroutput># </computeroutput><command>./initdb -D /usr/local/pgsql/data -E ""</command></programlisting></para>

      <para>This will create the database. Following the instructions in the
      section above, modify the <filename>pg_hba.conf</filename> and
      <filename>postgresql.conf</filename> files.</para>

      <para>Then you'll need to start the database:</para>

      <para><programlisting><computeroutput># </computeroutput><command>./pg_ctl -D /usr/local/pgsql/data start</command></programlisting></para>

      <para>Now you are finished as the <code>postgres</code> user.</para>
    </section>
  </section>
</chapter>

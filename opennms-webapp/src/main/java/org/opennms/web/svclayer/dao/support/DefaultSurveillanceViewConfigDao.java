package org.opennms.web.svclayer.dao.support;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;

import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.opennms.netmgt.config.SurveillanceViewsFactory;
import org.opennms.netmgt.config.surveillanceViews.View;
import org.opennms.netmgt.config.surveillanceViews.Views;
import org.opennms.web.svclayer.dao.SurveillanceViewConfigDao;
import org.springframework.dao.DataRetrievalFailureException;

public class DefaultSurveillanceViewConfigDao implements SurveillanceViewConfigDao {
    
    static {
        try {
            SurveillanceViewsFactory.init();
        } catch (MarshalException e) {
            throw new DataRetrievalFailureException("Syntax error in surveillance view config file", e);
        } catch (ValidationException e) {
            throw new DataRetrievalFailureException("Syntax error in surveillance view config file", e);
        } catch (FileNotFoundException e) {
            throw new DataRetrievalFailureException("Unable to locate surveillance view config file", e);
        } catch (IOException e) {
            throw new DataRetrievalFailureException("Error load surveillance view config file", e);
        }
    }
    
    public DefaultSurveillanceViewConfigDao() {
    }

    public View getView(String viewName) {
        try {
            return SurveillanceViewsFactory.getInstance().getView(viewName);
        } catch (MarshalException e) {
            throw new DataRetrievalFailureException("Syntax error in surveillance view config file", e);
        } catch (ValidationException e) {
            throw new DataRetrievalFailureException("Syntax error in surveillance view config file", e);
        } catch (IOException e) {
            throw new DataRetrievalFailureException("Error load surveillance view config file", e);
        }
    }

    /**
     * Use this method to get the generated Views class generated by the XSD.
     */
    public Views getViews() {
        return SurveillanceViewsFactory.getConfig().getViews();
    }
    
    /**
     * Use this method to get a Map of view names to marshalled classes based on the generated View class
     * from the XSD.
     * @return <code>Map</> of View classes.
     */
    public Map<String, View> getViewMap() {
        return SurveillanceViewsFactory.getViewsMap();
    }

    public View getDefaultView() {
        String defaultView = SurveillanceViewsFactory.getConfig().getDefaultView();
        return getView(defaultView);
    }

}

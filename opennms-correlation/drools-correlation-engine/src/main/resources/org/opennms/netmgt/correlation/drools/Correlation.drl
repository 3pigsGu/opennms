
package org.opennms.netmgt.correlation.drools;

import java.util.Date;

import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.utils.EventBuilder;
import org.opennms.netmgt.EventConstants;
import org.opennms.netmgt.capsd.EventUtils;
import org.opennms.netmgt.correlation.drools.Affliction.Type;


global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;

rule "first service lost event received"
	salience 100
	when
		$e : Event( uei == EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, $nodeid : nodeid, $ipAddr : interface, $svcName : service )
		not( Affliction( nodeid == $nodeid, ipAddr == $ipAddr, svcName == $svcName ) )
	then
		Affliction $aff = new Affliction( $nodeid, $ipAddr, $svcName, locationMonitor( $e ) );
		println( "Affliction detected for nodeId = " + $nodeid + ": " + $aff );
		retract( $e );
		assert( $aff );
end

rule "service lost detected by additional monitor"
	salience 100
	when
		$e : Event( uei == EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, $nodeid : nodeid, $ipAddr : interface, $svcName : service )
		$aff: Affliction( nodeid == $nodeid, ipAddr == $ipAddr, svcName == $svcName, $reporters : reporters -> ( !$reporters.contains( locationMonitor( $e ) ) ) )
	then
		$aff.addReporter( locationMonitor( $e ) );
		retract( $e );
		modify( $aff );
		println(" Added reporter " + locationMonitor( $e ) + " to affliction " + $aff);
end

rule "wide spread affliction"
	salience 100
	when
		$aff : Affliction( $nodeid : nodeid, $ipAddr : ipAddr, $svcName : svcName, type == Type.UNDECIDED, reporterCount > 1 )
	then
		sendWideSpreadOutageEvent( engine, $nodeid, $ipAddr, $svcName );
		$aff.setType( Type.WIDE_SPREAD );
		modify( $aff );
end

rule "isolated affliction"
	duration 30000
	when
		$aff : Affliction( $nodeid : nodeid, $ipAddr : ipAddr, $svcName : svcName, type == Type.UNDECIDED, reporterCount <= 1 )
	then
		sendIsolatedOutageEvent( engine, $nodeid, $ipAddr, $svcName );
		$aff.setType( Type.ISOLATED );
		modify( $aff );
end

rule "affliction resolved for one monitor"
	when
		$e : Event( uei == EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, $nodeid : nodeid, $ipAddr : interface, $svcName : service )
		$aff: Affliction( nodeid == $nodeid, ipAddr == $ipAddr, svcName == $svcName, $reporters : reporters -> ( $reporters.contains( locationMonitor( $e ) ) ) ) 
	then
		$aff.removeReporter( locationMonitor( $e ) );
		modify( $aff );
		retract( $e );
		println(" Monitor " + locationMonitor( $e ) + " has reported up for afflication " + $aff );
end

rule "resolve affliction when all reporters have resolved"
	when
		$aff: Affliction( $nodeid : nodeid, $ipAddr : ipAddr, $svcName : svcName, $type : type != Type.UNDECIDED, reporterCount == 0 ) 		
	then
		if ( $type == Type.ISOLATED ) {
			sendIsolatedOutageResolvedEvent( engine , $nodeid, $ipAddr, $svcName );
		} else {
			sendWideSpreadOutageResolvedEvent( engine, $nodeid, $ipAddr, $svcName );
		}
		retract( $aff );
		println("Afflication completely resolved " + $aff );
end
		

function void sendWideSpreadOutageEvent(DroolsCorrelationEngine engine, Long nodeId, String ipAddr, String svcName) {
	EventBuilder bldr = new EventBuilder("uei.opennms.org/correlation/locationMonitors/wideSpreadOutage", "Drools")
		.setNodeid(nodeId.intValue())
		.setInterface(ipAddr)
		.setService(svcName);
	engine.sendEvent(bldr.getEvent());
}

function void sendIsolatedOutageEvent(DroolsCorrelationEngine engine, Long nodeId, String ipAddr, String svcName) {
	EventBuilder bldr = new EventBuilder("uei.opennms.org/correlation/locationMonitors/isolatedOutage", "Drools")
		.setNodeid(nodeId.intValue())
		.setInterface(ipAddr)
		.setService(svcName);
	engine.sendEvent(bldr.getEvent());
}

function void sendWideSpreadOutageResolvedEvent(DroolsCorrelationEngine engine, Long nodeId, String ipAddr, String svcName) {
	EventBuilder bldr = new EventBuilder("uei.opennms.org/correlation/locationMonitors/wideSpreadOutageResolved", "Drools")
		.setNodeid(nodeId.intValue())
		.setInterface(ipAddr)
		.setService(svcName);
	engine.sendEvent(bldr.getEvent());

}

function void sendIsolatedOutageResolvedEvent(DroolsCorrelationEngine engine, Long nodeId, String ipAddr, String svcName) {
	EventBuilder bldr = new EventBuilder("uei.opennms.org/correlation/locationMonitors/isolatedOutageResolved", "Drools")
		.setNodeid(nodeId.intValue())
		.setInterface(ipAddr)
		.setService(svcName);
	engine.sendEvent(bldr.getEvent());

}

function Integer locationMonitor( Event e ) {
	return new Integer( EventUtils.getIntParm( e, EventConstants.PARM_LOCATION_MONITOR_ID, -1 ) );
}

function void println(Object msg) {
	System.out.println(new Date()+" : "+msg);
}


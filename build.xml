<?xml version="1.0"?>
 
<!--=================================================================
 
   Build file for OpenNMS
 
Refactoring notes: 
ELB - All targets that should be displayed require a description attribute.
ELB - All targets that should not be displayed require it's absence.
==================================================================== -->
 
<project name="opennms" default="usage" basedir=".">
 <description>
Build file for OpenNMS.
                                                                                
OpenNMS is a network monitoring system implemented in JAVA.
For more information consult the README file included in
your distribution.
 </description>
 
 <!-- versioning options -->
 <property name="product.version" value="1.1.3"/>
 <property name="product.release" value="0"/>
 <property name="product.snapshot" value="true"/>

 <!-- build options -->
 <property name="build.dir" value="work"/>
 <property name="build.lib.dir" value="lib"/>
 <property name="build.castor.source.dir" value="${build.dir}/castor"/>
 <property name="build.sablecc.source.dir" value="${build.dir}/sablecc"/>
 <property name="build.api.dir" value="${build.dir}/docs/javadoc"/>
 <property name="build.classes.dir" value="${build.dir}/opennms/classes"/>
 <property name="build.jar.dir" value="${build.dir}/jar"/>
 <property name="build.jicmp.dir" value="${build.dir}/jicmp"/>
 <property name="build.jrrd.dir" value="${build.dir}/jrrd"/>
 <property name="build.postgresql.dir" value="${build.dir}/postgresql"/>
 <property name="build.java.include.dir" value="/usr/lib/jvm/java-1.4.2-sun-1.4.2.03/include/linux"/>
 <property name="build.postgresql.include.dir" value="/usr/include/pgsql"/>
 <property name="build.postgresql.lib.dir" value="/usr/lib/pgsql"/>

 <!--source directories -->
 <property name="core.source.dir" value="src/core"/>
 <property name="joesnmp.source.dir" value="src/joesnmp"/>
 <property name="postgresql.source.dir" value="src/postgresql"/>
 <property name="report.source.dir" value="src/report"/>
 <property name="services.source.dir" value="src/services"/>
 <property name="web.source.dir" value="src/web/src"/>

 <!-- castor specific -->
 <property name="castor.xsd.dir" value="schema/xsd"/>
 <property name="castor.config.dir" value="${services.source.dir}/org/opennms/netmgt/config"/>
 <property name="castor.typefactory" value="j2"/>

 <!-- rpm specific -->
 <property name="rpm.sign" value="false"/>

 <!-- paths -->
 <path id="sources.java.path">
  <pathelement path="${build.castor.source.dir}"/>
  <pathelement path="${build.sablecc.source.dir}"/>
  <pathelement path="${core.source.dir}"/>
  <pathelement path="${joesnmp.source.dir}"/>
  <pathelement path="${services.source.dir}"/>
  <pathelement path="${web.source.dir}"/>
  <pathelement path="${report.source.dir}"/>
 </path>

 <path id="libraries.java.path">
  <pathelement path="${build.lib.dir}/log4j.jar"/>
  <pathelement path="${build.lib.dir}/regexp120.jar"/>
  <pathelement path="${build.lib.dir}/servlet.jar"/>
  <pathelement path="${build.lib.dir}/ldap.jar"/>
  <pathelement path="${build.lib.dir}/catalina.jar"/>
  <pathelement path="${build.lib.dir}/fop0203.jar"/>
  <pathelement path="${build.lib.dir}/batik.jar"/>
  <pathelement path="${build.lib.dir}/mx4j.jar"/>
  <pathelement path="${build.lib.dir}/jdhcp.jar"/>
  <pathelement path="${build.lib.dir}/jcifs.jar"/>
  <pathelement path="${build.lib.dir}/bsf220.jar"/>
  <pathelement path="${build.lib.dir}/xmlrpc-1.2-b1.jar"/>
 </path>

 <!-- ant tasks -->
 <taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc"/>
 <taskdef name="castor" classname="org.apache.tools.ant.taskdefs.optional.castor.SourceGeneratorTask"/>
 <taskdef resource="cpptasks.tasks"/>
 <taskdef resource="cpptasks.types"/>

 <!-- PREP targets -->
 <target name="prep">
  <tstamp/>
 </target>

 <!-- top-level initialization -->
 <target name="init" unless="init.done">
  <tstamp/>
  <!-- set properties -->
  <property file="${root.source}/build.properties"/>
  <property environment="env"/>
  <property name="install" value="${root.installprefix}${root.install}"/>
  <property name="install.initdir" value="${root.installprefix}${root.install.initdir}"/>
  <property name="install.sbindir" value="${root.installprefix}${root.install.sbindir}"/>
  <property name="install.contrib" value="${root.installprefix}${root.install.contrib}"/>
  <property name="install.rrdtool" value="${root.installprefix}${root.install.rrdtool}"/>
  <property name="install.share" value="${root.installprefix}${root.install.share}"/>
  <property name="install.rrdtool" value="${root.installprefix}${root.install.rrdtool}"/>
  <property name="install.servlets" value="${root.installprefix}${root.install.servlets}"/>
  <property name="install.logs" value="${root.installprefix}${root.install.logs}"/>
  <property name="install.pid" value="${root.installprefix}${root.install.pid}"/>
  <condition property="opennms.release.string" value="${DSTAMP}.${product.release}">
    <istrue value="${opennms.snapshot}"/>
  </condition>
  <condition property="opennms.release.string" value="${product.release}">
    <isfalse value="${opennms.snapshot}"/>
  </condition>
  <property name="opennms.version.string" value="${product.version}-${opennms.release.string}"/>

  <condition property="wasrpm" value="true">
   <available property="wasrpm" file="${root.build}/rpm" type="dir"/>
  </condition>
  <condition property="wasrpm" value="false">
   <not>
    <available property="wasrpm" file="${root.build}/rpm" type="dir"/>
   </not>
  </condition>

  <condition property="rpm.tainted" value="true">
   <or>
    <istrue value="${wasrpm}"/>
    <istrue value="${isrpm}"/>
   </or>
  </condition>

  <condition property="filter.overwrite" value="true">
    <istrue value="${rpm.tainted}"/>
  </condition>
  <condition property="filter.overwrite" value="false">
    <isfalse value="${rpm.tainted}"/>
  </condition>

  <!-- set filters -->
  <filter filtersfile="${root.source}/build.properties" />
  <filter token="install.log.dir" value="${root.install.logs}"/>
  <filter token="opennms.version.string" value="${opennms.version.string}"/>
  <filter token="opennms.release.string" value="${opennms.release.string}"/>
  <filter token="root.install.perl" value="${root.install.perl}"/>
  <filter token="root.source" value="${root.source}"/>
  <filter token="root.build" value="${root.build}"/>
  <filter token="root.install" value="${root.install}"/>
  <filter token="root.install.initdir" value="${root.install.initdir}"/>
  <filter token="root.install.sbindir" value="${root.install.sbindir}"/>
  <filter token="root.install.contrib" value="${root.install.contrib}"/>
  <filter token="root.install.servlets" value="${root.install.servlets}"/>
  <filter token="root.install.share" value="${root.install.share}"/>
  <filter token="root.install.rrdtool" value="${root.install.rrdtool}"/>
  <filter token="root.install.postgresql" value="${root.install.postgresql}"/>
  <filter token="root.install.logs" value="${root.install.logs}"/>
  <filter token="root.install.pid" value="${root.install.pid}"/>
  <filter token="root.installprefix" value="${root.installprefix}"/>
  <filter token="relative.build" value="${relative.build}"/>
  <filter token="relative.install" value="${relative.install}"/>
  <filter token="relative.install.initdir" value="${relative.install.initdir}"/>
  <filter token="relative.install.sbindir" value="${relative.install.sbindir}"/>
  <filter token="relative.install.contrib" value="${relative.install.contrib}"/>
  <filter token="relative.install.servlets" value="${relative.install.servlets}"/>
  <filter token="relative.install.share" value="${relative.install.share}"/>
  <filter token="relative.install.rrdtool" value="${relative.install.rrdtool}"/>
  <filter token="relative.install.postgresql" value="${relative.install.postgresql}"/>
  <filter token="relative.install.logs" value="${relative.install.logs}"/>
  <filter token="relative.install.pid" value="${relative.install.pid}"/>
  <filter token="install.database.driver" value="${install.database.driver}"/>
  <filter token="install.database.url" value="${install.database.url}"/>
  <filter token="install.database.user" value="${install.database.user}"/>
  <filter token="install.database.password" value="${install.database.password}"/>
  <filter token="ant.project.name" value="${ant.project.name}"/>
  <filter token="compile.soext" value="${compile.soext}"/>
  <filter token="compile.jniext" value="${compile.jniext}"/>
 
  <!-- init wrapup -->
  <antcall target="print.debug"/>
  <property name="init.done" value="true"/>
 </target>
 
 <target name="print.debug" if="debug">
  <echo>
  === Java ===
  JVM Version                  = ${java.fullversion}
  JAVA_HOME                    = ${env.JAVA_HOME}
  CLASSPATH                    = ${java.class.path}
  Ant Version                  = ${ant.version}

  === System ===
  OS Name                      = ${os.name}
  OS Version                   = ${os.version}
  User                         = ${user.name}
  Home Directory               = ${user.home}
  OpenNMS Version              = ${opennms.version.string}
  Compilation Defines          = ${compile.platform.define}

  === Build/Install Tools ===
  "cc" Executable              = ${compile.cc}
  "make" Executable            = ${compile.make}
  "ld" Executable              = ${compile.ld}
  "ld" Dynamic Flag            = ${compile.ld.dynamic}
  "ld" Static Flag             = ${compile.ld.static}
  "ld" Shared Flag             = ${compile.ld.shared}
  PostgreSQL Include Arguments = ${compile.postgresql.include}
  PostgreSQL Library Arguments = ${compile.postgresql.lib}
  RRDTool Include Arguments    = ${compile.rrdtool.include}
  RRDTool Library Arguments    = ${compile.rrdtool.lib}

  === Build/Install Directories ===
  Build Working Directory      = ${relative.build}
  Class Working Directory      = ${relative.build.classes}
  Installation Directory       = ${relative.install}
  Installation Prefix          = ${relative.installprefix}
  init.d Directory             = ${relative.install.initdir}
  PostgreSQL Library Directory = ${relative.install.postgresql}
  RRDTool Library Directory    = ${relative.install.rrdtool}
  Shared Files Directory       = ${relative.install.share}
  Servlet Directory            = ${relative.install.servlets}
  Release Tarball Directory    = ${relative.release}
  </echo>
 </target>
 
 <!-- USAGE targets -->
 <target name="usage" description="How to use this build file">
  <java classname="org.apache.tools.ant.launch.Launcher">
    <arg value="-projecthelp"/>
  </java>
 </target>

 <!-- "meta" targets -->
 
 <target name="info" depends="init" description="Show information about this build instance">
  <antcall target="print.debug"><param name="debug" value="true"/></antcall>
 </target>

 <target name="install"
	depends="install.lib,install.servlet,install.init,install.etc,install.usr.bin,install.bin,install.logs,install.share,install.contrib"
	description="build &quot;all&quot;, and install it in ${install}"/>
 <target name="all" depends="compile,jar" description="build everything (except documentation)"/>
 
 <target name="test" depends="compile.java.test,test.jsp"/>

 <!-- CLEAN targets -->
 <target name="clean" depends="prep">
  <delete dir="${build.dir}"/>
 </target>

 <!-- patterns and sets -->
 <patternset id="not.run">
  <exclude name="nightly-build.pl"/>
  <exclude name="*.bat"/>
  <exclude name="opennms.init"/>
 </patternset>

 <patternset id="lib.jars">
  <include name="*.jar" />
  <exclude name="ant*.jar" />
  <exclude name="fop0170.jar" />
  <exclude name="jakarta-regexp*.jar" />
  <exclude name="pylib*.jar" />
  <exclude name="sablecc*.jar" />
 </patternset>

 <patternset id="web.jars">
  <include name="castor*.jar" />
  <include name="fop0203.jar" />
  <include name="jms*.jar" />
  <include name="log4j*.jar" />
  <include name="postgresql*.jar" />
  <include name="regexp*.jar" />
  <include name="w3c*.jar" />
  <include name="xalan231.jar" />
  <include name="avalon-framework-4.0.jar" />
  <include name="logkit-1.0.jar" />
  <include name="batik.jar" />
  <include name="jcifs.jar" />
  <include name="ldap.jar" />
 </patternset>
 
 <!-- archive/package targets -->

 <target name="rpm" depends="init" description="Build an RPM package">
  <condition property="rpm.sign.arg" value="--sign">
    <or>
      <equals arg1="${opennms.snapshot}" arg2="true"/>
      <equals arg1="${opennms.snapshot}" arg2="yes"/>
    </or>
  </condition>
  <condition property="rpm.sign.arg" value="">
    <or>
      <equals arg1="${opennms.snapshot}" arg2="true"/>
      <equals arg1="${opennms.snapshot}" arg2="yes"/>
    </or>
  </condition>
  <property name="root.rpm" value="${root.build}/rpm"/>
  <mkdir dir="${root.rpm}/BUILD"/>
  <mkdir dir="${root.rpm}/RPMS/i386"/>
  <mkdir dir="${root.rpm}/RPMS/i486"/>
  <mkdir dir="${root.rpm}/RPMS/i586"/>
  <mkdir dir="${root.rpm}/RPMS/i686"/>
  <mkdir dir="${root.rpm}/RPMS/athlon"/>
  <mkdir dir="${root.rpm}/RPMS/k6"/>
  <mkdir dir="${root.rpm}/RPMS/noarch"/>
  <mkdir dir="${root.rpm}/SOURCES"/>
  <mkdir dir="${root.rpm}/SPECS"/>
  <mkdir dir="${root.rpm}/SRPMS"/>
  <mkdir dir="${root.rpm}/tmp"/>
  <copy filtering="yes"   file="${root.source}/tools/packages/opennms/opennms.spec.in"
                        tofile="${root.rpm}/SPECS/opennms.spec" overwrite="yes" />
  <copy filtering="no" todir="${root.rpm}/SOURCES">
   <fileset dir="${root.source}/tools/packages/opennms">
    <include name="**/*.patch"/>
    <include name="**/*.patch.gz"/>
    <include name="**/*.patch.bz2"/>
   </fileset>
   <mapper type="flatten"/>
  </copy>
  <touch file="${root.rpm}/SOURCES/${ant.project.name}-source-${opennms.version.string}.tar.gz"/>
  <echo message="building RPM for OpenNMS version ${opennms.version.string}..."/>
  <exec dir="${root.rpm}" executable="rpmbuild" failonerror="true">
   <arg value="-ba"/>
   <arg value="${root.rpm}/SPECS/opennms.spec"/>
   <arg value="--define"/>
   <arg value="platform ${rpm.platform}"/>
   <arg value="--define"/>
   <arg value="_topdir ${root.rpm}"/>
   <arg value="--define"/>
   <arg value="_tmppath ${root.rpm}/tmp"/>
   <arg value="--define"/>
   <arg value="snapshot ${opennms.snapshot}"/>
   <arg value="--define"/>
   <arg value="date ${DSTAMP}"/>
   <arg value="--define"/>
   <arg value="standalone 0"/>
   <arg value="--define"/>
   <arg value="builddocs ${rpm.builddocs}"/>
   <arg line="${rpm.sign.arg}"/>
  </exec>
 </target>
 
 <target name="srpm" depends="init,release.source" description="Build an RPM and a source RPM package">
  <condition property="rpm.sign.arg" value="--sign">
    <or>
      <equals arg1="${opennms.snapshot}" arg2="true"/>
      <equals arg1="${opennms.snapshot}" arg2="yes"/>
    </or>
  </condition>
  <condition property="rpm.sign.arg" value="">
    <or>
      <equals arg1="${opennms.snapshot}" arg2="true"/>
      <equals arg1="${opennms.snapshot}" arg2="yes"/>
    </or>
  </condition>
  <property name="root.rpm" value="${root.build}/rpm"/>
  <mkdir dir="${root.rpm}/BUILD"/>
  <mkdir dir="${root.rpm}/RPMS/i386"/>
  <mkdir dir="${root.rpm}/RPMS/i486"/>
  <mkdir dir="${root.rpm}/RPMS/i586"/>
  <mkdir dir="${root.rpm}/RPMS/i686"/>
  <mkdir dir="${root.rpm}/RPMS/athlon"/>
  <mkdir dir="${root.rpm}/RPMS/k6"/>
  <mkdir dir="${root.rpm}/RPMS/noarch"/>
  <mkdir dir="${root.rpm}/SOURCES"/>
  <mkdir dir="${root.rpm}/SPECS"/>
  <mkdir dir="${root.rpm}/SRPMS"/>
  <mkdir dir="${root.rpm}/tmp"/>
  <copy filtering="yes"   file="${root.source}/tools/packages/opennms/opennms.spec.in"
                        tofile="${root.rpm}/SPECS/opennms.spec" overwrite="${filter.overwrite}" />
  <copy filtering="no" todir="${root.rpm}/SOURCES">
   <fileset dir="${root.source}/tools/packages/opennms">
    <include name="**/*.patch"/>
    <include name="**/*.patch.gz"/>
    <include name="**/*.patch.bz2"/>
   </fileset>
   <fileset dir="${root.release}">
    <include name="${ant.project.name}-source-${opennms.version.string}.tar.gz"/>
   </fileset>
   <mapper type="flatten"/>
  </copy>
  <echo message="building RPM for OpenNMS version ${opennms.version.string}..."/>
  <exec dir="${root.rpm}" executable="rpmbuild" failonerror="true">
   <arg value="-ba"/>
   <arg value="${root.rpm}/SPECS/opennms.spec"/>
   <arg value="--define"/>
   <arg value="platform ${rpm.platform}"/>
   <arg value="--define"/>
   <arg value="_topdir ${root.rpm}"/>
   <arg value="--define"/>
   <arg value="_tmppath ${root.rpm}/tmp"/>
   <arg value="--define"/>
   <arg value="snapshot ${opennms.snapshot}"/>
   <arg value="--define"/>
   <arg value="date ${DSTAMP}"/>
   <arg value="--define"/>
   <arg value="standalone 1"/>
   <arg value="--define"/>
   <arg value="builddocs ${rpm.builddocs}"/>
   <arg line="${rpm.sign.arg}"/>
  </exec>
 </target>
 
 <target name="release" depends="init,release.source,release.binary,release.docs" description="Build a release (source and binary)"/>

 <target name="release.prepare.docs" depends="init,docs">
  <mkdir dir="${root.build}/${ant.project.name}-${product.version}-${product.release}/docs"/>
  <copy todir="${root.build}/${ant.project.name}-${product.version}-${product.release}/docs">
   <fileset dir="${root.build}/docs"/>
  </copy>
 </target>

 <target name="release.docs" depends="init,release.prepare.docs">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${product.version}-${product.release}/docs/"/>
  <delete file="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.tar"
	zipfile="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-docs-${product.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${product.version}-${product.release}/docs/"/>
  </zip>
 </target>

 <target name="release.prepare.source" depends="init">
  <mkdir dir="${root.build}/${ant.project.name}-${product.version}-${product.release}/source"/>
  <copy todir="${root.build}/${ant.project.name}-${product.version}-${product.release}/source">
   <fileset dir="${root.source}">
    <include name="**/*"/>
    <exclude name="${relative.build}/**"/>
    <exclude name="${relative.install}/**"/>
    <exclude name="${relative.install.servlets}/**"/>
    <exclude name="${relative.install.share}/**"/>
    <exclude name="${relative.install.postgresql}/**"/>
    <exclude name="${relative.install.rrdtool}/**"/>
    <exclude name="${relative.build.classes}/**"/>
    <exclude name="debian/opennms/**"/>
    <exclude name="CVSROOT/**"/>
    <exclude name="**/*.swp"/>
   </fileset>
  </copy>
 </target>
 
 <target name="release.source" depends="release.prepare.source">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${product.version}-${product.release}/source/"/>
  <delete file="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.tar"
        zipfile="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-source-${product.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${product.version}-${product.release}/source/"/>
  </zip>
 </target>

 <target name="release.prepare.binary" depends="init">
  <mkdir dir="${root.build}/${ant.project.name}-${product.version}-${product.release}/binary"/>
  <antcall target="install">
   <param name="install" value="${root.build}/opt/OpenNMS"/>
   <param name="prefix.install" value="/opt/OpenNMS"/>
   <param name="prefix.install.servlets" value="/opt/OpenNMS/webapps"/>
   <param name="prefix.installprefix" value="${root.build}"/>
  </antcall>
  <move todir="${root.build}/${ant.project.name}-${product.version}-${product.release}/binary">
   <fileset dir="${root.build}/opt/OpenNMS" includes="**/*"/>
  </move>
  <delete dir="${root.build}/opt" includeEmptyDirs="true"/>
 </target>

 <target name="release.binary" depends="release.prepare.binary">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${product.version}-${product.release}/binary/" />
  <delete file="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.tar"
        zipfile="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-binary-${product.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${product.version}-${product.release}/binary/"/>
  </zip>
 </target>

 <!-- installation targets -->

 <target name="install.usr.bin" depends="init" if="isrpm">
  <mkdir dir="${root.installprefix}/usr/bin"/>
  <echo file="${root.installprefix}/usr/bin/${ant.project.name}">#!/bin/bash

${root.install}/bin/opennms.sh $$@
  </echo>
 </target>

 <target name="install.bin" depends="init,copy.bin">
  <mkdir dir="${install}/bin"/>
  <copy todir="${install}/bin">
   <fileset dir="${root.build}/bin"/>
  </copy>
  <chmod perm="0755" parallel="false">
   <fileset dir="${install}/bin"/>
  </chmod>
 </target>

 <target name="install.init" depends="init">
  <copy file="${root.source}/tools/packages/opennms/opennms.init" tofile="${install.initdir}/opennms" filtering="yes" overwrite="${filter.overwrite}" />
 </target>

 <target name="install.etc" depends="init,copy.etc">
  <copy todir="${install}/etc">
   <fileset dir="${root.build}/etc"/>
  </copy>
 </target>

 <target name="install.contrib" depends="init,copy.contrib">
  <copy todir="${install.contrib}">
   <fileset dir="${root.build}/contrib"/>
  </copy>
 </target>

 <target name="install.lib" depends="init,compile,jar">
  <mkdir dir="${install}/lib"/>
  <mkdir dir="${install}/lib/updates"/>
  <echo file="${install}/lib/updates/README.updates">

=========================================================
This directory is ONLY for class file and jar updates
between releases of OpenNMS.

Do not put anything here that you may want to keep, they
will be DELETED upon an RPM upgrade to a new version of
OpenNMS as part of the post-install.
=========================================================

  </echo>
  <copy todir="${install}/lib">
   <fileset dir="${jar.build.dir}" includes="*.jar" />
   <fileset dir="${jicmp.build.dir}" includes="*${compile.jniext}*"/>
   <fileset dir="${jrrd.build.dir}" includes="*${compile.jniext}*"/>
   <fileset dir="${postgresql.build.dir}" includes="*.${compile.soext}.*"/>
   <fileset dir="${root.source}/lib">
    <patternset refid="lib.jars" />
   </fileset>
   <!-- classpathref="libraries.java.path" -->
  </copy>

  <chmod perm="0755">
   <fileset dir="${install}/lib"/>
  </chmod>
  <chmod perm="0664">
   <fileset dir="${install}/lib">
    <include name="*.jar"/>
   </fileset>
  </chmod>
  <mkdir dir="${install}/lib/scripts"/>
  <copy todir="${install}/lib/scripts" filtering="yes">
   <fileset dir="${root.source}/tools/infrastructure">
    <include name="**/*.sh"/>
    <include name="**/*.pl"/>
   </fileset>
  </copy>
  <chmod perm="0755">
   <fileset dir="${install}/lib/scripts"/>
  </chmod>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjicmp.${compile.jniext} libjicmp.${compile.jniext}.${product.version}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjicmp.${compile.jniext} libjicmp.${compile.jniext}.${opennms.version.major}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjrrd.${compile.jniext} libjrrd.${compile.jniext}.${product.version}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjrrd.${compile.jniext} libjrrd.${compile.jniext}.${opennms.version.major}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf iplike.${compile.soext}.${product.version} iplike.${compile.soext}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf iplike.${compile.soext}.${product.version} iplike.${compile.soext}.${opennms.version.major}"/></exec>
 </target>

 <target name="install.logs" depends="init">
  <mkdir dir="${install.logs}"/>
 </target>

 <target name="install.share" depends="init">
  <mkdir dir="${install.share}"/>
  <mkdir dir="${install.share}/reports"/>
  <mkdir dir="${install.share}/events"/>
  <mkdir dir="${install.share}/rrd"/>
 </target>

 <!-- token translation targets -->

 <target name="copy.bin" depends="init">
  <mkdir dir="${root.build}/bin"/>
  <copy todir="${root.build}/bin" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/tools/run"/>
   <fileset dir="${root.source}/tools/contrib"/>
  </copy>
 </target>

 <target name="copy.etc" depends="init">
  <mkdir dir="${root.build}/etc"/>
  <copy todir="${root.build}/etc" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/etc">
    <include name="**/*"/>
    <exclude name="**/*.gif"/>
    <exclude name="**/*.jpg"/>
    <exclude name="**/*.png"/>
   </fileset>
   <fileset dir="${root.source}/src/postgresql" includes="*.sql"/>
  </copy>
  <copy todir="${root.build}/etc" filtering="no" overwrite="yes">
   <fileset dir="${root.source}/etc">
    <include name="**/*.gif"/>
    <include name="**/*.jpg"/>
    <include name="**/*.png"/>
   </fileset>
  </copy>
 </target>

 <target name="copy.contrib" depends="init">
  <mkdir dir="${root.build}/contrib"/>
  <copy todir="${root.build}/contrib" filtering="no" overwrite="yes">
   <fileset dir="${root.source}/contrib">
    <include name="**/*"/>
   </fileset>
  </copy>
 </target>

 <!-- SOURCES targets -->
 <!-- This target should be used to generate all source code
      That does not already exist in CVS -->
 <target name="sources" depends="sablecc.filter.sources.generate,castor.sources.generate" 
  description="Update Castor and Sablecc java source code"/>

 <!-- Generates Sablecc java files if necessary -->
 <target name="sablecc.filter.sources.generate" depends="sablecc.filter.sources.uptodate"
  unless="sablecc.filter.sources.uptodate">
  <sablecc src="${services.source.dir}/org/opennms/netmgt/filter/"
   outputdirectory="${build.sablecc.source.dir}" includes="filter.grammar"/>
 </target>

 <!-- Removes any old Sablecc java files and flags if they are up to date -->
 <target name="sablecc.filter.sources.uptodate" depends="prep">
  <mkdir dir="${build.sablecc.source.dir}"/>
  <dependset>
   <srcfilelist dir="${services.source.dir}/org/opennms/netmgt/filter"
    files="filter.grammar"/>
   <targetfileset dir="${build.sablecc.source.dir}">
    <include name="org/opennms/netmgt/filter/analysis/Analysis.java"/>
    <include name="org/opennms/netmgt/filter/analysis/AnalysisAdapter.java"/>
    <include name="org/opennms/netmgt/filter/analysis/DepthFirstAdapter.java"/>
    <include name="org/opennms/netmgt/filter/analysis/ReversedDepthFirstAdapter.java"/>
    <include name="org/opennms/netmgt/filter/lexer/lexer.dat"/>
    <include name="org/opennms/netmgt/filter/lexer/LexerException.java"/>
    <include name="org/opennms/netmgt/filter/lexer/Lexer.java"/>
    <include name="org/opennms/netmgt/filter/lexer/Lexer.java"/>
    <include name="org/opennms/netmgt/filter/node/AAndRule.java"/>
    <include name="org/opennms/netmgt/filter/node/ACompareExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/AExprParensExpr.java"/>
    <include name="org/opennms/netmgt/filter/node/AExprPartExpr.java"/>
    <include name="org/opennms/netmgt/filter/node/AGtrThanEqualExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/AGtrThanExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/AIdentExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/AIntegerCompareRight.java"/>
    <include name="org/opennms/netmgt/filter/node/AIntegerOctet.java"/>
    <include name="org/opennms/netmgt/filter/node/AIpaddrIpIdent.java"/>
    <include name="org/opennms/netmgt/filter/node/AIplikeExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/ALessThanEqualExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/ALessThanExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/ALikeExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/ANotEqualExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/ANotExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/AOctetListOctet.java"/>
    <include name="org/opennms/netmgt/filter/node/AOctetRangeListOctet.java"/>
    <include name="org/opennms/netmgt/filter/node/AOctetRangeOctet.java"/>
    <include name="org/opennms/netmgt/filter/node/AOrRule.java"/>
    <include name="org/opennms/netmgt/filter/node/ARuleExprRule.java"/>
    <include name="org/opennms/netmgt/filter/node/AStarOctet.java"/>
    <include name="org/opennms/netmgt/filter/node/AStringCompareRight.java"/>
    <include name="org/opennms/netmgt/filter/node/Cast.java"/>
    <include name="org/opennms/netmgt/filter/node/EOF.java"/>
    <include name="org/opennms/netmgt/filter/node/NoCast.java"/>
    <include name="org/opennms/netmgt/filter/node/NodeCast.java"/>
    <include name="org/opennms/netmgt/filter/node/Node.java"/>
    <include name="org/opennms/netmgt/filter/node/PCompareRight.java"/>
    <include name="org/opennms/netmgt/filter/node/PExpr.java"/>
    <include name="org/opennms/netmgt/filter/node/PExprPart.java"/>
    <include name="org/opennms/netmgt/filter/node/PIpIdent.java"/>
    <include name="org/opennms/netmgt/filter/node/POctet.java"/>
    <include name="org/opennms/netmgt/filter/node/PRule.java"/>
    <include name="org/opennms/netmgt/filter/node/Start.java"/>
    <include name="org/opennms/netmgt/filter/node/Switchable.java"/>
    <include name="org/opennms/netmgt/filter/node/Switch.java"/>
    <include name="org/opennms/netmgt/filter/node/TAnd.java"/>
    <include name="org/opennms/netmgt/filter/node/TBlank.java"/>
    <include name="org/opennms/netmgt/filter/node/TCompare.java"/>
    <include name="org/opennms/netmgt/filter/node/TDot.java"/>
    <include name="org/opennms/netmgt/filter/node/TGtrThan.java"/>
    <include name="org/opennms/netmgt/filter/node/TGtrThanEqual.java"/>
    <include name="org/opennms/netmgt/filter/node/TIdent.java"/>
    <include name="org/opennms/netmgt/filter/node/TInteger.java"/>
    <include name="org/opennms/netmgt/filter/node/TIplike.java"/>
    <include name="org/opennms/netmgt/filter/node/TLessThanEqual.java"/>
    <include name="org/opennms/netmgt/filter/node/TLessThan.java"/>
    <include name="org/opennms/netmgt/filter/node/TLike.java"/>
    <include name="org/opennms/netmgt/filter/node/TLparen.java"/>
    <include name="org/opennms/netmgt/filter/node/TNotEqual.java"/>
    <include name="org/opennms/netmgt/filter/node/TNot.java"/>
    <include name="org/opennms/netmgt/filter/node/TOctetList.java"/>
    <include name="org/opennms/netmgt/filter/node/TOctetRange.java"/>
    <include name="org/opennms/netmgt/filter/node/TOctetRangeList.java"/>
    <include name="org/opennms/netmgt/filter/node/Token.java"/>
    <include name="org/opennms/netmgt/filter/node/TOr.java"/>
    <include name="org/opennms/netmgt/filter/node/TQuotedString.java"/>
    <include name="org/opennms/netmgt/filter/node/TRparen.java"/>
    <include name="org/opennms/netmgt/filter/node/TSemi.java"/>
    <include name="org/opennms/netmgt/filter/node/TStar.java"/>
    <include name="org/opennms/netmgt/filter/node/TypedLinkedList.java"/>
    <include name="org/opennms/netmgt/filter/parser/parser.dat"/>
    <include name="org/opennms/netmgt/filter/parser/ParserException.java"/>
    <include name="org/opennms/netmgt/filter/parser/Parser.java"/>
    <include name="org/opennms/netmgt/filter/parser/State.java"/>
    <include name="org/opennms/netmgt/filter/parser/TokenIndex.java"/>
   </targetfileset>
  </dependset>
  <condition property="sablecc.filter.sources.uptodate">
   <and>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/analysis/Analysis.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/analysis/AnalysisAdapter.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/analysis/DepthFirstAdapter.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/analysis/ReversedDepthFirstAdapter.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/lexer/lexer.dat" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/lexer/LexerException.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/lexer/Lexer.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/lexer/Lexer.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AAndRule.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ACompareExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AExprParensExpr.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AExprPartExpr.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AGtrThanEqualExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AIdentExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AIntegerCompareRight.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AIntegerOctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AIpaddrIpIdent.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AIplikeExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ALessThanEqualExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ALessThanExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ALikeExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ANotEqualExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ANotExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AOctetListOctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AOctetRangeListOctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AOctetRangeOctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AOrRule.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/ARuleExprRule.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AStarOctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/AStringCompareRight.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Cast.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/EOF.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/NoCast.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/NodeCast.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Node.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/PCompareRight.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/PExpr.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/PExprPart.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/PIpIdent.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/POctet.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/PRule.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Start.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Switchable.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Switch.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TAnd.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TBlank.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TCompare.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TDot.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TGtrThan.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TGtrThanEqual.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TIdent.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TInteger.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TIplike.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TLessThanEqual.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TLessThan.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TLike.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TLparen.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TNotEqual.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TNot.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TOctetList.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TOctetRange.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TOctetRangeList.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/Token.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TOr.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TQuotedString.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TRparen.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TSemi.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TStar.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/node/TypedLinkedList.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/parser.dat" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/ParserException.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/Parser.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/State.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/TokenIndex.java" type="file"/>
    <available file="${build.sablecc.source.dir}/org/opennms/netmgt/filter/parser/TokenIndex.java" type="file"/>
   </and>
  </condition>
 </target>

 <!-- Generates Castor java files if necessary -->
 <target name="castor.sources.generate"
  depends="castor.actiond.sources.generate,      castor.availability.sources.generate,
   castor.capsd.sources.generate,                castor.categories.sources.generate,
   castor.collectd.sources.generate,             castor.destinationPaths.sources.generate,
   castor.dhcpd.sources.generate,                castor.discovery.sources.generate,
   castor.event.sources.generate,                castor.eventconf.sources.generate,
   castor.eventd.sources.generate,               castor.events.sources.generate,
   castor.filter.sources.generate,               castor.groups.sources.generate,
   castor.kscReports.sources.generate,           castor.notifd.sources.generate,
   castor.notificationCommands.sources.generate, castor.notifications.sources.generate,
   castor.outage.sources.generate,               castor.poller.sources.generate,
   castor.rtc.sources.generate,                  castor.rtceui.sources.generate,             
   castor.scriptd.sources.generate,              castor.server.sources.generate,
   castor.service.sources.generate,              castor.trapd.sources.generate,
   castor.threshd.sources.generate,              castor.vulnscand.sources.generate,
   castor.xmlrpcd.sources.generate,              castor.users.sources.generate,
   castor.views.sources.generate,                castor.viewsdisplay.sources.generate,
   castor.webuiColors.sources.generate"/>

 <!-- These targets generate a specific set of castor classes based on the
      xsd the target refers to -->
 <target name="castor.actiond.sources.generate" depends="castor.sources.uptodate"
  unless="castor.actiond.sources.uptodate">
  <castor file="${castor.config.dir}/actiond-configuration.xsd" srcpackage="org.opennms.netmgt.config.actiond"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.availability.sources.generate" depends="castor.sources.uptodate"
  unless="castor.availability.sources.uptodate">
  <castor file="${castor.xsd.dir}/availability_report.xsd" srcpackage="org.opennms.report.availability"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.capsd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.capsd.sources.uptodate">
  <castor file="${castor.config.dir}/capsd-configuration.xsd" srcpackage="org.opennms.netmgt.config.capsd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.categories.sources.generate" depends="castor.sources.uptodate"
  unless="castor.categories.sources.uptodate">
  <castor file="${castor.config.dir}/categories.xsd" srcpackage="org.opennms.netmgt.config.categories"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.collectd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.collectd.sources.uptodate">
  <delete quiet="true">
   <fileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/collectd" includes="*.java"/>
  </delete>
  <castor file="${castor.config.dir}/collectd-configuration.xsd" srcpackage="org.opennms.netmgt.config.collectd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
  <castor file="${castor.config.dir}/datacollection-config.xsd" srcpackage="org.opennms.netmgt.config.collectd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.destinationPaths.sources.generate" depends="castor.sources.uptodate"
  unless="castor.destinationPaths.sources.uptodate">
  <castor file="${castor.config.dir}/destinationPaths.xsd" srcpackage="org.opennms.netmgt.config.destinationPaths"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.dhcpd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.dhcpd.sources.uptodate">
  <castor file="${castor.config.dir}/dhcpd-configuration.xsd" srcpackage="org.opennms.netmgt.config.dhcpd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.discovery.sources.generate" depends="castor.sources.uptodate"
  unless="castor.discovery.sources.uptodate">
  <castor file="${castor.config.dir}/discovery-configuration.xsd" srcpackage="org.opennms.netmgt.config.discovery"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.event.sources.generate" depends="castor.sources.uptodate"
  unless="castor.event.sources.uptodate">
  <castor file="${castor.xsd.dir}/event.xsd" srcpackage="org.opennms.netmgt.xml.event"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.eventconf.sources.generate" depends="castor.sources.uptodate"
  unless="castor.eventconf.sources.uptodate">
  <castor file="${castor.xsd.dir}/eventconf.xsd" srcpackage="org.opennms.netmgt.xml.eventconf"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.eventd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.eventd.sources.uptodate">
  <castor file="${castor.config.dir}/eventd-configuration.xsd" srcpackage="org.opennms.netmgt.config.eventd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.events.sources.generate" depends="castor.sources.uptodate"
  unless="castor.events.sources.uptodate">
  <castor file="${castor.config.dir}/events-archiver-configuration.xsd" srcpackage="org.opennms.netmgt.config.archiver.events"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.filter.sources.generate" depends="castor.sources.uptodate"
  unless="castor.filter.sources.uptodate">
  <castor file="${castor.config.dir}/database-schema.xsd" srcpackage="org.opennms.netmgt.config.filter"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.groups.sources.generate" depends="castor.sources.uptodate"
  unless="castor.groups.sources.uptodate">
  <castor file="${castor.config.dir}/groups.xsd" srcpackage="org.opennms.netmgt.config.groups"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.kscReports.sources.generate" depends="castor.sources.uptodate"
  unless="castor.kscReports.sources.uptodate">
  <castor file="${castor.config.dir}/ksc-performance-reports.xsd" srcpackage="org.opennms.netmgt.config.kscReports"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.notifd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.notifd.sources.uptodate">
  <castor file="${castor.config.dir}/notifd-configuration.xsd" srcpackage="org.opennms.netmgt.config.notifd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.notificationCommands.sources.generate" depends="castor.sources.uptodate"
  unless="castor.notificationCommands.sources.uptodate">
  <castor file="${castor.config.dir}/notificationCommands.xsd" srcpackage="org.opennms.netmgt.config.notificationCommands"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.notifications.sources.generate" depends="castor.sources.uptodate"
  unless="castor.notifications.sources.uptodate">
  <castor file="${castor.config.dir}/notifications.xsd" srcpackage="org.opennms.netmgt.config.notifications"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.outage.sources.generate" depends="castor.sources.uptodate"
  unless="castor.outage.sources.uptodate">
  <castor file="${castor.config.dir}/outage-configuration.xsd" srcpackage="org.opennms.netmgt.config.outage"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.poller.sources.generate" depends="castor.sources.uptodate"
  unless="castor.poller.sources.uptodate">
  <delete quiet="true">
   <fileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/poller" includes="*.java"/>
  </delete>
  <castor file="${castor.config.dir}/poller-configuration.xsd" srcpackage="org.opennms.netmgt.config.poller"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
  <castor file="${castor.config.dir}/poll-outages.xsd" srcpackage="org.opennms.netmgt.config.poller"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.rtc.sources.generate" depends="castor.sources.uptodate"
  unless="castor.rtc.sources.uptodate">
  <castor file="${castor.config.dir}/rtc-configuration.xsd" srcpackage="org.opennms.netmgt.config.rtc"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.rtceui.sources.generate" depends="castor.sources.uptodate"
  unless="castor.rtceui.sources.uptodate">
  <castor file="${castor.xsd.dir}/rtceui.xsd" srcpackage="org.opennms.netmgt.xml.rtc"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.scriptd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.scriptd.sources.uptodate">
  <castor file="${castor.config.dir}/scriptd-configuration.xsd" srcpackage="org.opennms.netmgt.config.scriptd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.server.sources.generate" depends="castor.sources.uptodate"
  unless="castor.server.sources.uptodate">
  <castor file="${castor.config.dir}/opennms-server.xsd" srcpackage="org.opennms.netmgt.config.server"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.service.sources.generate" depends="castor.sources.uptodate"
  unless="castor.service.sources.uptodate">
  <castor file="${castor.config.dir}/service-configuration.xsd" srcpackage="org.opennms.netmgt.config.service"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.trapd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.trapd.sources.uptodate">
  <castor file="${castor.config.dir}/trapd-configuration.xsd" srcpackage="org.opennms.netmgt.config.trapd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.threshd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.threshd.sources.uptodate">
  <delete quiet="true">
   <fileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/threshd" includes="*.java"/>
  </delete>
  <castor file="${castor.config.dir}/threshd-configuration.xsd" srcpackage="org.opennms.netmgt.config.threshd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
  <castor file="${castor.config.dir}/thresholding-config.xsd" srcpackage="org.opennms.netmgt.config.threshd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.vulnscand.sources.generate" depends="castor.sources.uptodate"
  unless="castor.vulnscand.sources.uptodate">
  <castor file="${castor.config.dir}/vulnscand-configuration.xsd" srcpackage="org.opennms.netmgt.config.vulnscand"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.xmlrpcd.sources.generate" depends="castor.sources.uptodate"
  unless="castor.xmlrpcd.sources.uptodate">
  <castor file="${castor.config.dir}/xmlrpcd-configuration.xsd" srcpackage="org.opennms.netmgt.config.xmlrpcd"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.users.sources.generate" depends="castor.sources.uptodate"
  unless="castor.users.sources.uptodate">
  <castor file="${castor.config.dir}/users.xsd" srcpackage="org.opennms.netmgt.config.users"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.views.sources.generate" depends="castor.sources.uptodate"
  unless="castor.views.sources.uptodate">
  <castor file="${castor.config.dir}/views.xsd" srcpackage="org.opennms.netmgt.config.views"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.viewsdisplay.sources.generate" depends="castor.sources.uptodate"
  unless="castor.viewsdisplay.sources.uptodate">
  <castor file="${castor.config.dir}/viewsdisplay.xsd" srcpackage="org.opennms.netmgt.config.viewsdisplay"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>
 <target name="castor.webuiColors.sources.generate" depends="castor.sources.uptodate"
  unless="castor.webuiColors.sources.uptodate">
  <castor file="${castor.config.dir}/webui-colors.xsd" srcpackage="org.opennms.netmgt.config.webuiColors"
   destination="${build.castor.source.dir}" typefactory="${castor.typefactory}"/>
 </target>

 <!-- This target is used to determine if the castor sources are up to date.
      First it uses a dependset rule to remove all files older than the xsd,
      then it uses a condition to see if the root class described in the xsd
      exists, and if it does, it sets an uptodate property for the xsd. -->
 <target name="castor.sources.uptodate" depends="prep">
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="actiond-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/actiond" includes="*.java"/>
  </dependset>
  <condition property="castor.actiond.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/actiond/ActiondConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.xsd.dir}" files="availability_report.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/report/availability" includes="*.java"/>
  </dependset>
  <condition property="castor.availability.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/report/availability/Report.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="capsd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/capsd" includes="*.java"/>
  </dependset>
  <condition property="castor.capsd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/capsd/CapsdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="categories.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/categories" includes="*.java"/>
  </dependset>
  <condition property="castor.categories.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/categories/Catinfo.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="collectd-configuration.xsd"/>
   <srcfilelist dir="${castor.config.dir}" files="datacollection-config.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/collectd" includes="*.java"/>
  </dependset>
  <condition property="castor.collectd.sources.uptodate">
   <and>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/collectd/CollectdConfiguration.java" type="file"/>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/collectd/DatacollectionConfig.java" type="file"/>
   </and>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="destinationPaths.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/destinationPaths" includes="*.java"/>
  </dependset>
  <condition property="castor.destinationPaths.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/destinationPaths/DestinationPaths.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="dhcpd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/dhcpd" includes="*.java"/>
  </dependset>
  <condition property="castor.dhcpd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/dhcpd/DhcpdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="discovery-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/discovery" includes="*.java"/>
  </dependset>
  <condition property="castor.discovery.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/discovery/DiscoveryConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.xsd.dir}" files="event.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/xml/event" includes="*.java"/>
  </dependset>
  <condition property="castor.event.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/xml/event/Event.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.xsd.dir}" files="eventconf.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/xml/eventconf" includes="*.java"/>
  </dependset>
  <condition property="castor.eventconf.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/xml/eventconf/Events.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="eventd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/eventd" includes="*.java"/>
  </dependset>
  <condition property="castor.eventd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/eventd/EventdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="events-archiver-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/archiver/events" includes="*.java"/>
  </dependset>
  <condition property="castor.events.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/archiver/events/EventsArchiverConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="database-schema.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/filter" includes="*.java"/>
  </dependset>
  <condition property="castor.filter.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/filter/DatabaseSchema.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="groups.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/groups" includes="*.java"/>
  </dependset>
  <condition property="castor.groups.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/groups/Groupinfo.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="ksc-performance-reports.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/kscReports" includes="*.java"/>
  </dependset>
  <condition property="castor.kscReports.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/kscReports/ReportsList.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="notifd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/notifd" includes="*.java"/>
  </dependset>
  <condition property="castor.notifd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/notifd/NotifdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="notificationCommands.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/notificationCommands" includes="*.java"/>
  </dependset>
  <condition property="castor.notificationCommands.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/notificationCommands/NotificationCommands.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="notifications.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/notifications" includes="*.java"/>
  </dependset>
  <condition property="castor.notifications.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/notifications/Notifications.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="outage-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/outage" includes="*.java"/>
  </dependset>
  <condition property="castor.outage.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/outage/OutageConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="poller-configuration.xsd"/>
   <srcfilelist dir="${castor.config.dir}" files="poll-outages.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/poller" includes="*.java"/>
  </dependset>
  <condition property="castor.poller.sources.uptodate">
   <and>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/poller/PollerConfiguration.java" type="file"/>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/poller/Outages.java" type="file"/>
   </and>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="rtc-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/rtc" includes="*.java"/>
  </dependset>
  <condition property="castor.rtc.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/rtc/RTCConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.xsd.dir}" files="rtceui.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/xml/rtc" includes="*.java"/>
  </dependset>
  <condition property="castor.rtceui.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/xml/rtc/EuiLevel.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="scriptd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/scriptd" includes="*.java"/>
  </dependset>
  <condition property="castor.scriptd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/scriptd/ScriptdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="opennms-server.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/server" includes="*.java"/>
  </dependset>
  <condition property="castor.server.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/server/LocalServer.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="service-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/service" includes="*.java"/>
  </dependset>
  <condition property="castor.service.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/service/ServiceConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="trapd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/trapd" includes="*.java"/>
  </dependset>
  <condition property="castor.trapd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/trapd/TrapdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="threshd-configuration.xsd"/>
   <srcfilelist dir="${castor.config.dir}" files="thresholding-config.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/threshd" includes="*.java"/>
  </dependset>
  <condition property="castor.threshd.sources.uptodate">
   <and>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/threshd/ThreshdConfiguration.java" type="file"/>
    <available file="${build.castor.source.dir}/org/opennms/netmgt/config/threshd/ThresholdingConfig.java" type="file"/>
   </and>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="vulnscand-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/vulnscand" includes="*.java"/>
  </dependset>
  <condition property="castor.vulnscand.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/vulnscand/VulnscandConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="xmlrpcd-configuration.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/xmlrpcd" includes="*.java"/>
  </dependset>
  <condition property="castor.xmlrpcd.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/xmlrpcd/XmlrpcdConfiguration.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="users.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/users" includes="*.java"/>
  </dependset>
  <condition property="castor.users.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/users/Userinfo.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="views.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/views" includes="*.java"/>
  </dependset>
  <condition property="castor.views.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/views/Viewinfo.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="viewsdisplay.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/viewsdisplay" includes="*.java"/>
  </dependset>
  <condition property="castor.viewsdisplay.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/viewsdisplay/Viewinfo.java" type="file"/>
  </condition>
  <dependset>
   <srcfilelist dir="${castor.config.dir}" files="webui-colors.xsd"/>
   <targetfileset dir="${build.castor.source.dir}/org/opennms/netmgt/config/webuiColors" includes="*.java"/>
  </dependset>
  <condition property="castor.webuiColors.sources.uptodate">
   <available file="${build.castor.source.dir}/org/opennms/netmgt/config/webuiColors/CategoryColors.java" type="file"/>
  </condition>
 </target>

 <!-- COMPILE targets -->
 
 <target name="compile" depends="java.compile,jicmp.compile,jrrd.compile,postgresql.compile" description="compile all code"/>

 <target name="java.compile" depends="prep,sources">
  <mkdir dir="${build.classes.dir}"/>
  <javac destdir="${build.classes.dir}" debug="${compile.debug}"
   optimize="${compile.optimize}"  verbose="${compile.verbose}"
   classpathref="libraries.java.path" deprecation="${compile.deprecation}">
   <src>
    <path refid="sources.java.path"/>
   </src>
   <include name="**/*.java"/>
  </javac>
<!-- this really shouldn't be part of the compile, but rather part of a "package" target
  <copy todir="${build.classes.dir}">
   <fileset dir="${root.build}/sablecc">
    <include name="**/*.dat"/>
   </fileset>
  </copy>
-->
 </target>

  <target name="jicmp.compile" depends="prep,java.compile">
    <mkdir dir="${build.jicmp.dir}"/>
    <javah class="org.opennms.protocols.icmp.IcmpSocket" classpath="${build.classes.dir}"
           outputFile="${build.jicmp.dir}/IcmpSocket.h"/>
    <copy todir="${build.jicmp.dir}">
      <fileset dir="${services.source.dir}/org/opennms/protocols/icmp">
        <include name="IcmpSocket.c"/>
        <include name="byteswap.h"/>
      </fileset>
    </copy>
    <cc debug="true" link="shared"
        objdir="${build.jicmp.dir}" outfile="${build.jicmp.dir}/jicmp">
      <compiler name="gcc">
        <compilerarg value="-shared"/>
        <compilerarg value="-fpic"/>
      </compiler>
      <linker name="gcc"/>
      <fileset dir="${build.jicmp.dir}" includes="IcmpSocket.c"/>
      <includepath path="${build.java.include.dir}"/>
    </cc>
  </target>

  <target name="jrrd.compile" depends="prep,java.compile">
    <mkdir dir="${build.jrrd.dir}"/>
    <javah class="org.opennms.netmgt.rrd.Interface" classpath="${build.classes.dir}"
           outputFile="${build.jrrd.dir}/rrd_jinterface.h"/>
    <copy todir="${build.jrrd.dir}">
      <fileset dir="${services.source.dir}/org/opennms/netmgt/rrd">
        <include name="rrd_jinterface.c"/>
      </fileset>
    </copy>
    <cc debug="true" link="shared"
        objdir="${build.jrrd.dir}" outfile="${build.jrrd.dir}/jrrd">
      <compiler name="gcc">
        <compilerarg value="-shared"/>
        <compilerarg value="-fpic"/>
      </compiler>
      <linker name="gcc"/>
      <fileset dir="${build.jrrd.dir}" includes="rrd_jinterface.c"/>
      <includepath path="${build.java.include.dir}"/>
    </cc>
  </target>

  <target name="postgresql.compile" depends="prep">
    <mkdir dir="${build.postgresql.dir}"/>
    <copy todir="${build.postgresql.dir}">
      <fileset dir="${postgresql.source.dir}">
        <include name="iplike.c"/>
      </fileset>
    </copy>
    <cc debug="true" link="shared"
        objdir="${build.postgresql.dir}" outfile="${build.postgresql.dir}/iplike">
      <compiler name="gcc">
        <compilerarg value="-shared"/>
        <compilerarg value="-fpic"/>
      </compiler>
      <linker name="gcc"/>
      <fileset dir="${build.postgresql.dir}" includes="iplike.c"/>
      <includepath path="${build.postgresql.include.dir}/server"/>
    </cc>
  </target>

 <!-- tests -->

 <target name="test.jsp" depends="install.jsp"
	description="compile the JSPs" unless="wasrpm">
  <mkdir dir="${root.build}/jspsource"/>
  <mkdir dir="${root.build}/jsp"/>
  <exec executable="/bin/sh">
   <arg value="${root.source}/jspcompile.sh"/>
   <arg value="${root.build}/jsp-java"/>
   <arg value="${root.build}/jsp-class"/>
   <arg value="${install.servlets}"/>
  </exec>
 </target>

 <!-- java build -->

 <target name="compile.java.test" depends="init,sources" unless="compile.java.test.is.uptodate">
  <mkdir dir="${root.build.classes}"/>
  <javac destdir="${root.build.classes}"
         debug="${opennms.debug}"
         optimize="${opennms.optimize}"
         verbose="${opennms.verbose}"
         deprecation="${opennms.deprecation}">
   <src>
    <path refid="sources.java.path"/>
    <pathelement path="${root.source}/tests/src"/>
   </src>
   <include name="**/*.java"/>
  </javac>
  <copy todir="${root.build.classes}">
   <fileset dir="${root.build}/sablecc">
    <include name="**/*.dat"/>
   </fileset>
  </copy>
  <property name="compile.java.is.uptodate" value="true"/>
  <property name="compile.java.test.is.uptodate" value="true"/>
 </target>

 <!-- JAR targets -->
 <target name="jar" depends="opennms_core.jar,opennms_joesnmp.jar,opennms_web.jar,opennms_common.jar,opennms_services.jar" description="create jar files"/>
 
 <target name="jar.copyxml" depends="init">
  <mkdir dir="${root.build}/opennms/xmlfiles"/>
  <copy todir="${root.build}/opennms/xmlfiles">
   <fileset dir="${root.source}/src/services">
    <include name="**/*.xml"/>
   </fileset>
  </copy>
 </target>

 <target name="jar.copyconfig" depends="init">
  <mkdir dir="${root.build}/opennms/configfiles"/>
  <copy todir="${root.build}/opennms/configfiles">
   <fileset dir="${root.source}/etc"/>
  </copy>
 </target>

 <target name="opennms_core.jar" depends="prep,java.compile">
  <mkdir dir="${build.jar.dir}"/>
  <jar jarfile="${build.jar.dir}/opennms_core.jar">
   <fileset dir="${build.classes.dir}" includesfile="${core.source.dir}/classlist"/>
  </jar>
 </target>
 
 <target name="opennms_joesnmp.jar" depends="prep,java.compile">
  <mkdir dir="${build.jar.dir}"/>
  <jar jarfile="${build.jar.dir}/opennms_joesnmp.jar">
   <fileset dir="${build.classes.dir}" includesfile="${joesnmp.source.dir}/classlist"/>
  </jar>
 </target>

 <target name="opennms_services.jar" depends="prep,java.compile">
  <mkdir dir="${build.jar.dir}"/>
  <jar jarfile="${build.jar.dir}/opennms_services.jar">
   <fileset dir="${build.classes.dir}" includesfile="${services.source.dir}/classlist"/>
  </jar>
 </target>

 <target name="opennms_web.jar" depends="prep,java.compile">
  <mkdir dir="${build.jar.dir}"/>
  <jar jarfile="${build.jar.dir}/opennms_web.jar">
   <fileset dir="${build.classes.dir}" includesfile="${web.source.dir}/classlist"/>
  </jar>
 </target>

 <!-- Ugly hack, jar files should be restructured to not depend on classlist files -->
 <target name="opennms_common.jar" depends="prep,java.compile">
  <mkdir dir="${build.jar.dir}"/>
  <jar jarfile="${build.jar.dir}/opennms_common.jar"> 
   <fileset dir="${build.classes.dir}">
    <patternset>
     <excludesfile name="${core.source.dir}/classlist"/>
     <excludesfile name="${joesnmp.source.dir}/classlist"/>
     <excludesfile name="${services.source.dir}/classlist"/>
     <excludesfile name="${web.source.dir}/classlist"/>
    </patternset>
   </fileset>
  </jar>
 </target>

 <!-- DOCS targets -->
 <target name="docs" depends="javadoc.docs,docs.html" description="Build javadoc and manuals"/>
 
 <target name="javadoc.docs" depends="prep,sources,javadoc.docs.uptodate"
  unless="javadoc.docs.uptodate">
  <mkdir dir="${build.api.dir}"/>
  <!-- only set failonerror to false temporarily (until javadocs can be fixed) -->
  <javadoc destdir="${build.api.dir}"
   packagenames="HelpFrame.*,ToolTipTree.*,org.opennms.*"
   author="true"
   version="true"
   use="true"
   private="true"
   windowtitle="OpenNMS API"
   doctitle="OpenNMS API ${product.version}"
   header="OpenNMS API ${product.version}"
   footer="OpenNMS API ${product.version}"
   bottom="Generated by ${user.name} on ${TODAY} ${TSTAMP}."
   splitindex="true"
   failonerror="false"
   maxmemory="128m" >
  <sourcepath>
   <path refid="sources.java.path"/>
  </sourcepath>
  </javadoc>
 </target>

 <target name="javadoc.docs.uptodate" depends="prep">
  <dependset>
   <srcfileset dir="${core.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <srcfileset dir="${joesnmp.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <srcfileset dir="${postgresql.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <srcfileset dir="${report.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <srcfileset dir="${services.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <srcfileset dir="${web.source.dir}">
    <include name="**/*.java"/>
   </srcfileset>
   <targetfileset dir="${build.api.dir}">
    <include name="**/*.html"/>
    <include name="package-list"/>
    <include name="stylesheet.css"/>
    <include name="resources/inherit.gif"/>
   </targetfileset>
  </dependset>
  <condition property="javadoc.docs.uptodate">
   <available file="${build.api.dir}/index.html" type="file"/>
  </condition>
 </target>

 <target name="docs.filter" depends="init">
  <mkdir dir="${root.build}/docs.filter"/>
  <copy todir="${root.build}/docs.filter" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/docs"/>
  </copy>
 </target>

 <target name="docs.html" depends="init,docs.filter">
  <mkdir dir="${root.build}/docs"/>
  <style basedir="${root.build}/docs.filter"
	destdir="${root.build}/docs"
	style="${root.build}/docs.filter/xsl/man2html.xsl"
	includes="*/book.xml"
	/>
 </target>
 
 <target name="docs.fot.uptodate" depends="init">
  <uptodate property="fot.is.uptodate" targetfile="${root.build}/work/docs/releasenotes/book.fot">
   <srcfiles dir="${root.source}/docs">
    <include name="**/book.xml"/>
    <include name="**/bookinfo.xml"/>
    <include name="**/preface.xml"/>
    <include name="**/chap*.xml"/>
   </srcfiles>
  </uptodate>
 </target>

 <target name="docs.fot" depends="init,docs.filter,docs.fot.uptodate" unless="fot.is.uptodate">
  <mkdir dir="${root.build}/docs"/>
  <style basedir="${root.build}/docs.filter"
	destdir="${root.build}/docs"
	style="${root.build}/docs.filter/xsl/docbook/fo/docbook.xsl"
	includes="**/book.xml"
	classpath="${root.source}/lib/xalan231.jar"
	extension=".fot"
	/>
 </target>

 <target name="docs.pdf" depends="init,docs.fot">
  <apply executable="${java.home}/bin/java" dir="${root.build}/docs">
   <arg line="-classpath '${root.source}/lib/fop0203.jar:${root.source}/lib/batik.jar:${java.class.path}' org.apache.fop.apps.Fop"/>
   <arg value="-fo"/>
   <srcfile/>
   <arg value="-pdf"/>
   <targetfile/>
   <fileset dir="${root.build}/docs">
    <include name="**/*.fot"/>
   </fileset>
   <mapper type="glob" from="*.fot" to="work/docs/*.pdf"/>
  </apply>
 </target>
 
 <!-- copy web UI JSPs to the webapp directory -->
 <target name="install.jsp" depends="init">
  <mkdir dir="${install.servlets}"/>
  <copy todir="${install.servlets}" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/src/web/web">
    <include name="**/*"/>
    <exclude name="**/*.jar"/>
    <exclude name="**/*.png"/>
    <exclude name="**/*.jpg"/>
    <exclude name="**/*.gif"/>    
   </fileset>
  </copy>
  <copy todir="${install.servlets}" filtering="no">
   <fileset dir="${root.source}/src/web/web">
    <include name="**/*.jar"/>
    <include name="**/*.png"/>
    <include name="**/*.jpg"/>
    <include name="**/*.gif"/>        
   </fileset>
  </copy>
 </target>

 <!-- copy web UI to the webapp directory -->
 <target name="install.servlet" depends="init,jar,install.jsp">
  <mkdir dir="${install.servlets}/WEB-INF"/>
  <copy todir="${install.servlets}/WEB-INF" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/src/web/etc">
    <include name="**/*"/>
   </fileset>
  </copy>
  <mkdir dir="${install.servlets}/WEB-INF/lib"/>
  <copy todir="${install.servlets}/WEB-INF/lib" filtering="no">
   <fileset dir="${root.source}/lib">
    <patternset refid="web.jars"/>    
   </fileset>
   <fileset dir="${install}/lib">
    <include name="opennms_*.jar" />
   </fileset>
  </copy>
 </target>

</project>

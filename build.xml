<?xml version="1.0"?>
 
<!--=================================================================
 
   Build file for OpenNMS
 
==================================================================== -->
 
<project name="opennms" default="usage" basedir=".">
 
 <!-- top-level initialization -->
 
 <target name="init" depends="init.setup,init.bb-global,init.opennms-global"/>

 <target name="init.opennms-global" if="opennms-global.exists">
  <filter filtersfile="${user.home}/.${ant.project.name}-global.properties"/>
 </target>

 <target name="init.bb-global" if="bb-global.exists">
  <filter filtersfile="${user.home}/.bb-global.properties"/>
 </target>

 <target name="init.setup" unless="init.done">
  <tstamp/>
  <taskdef name="if" classname="org.opennms.ant.If"/>
  <taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc"/>

  <!-- set properties -->
  <property file="${user.home}/.bb-global.properties"/>
  <property file="${user.home}/.${ant.project.name}-global.properties"/>
  <property file="${root.source}/build.properties"/>
  <property environment="env"/>
  <property name="install" value="${root.installprefix}${root.install}"/>
  <property name="install.initdir" value="${root.installprefix}${root.install.initdir}"/>
  <property name="install.sbindir" value="${root.installprefix}${root.install.sbindir}"/>
  <property name="install.rrdtool" value="${root.installprefix}${root.install.rrdtool}"/>
  <property name="install.share" value="${root.installprefix}${root.install.share}"/>
  <property name="install.rrdtool" value="${root.installprefix}${root.install.rrdtool}"/>
  <property name="install.servlets" value="${root.installprefix}${root.install.servlets}"/>
  <property name="install.logs" value="${root.installprefix}${root.install.logs}"/>
  <property name="install.pid" value="${root.installprefix}${root.install.pid}"/>
  <if value="${opennms.snapshot}" regexp="^(true|yes)$">
   <thenProperty name="opennms.release.string" value="0.${DSTAMP}.${opennms.release}"/>
   <elseProperty name="opennms.release.string" value="${opennms.release}"/>
  </if>
  <property name="opennms.version.string" value="${opennms.version}-${opennms.release.string}"/>

  <if exists="${root.build}/rpm">
   <thenProperty name="wasrpm" value="true"/>
   <elseProperty name="wasrpm" value="false"/>
  </if>

  <condition property="rpm.tainted" value="true">
   <or>
    <equals arg1="${wasrpm}" arg2="true"/>
    <equals arg1="${isrpm}" arg2="true"/>
   </or>
  </condition>

  <if value="${rpm.tainted}" match="true">
   <thenProperty name="filter.overwrite" value="yes"/>
   <elseProperty name="filter.overwrite" value="no"/>
  </if>

  <!-- set filters -->
  <filter filtersfile="${root.source}/build.properties" />
  <filter token="install.log.dir" value="${root.install.logs}"/>
  <filter token="opennms.version.string" value="${opennms.version.string}"/>
  <filter token="opennms.release.string" value="${opennms.release.string}"/>
  <if isFile="${user.home}/.bb-global.properties">
   <thenProperty name="bb-global.exists" value="true"/>
  </if>
  <if isFile="${user.home}/.${ant.project.name}-global.properties">
   <thenProperty name="opennms-global.exists" value="true"/>
  </if>
  <filter token="root.source" value="${root.source}"/>
  <filter token="root.build" value="${root.build}"/>
  <filter token="root.install" value="${root.install}"/>
  <filter token="root.install.initdir" value="${root.install.initdir}"/>
  <filter token="root.install.sbindir" value="${root.install.sbindir}"/>
  <filter token="root.install.servlets" value="${root.install.servlets}"/>
  <filter token="root.install.share" value="${root.install.share}"/>
  <filter token="root.install.rrdtool" value="${root.install.rrdtool}"/>
  <filter token="root.install.postgresql" value="${root.install.postgresql}"/>
  <filter token="root.install.logs" value="${root.install.logs}"/>
  <filter token="root.install.pid" value="${root.install.pid}"/>
  <filter token="root.installprefix" value="${root.installprefix}"/>
  <filter token="relative.build" value="${relative.build}"/>
  <filter token="relative.install" value="${relative.install}"/>
  <filter token="relative.install.initdir" value="${relative.install.initdir}"/>
  <filter token="relative.install.sbindir" value="${relative.install.sbindir}"/>
  <filter token="relative.install.servlets" value="${relative.install.servlets}"/>
  <filter token="relative.install.share" value="${relative.install.share}"/>
  <filter token="relative.install.rrdtool" value="${relative.install.rrdtool}"/>
  <filter token="relative.install.postgresql" value="${relative.install.postgresql}"/>
  <filter token="relative.install.logs" value="${relative.install.logs}"/>
  <filter token="relative.install.pid" value="${relative.install.pid}"/>
  <filter token="install.database.driver" value="${install.database.driver}"/>
  <filter token="install.database.url" value="${install.database.url}"/>
  <filter token="install.database.user" value="${install.database.user}"/>
  <filter token="install.database.password" value="${install.database.password}"/>
  <filter token="ant.project.name" value="${ant.project.name}"/>
  <filter token="compile.soext" value="${compile.soext}"/>
  <filter token="compile.jniext" value="${compile.jniext}"/>
 
  <!-- init wrapup -->
  <antcall target="print.header"><param name="print.headertext" value="OpenNMS Main Build Initializing"/></antcall>
  <antcall target="print.debug"/>
  <property name="init.done" value="true"/>
 </target>
 
 <target name="print.header">
  <echo>
==============================================================================
${print.headertext}
==============================================================================
  </echo>
 </target>
 
 <target name="print.debug" if="debug">
  <echo>
  === Java ===
  JVM Version                  = ${java.fullversion}
  JAVA_HOME                    = ${env.JAVA_HOME}
  CLASSPATH                    = ${java.class.path}
  Ant Version                  = ${ant.version}

  === System ===
  OS Name                      = ${os.name}
  OS Version                   = ${os.version}
  User                         = ${user.name}
  Home Directory               = ${user.home}
  OpenNMS Version              = ${opennms.version.string}
  Compilation Defines          = ${compile.platform.define}

  === Build/Install Tools ===
  "cc" Executable              = ${compile.cc}
  "make" Executable            = ${compile.make}
  "ld" Executable              = ${compile.ld}
  "ld" Dynamic Flag            = ${compile.ld.dynamic}
  "ld" Static Flag             = ${compile.ld.static}
  "ld" Shared Flag             = ${compile.ld.shared}
  PostgreSQL Include Arguments = ${compile.postgresql.include}
  PostgreSQL Library Arguments = ${compile.postgresql.lib}
  RRDTool Include Arguments    = ${compile.rrdtool.include}
  RRDTool Library Arguments    = ${compile.rrdtool.lib}
  Other Library Arguments      = ${compile.otherlibs}

  === Build/Install Directories ===
  Build Working Directory      = ${relative.build}
  Class Working Directory      = ${relative.build.classes}
  Installation Directory       = ${relative.install}
  Installation Prefix          = ${relative.installprefix}
  init.d Directory             = ${relative.install.initdir}
  PostgreSQL Library Directory = ${relative.install.postgresql}
  RRDTool Library Directory    = ${relative.install.rrdtool}
  Shared Files Directory       = ${relative.install.share}
  Servlet Directory            = ${relative.install.servlets}
  Release Tarball Directory    = ${relative.release}
  </echo>
 </target>
 
 <target name="usage" depends="init" description="how to use this build file">
  <antcall target="print.header"><param name="print.headertext" value="OpenNMS Main Build Usage"/></antcall>
 
  <echo>
  all:          build everything (except documentation)
  install:      build "all", and install it in ${install}
  docs:         build javadoc and manuals
  release:      build a release (source and binary)
  info:         show information about this build instance
  rpm:          build an RPM package
  srpm:         build an RPM and a source RPM package
  </echo>
 
 </target>

 <!-- "meta" targets -->
 
 <target name="echo">
  <echo message="=== ${message} ==="/>
 </target>
 
 <target name="info" depends="init" description="print detailed information about your build parameters">
  <antcall target="print.debug"><param name="debug" value="true"/></antcall>
 </target>

 <target name="install"
	depends="install.lib,install.servlet,install.init,install.etc,install.usr.bin,install.bin,install.logs,install.share,install.contrib"
	description="build &quot;all&quot;, and install it in ${install}"/>
 <target name="all" depends="compile,jar" description="build everything (except documentation)"/>
 
 <target name="clean.do-rm" if="isunix">
  <exec executable="rm">
   <arg value="-rf"/>
   <arg value="${root.build}/rpm"/>
  </exec>
 </target>

 <target name="test" depends="compile.java.test,test.jsp"/>

 <target name="clean" depends="init">
  <condition property="isunix">
   <os family="unix"/>
  </condition>
  <antcall target="clean.do-rm"/>
  <delete includeEmptyDirs="true" failonerror="false">
   <fileset dir="${root.build}">
    <exclude name="tools/classes/org/opennms/ant/**/*.class"/>
   </fileset>
   <fileset dir="${root.source}/debian/opennms"/>
   <fileset dir="${root.source}">
    <include name="build-stamp"/>
    <include name="configure-stamp"/>
   </fileset>
  </delete>
 </target>

 <!-- !WARNING!  Undocumented because it removes your installation directory too... be careful! -->
 <target name="mrproper" depends="clean">
  <delete includeEmptyDirs="true" dir="${root.install}"/>
  <delete dir="${root.build}" includeEmptyDirs="true" failonerror="false"/>
 </target>

 <!-- patterns and sets -->
 
 <path id="path.sources">
  <pathelement path="${root.build}/castor"/>
  <pathelement path="${root.build}/sablecc"/>
  <pathelement path="src/core"/>
  <pathelement path="src/joesnmp"/>
  <pathelement path="src/services"/>
  <pathelement path="src/web/src"/>
  <pathelement path="src/report"/>
 </path>

 <patternset id="not.core"     excludesfile="${root.source}/src/core/classlist"/>
 <patternset id="not.joesnmp"  excludesfile="${root.source}/src/joesnmp/classlist"/>
 <patternset id="not.services" excludesfile="${root.source}/src/services/classlist"/>
 <patternset id="not.web"      excludesfile="${root.source}/src/web/classlist"/>

 <patternset id="not.run">
  <exclude name="nightly-build.pl"/>
  <exclude name="*.bat"/>
  <exclude name="opennms.init"/>
 </patternset>

 <patternset id="lib.jars">
  <include name="*.jar" />
  <exclude name="ant*.jar" />
  <exclude name="bsf*.jar" />
  <exclude name="fop0170.jar" />
  <exclude name="jakarta-regexp*.jar" />
  <exclude name="pylib*.jar" />
  <exclude name="sablecc*.jar" />
 </patternset>

 <patternset id="web.jars">
  <include name="castor*.jar" />
  <include name="fop0203.jar" />
  <include name="jms*.jar" />
  <include name="log4j*.jar" />
  <include name="postgresql*.jar" />
  <include name="regexp*.jar" />
  <include name="w3c*.jar" />
  <include name="xalan231.jar" />
  <include name="avalon-framework-4.0.jar" />
  <include name="logkit-1.0.jar" />
  <include name="batik.jar" />
  <include name="jcifs.jar" />
  <include name="ldap.jar" />
 </patternset>
 
 <!-- archive/package targets -->

 <target name="rpm" depends="init" description="build an RPM package">
  <if value="${rpm.sign}" match="true">
   <thenProperty name="rpm.sign.arg" value="--sign"/>
   <elseProperty name="rpm.sign.arg" value=""/>
  </if>
  <property name="root.rpm" value="${root.build}/rpm"/>
  <mkdir dir="${root.rpm}/BUILD"/>
  <mkdir dir="${root.rpm}/RPMS/i386"/>
  <mkdir dir="${root.rpm}/RPMS/i486"/>
  <mkdir dir="${root.rpm}/RPMS/i586"/>
  <mkdir dir="${root.rpm}/RPMS/i686"/>
  <mkdir dir="${root.rpm}/RPMS/athlon"/>
  <mkdir dir="${root.rpm}/RPMS/k6"/>
  <mkdir dir="${root.rpm}/RPMS/noarch"/>
  <mkdir dir="${root.rpm}/SOURCES"/>
  <mkdir dir="${root.rpm}/SPECS"/>
  <mkdir dir="${root.rpm}/SRPMS"/>
  <mkdir dir="${root.rpm}/tmp"/>
  <copy filtering="yes"   file="${root.source}/tools/packages/opennms/opennms.spec.in"
                        tofile="${root.rpm}/SPECS/opennms.spec" overwrite="yes" />
  <copy filtering="no" todir="${root.rpm}/SOURCES">
   <fileset dir="${root.source}/tools/packages/opennms">
    <include name="**/*.patch"/>
    <include name="**/*.patch.gz"/>
    <include name="**/*.patch.bz2"/>
   </fileset>
   <mapper type="flatten"/>
  </copy>
  <touch file="${root.rpm}/SOURCES/${ant.project.name}-source-${opennms.version.string}.tar.gz"/>
  <echo message="building RPM for OpenNMS version ${opennms.version.string}..."/>
  <exec dir="${root.rpm}" executable="rpm" failonerror="true">
   <arg value="-bb"/>
   <arg value="${root.rpm}/SPECS/opennms.spec"/>
   <arg value="--define"/>
   <arg value="platform ${rpm.platform}"/>
   <arg value="--define"/>
   <arg value="_topdir ${root.rpm}"/>
   <arg value="--define"/>
   <arg value="_tmppath ${root.rpm}/tmp"/>
   <arg value="--define"/>
   <arg value="snapshot ${opennms.snapshot}"/>
   <arg value="--define"/>
   <arg value="date ${DSTAMP}"/>
   <arg value="--define"/>
   <arg value="standalone 0"/>
   <arg value="--define"/>
   <arg value="builddocs ${rpm.builddocs}"/>
   <arg line="${rpm.sign.arg}"/>
  </exec>
 </target>
 
 <target name="srpm" depends="init,release.source" description="build an RPM and source RPM package">
  <if value="${rpm.sign}" match="true">
   <thenProperty name="rpm.sign.arg" value="--sign"/>
   <elseProperty name="rpm.sign.arg" value=""/>
  </if>
  <property name="root.rpm" value="${root.build}/rpm"/>
  <mkdir dir="${root.rpm}/BUILD"/>
  <mkdir dir="${root.rpm}/RPMS/i386"/>
  <mkdir dir="${root.rpm}/RPMS/i486"/>
  <mkdir dir="${root.rpm}/RPMS/i586"/>
  <mkdir dir="${root.rpm}/RPMS/i686"/>
  <mkdir dir="${root.rpm}/RPMS/athlon"/>
  <mkdir dir="${root.rpm}/RPMS/k6"/>
  <mkdir dir="${root.rpm}/RPMS/noarch"/>
  <mkdir dir="${root.rpm}/SOURCES"/>
  <mkdir dir="${root.rpm}/SPECS"/>
  <mkdir dir="${root.rpm}/SRPMS"/>
  <mkdir dir="${root.rpm}/tmp"/>
  <copy filtering="yes"   file="${root.source}/tools/packages/opennms/opennms.spec.in"
                        tofile="${root.rpm}/SPECS/opennms.spec" overwrite="${filter.overwrite}" />
  <copy filtering="no" todir="${root.rpm}/SOURCES">
   <fileset dir="${root.source}/tools/packages/opennms">
    <include name="**/*.patch"/>
    <include name="**/*.patch.gz"/>
    <include name="**/*.patch.bz2"/>
   </fileset>
   <fileset dir="${root.release}">
    <include name="${ant.project.name}-source-${opennms.version.string}.tar.gz"/>
   </fileset>
   <mapper type="flatten"/>
  </copy>
  <echo message="building RPM for OpenNMS version ${opennms.version.string}..."/>
  <exec dir="${root.rpm}" executable="rpm" failonerror="true">
   <arg value="-ba"/>
   <arg value="${root.rpm}/SPECS/opennms.spec"/>
   <arg value="--define"/>
   <arg value="platform ${rpm.platform}"/>
   <arg value="--define"/>
   <arg value="_topdir ${root.rpm}"/>
   <arg value="--define"/>
   <arg value="_tmppath ${root.rpm}/tmp"/>
   <arg value="--define"/>
   <arg value="snapshot ${opennms.snapshot}"/>
   <arg value="--define"/>
   <arg value="date ${DSTAMP}"/>
   <arg value="--define"/>
   <arg value="standalone 1"/>
   <arg value="--define"/>
   <arg value="builddocs ${rpm.builddocs}"/>
   <arg line="${rpm.sign.arg}"/>
  </exec>
 </target>
 
 <target name="release" depends="init,release.source,release.binary,release.docs"/>

 <target name="release.prepare.docs" depends="init,docs">
  <mkdir dir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/docs"/>
  <copy todir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/docs">
   <fileset dir="${root.build}/docs"/>
  </copy>
 </target>

 <target name="release.docs" depends="init,release.prepare.docs">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${opennms.version}-${opennms.release}/docs/"/>
  <delete file="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.tar"
	zipfile="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-docs-${opennms.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${opennms.version}-${opennms.release}/docs/"/>
  </zip>
 </target>

 <target name="release.prepare.source" depends="init">
  <mkdir dir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/source"/>
  <copy todir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/source">
   <fileset dir="${root.source}">
    <include name="**/*"/>
    <exclude name="${relative.build}/**"/>
    <exclude name="${relative.install}/**"/>
    <exclude name="${relative.install.servlets}/**"/>
    <exclude name="${relative.install.share}/**"/>
    <exclude name="${relative.install.postgresql}/**"/>
    <exclude name="${relative.install.rrdtool}/**"/>
    <exclude name="${relative.build.classes}/**"/>
    <exclude name="debian/opennms/**"/>
    <exclude name="CVSROOT/**"/>
    <exclude name="**/*.swp"/>
   </fileset>
  </copy>
 </target>
 
 <target name="release.source" depends="release.prepare.source">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${opennms.version}-${opennms.release}/source/"/>
  <delete file="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.tar"
        zipfile="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-source-${opennms.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${opennms.version}-${opennms.release}/source/"/>
  </zip>
 </target>

 <target name="release.prepare.binary" depends="init">
  <mkdir dir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/binary"/>
  <antcall target="install">
   <param name="install" value="${root.build}/opt/OpenNMS"/>
   <param name="prefix.install" value="/opt/OpenNMS"/>
   <param name="prefix.install.servlets" value="/opt/OpenNMS/webapps"/>
   <param name="prefix.installprefix" value="${root.build}"/>
  </antcall>
  <move todir="${root.build}/${ant.project.name}-${opennms.version}-${opennms.release}/binary">
   <fileset dir="${root.build}/opt/OpenNMS" includes="**/*"/>
  </move>
  <delete dir="${root.build}/opt" includeEmptyDirs="true"/>
 </target>

 <target name="release.binary" depends="release.prepare.binary">
  <mkdir dir="${root.release}"/>
  <tar tarfile="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.tar" basedir="${root.build}" longfile="gnu" includes="${ant.project.name}-${opennms.version}-${opennms.release}/binary/" />
  <delete file="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <gzip src="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.tar"
        zipfile="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.tar.gz"/>
  <delete file="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.tar"/>
  <zip zipfile="${root.release}/${ant.project.name}-binary-${opennms.version}-${opennms.release.string}.zip" basedir="${root.build}">
   <include name="${ant.project.name}-${opennms.version}-${opennms.release}/binary/"/>
  </zip>
 </target>

 <!-- installation targets -->

 <target name="install.usr.bin" depends="init" if="isrpm">
  <mkdir dir="${root.installprefix}/usr/bin"/>
  <echo file="${root.installprefix}/usr/bin/${ant.project.name}">#!/bin/sh

${root.install}/bin/opennms.sh $$@
  </echo>
 </target>

 <target name="install.bin" depends="init,copy.bin">
  <mkdir dir="${install}/bin"/>
  <copy todir="${install}/bin">
   <fileset dir="${root.build}/bin"/>
  </copy>
  <chmod perm="0755" parallel="false">
   <fileset dir="${install}/bin"/>
  </chmod>
 </target>

 <target name="install.init" depends="init">
  <copy file="${root.source}/tools/packages/opennms/opennms.init" tofile="${install.initdir}/opennms" filtering="yes" overwrite="${filter.overwrite}" />
 </target>

 <target name="install.etc" depends="init,copy.etc">
  <copy todir="${install}/etc">
   <fileset dir="${root.build}/etc"/>
  </copy>
 </target>

 <target name="install.contrib" depends="init,copy.contrib">
  <copy todir="${install}/contrib">
   <fileset dir="${root.build}/contrib"/>
  </copy>
 </target>

 <target name="install.lib" depends="init,compile.native,jar">
  <mkdir dir="${install}/lib"/>
  <mkdir dir="${install}/lib/updates"/>
  <echo file="${install}/lib/updates/README.updates">

=========================================================
This directory is ONLY for class file and jar updates
between releases of OpenNMS.

Do not put anything here that you may want to keep, they
will be DELETED upon an RPM upgrade to a new version of
OpenNMS as part of the post-install.
=========================================================

  </echo>
  <copy todir="${install}/lib">
   <fileset dir="${root.build}/jars" includes="*.jar" />
   <fileset dir="${root.build}/jicmp" includes="*.${compile.jniext}.*"/>
   <fileset dir="${root.build}/jrrd" includes="*.${compile.jniext}.*"/>
   <fileset dir="${root.build}/postgresql" includes="*.${compile.soext}.*"/>
   <fileset dir="${root.source}/lib">
    <patternset refid="lib.jars" />
   </fileset>
  </copy>

  <chmod perm="0755">
   <fileset dir="${install}/lib"/>
  </chmod>
  <chmod perm="0664">
   <fileset dir="${install}/lib">
    <include name="*.jar"/>
   </fileset>
  </chmod>
  <mkdir dir="${install}/lib/scripts"/>
  <copy todir="${install}/lib/scripts" filtering="yes">
   <fileset dir="${root.source}/tools/infrastructure">
    <include name="**/*.sh"/>
    <include name="**/*.pl"/>
   </fileset>
  </copy>
  <chmod perm="0755">
   <fileset dir="${install}/lib/scripts"/>
  </chmod>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjicmp.${compile.jniext}.${opennms.version} libjicmp.${compile.jniext}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjicmp.${compile.jniext}.${opennms.version} libjicmp.${compile.jniext}.${opennms.version.major}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjrrd.${compile.jniext}.${opennms.version} libjrrd.${compile.jniext}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf libjrrd.${compile.jniext}.${opennms.version} libjrrd.${compile.jniext}.${opennms.version.major}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf iplike.${compile.soext}.${opennms.version} iplike.${compile.soext}"/></exec>
  <exec executable="ln" dir="${install}/lib"><arg line="-sf iplike.${compile.soext}.${opennms.version} iplike.${compile.soext}.${opennms.version.major}"/></exec>
 </target>

 <target name="install.logs" depends="init">
  <mkdir dir="${install.logs}"/>
 </target>

 <target name="install.share" depends="init">
  <mkdir dir="${install.share}"/>
  <mkdir dir="${install.share}/reports"/>
  <mkdir dir="${install.share}/events"/>
  <mkdir dir="${install.share}/rrd"/>
 </target>

 <!-- token translation targets -->

 <target name="copy.bin" depends="init,compile.native.spoof">
  <mkdir dir="${root.build}/bin"/>
  <copy todir="${root.build}/bin" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/tools/run"/>
   <fileset dir="${root.source}/tools/contrib"/>
  </copy>
  <copy todir="${root.build}/bin" filtering="no" overwrite="${filter.overwrite}">
   <fileset dir="${root.build}/spoof">
    <exclude name="*.o"/>
   </fileset>
  </copy>
 </target>

 <target name="copy.etc" depends="init">
  <mkdir dir="${root.build}/etc"/>
  <copy todir="${root.build}/etc" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/etc">
    <include name="**/*"/>
    <exclude name="**/*.gif"/>
    <exclude name="**/*.jpg"/>
    <exclude name="**/*.png"/>
   </fileset>
   <fileset dir="${root.source}/src/postgresql" includes="*.sql"/>
  </copy>
  <copy todir="${root.build}/etc" filtering="no" overwrite="yes">
   <fileset dir="${root.source}/etc">
    <include name="**/*.gif"/>
    <include name="**/*.jpg"/>
    <include name="**/*.png"/>
   </fileset>
  </copy>
 </target>

 <target name="copy.contrib" depends="init">
  <mkdir dir="${root.build}/contrib"/>
  <copy todir="${root.build}/contrib" filtering="no" overwrite="yes">
   <fileset dir="${root.source}/contrib">
    <include name="**/*"/>
   </fileset>
  </copy>
 </target>

 <!-- compilation targets -->
 
 <target name="compile" depends="compile.java"
        description="compile all code" unless="compile.is.uptodate">
  <property name="compile.is.uptodate" value="true"/>
 </target>

 <target name="compile.java.sablecc.preproc.uptodate" depends="init">
  <uptodate property="sablecc.is.uptodate"
        targetfile="${root.build}/sablecc/org/opennms/netmgt/filter/parser/State.java">
   <srcfiles dir="${root.source}/src/services/org/opennms/netmgt/filter" includes="*.grammar"/>
  </uptodate>
  <if value="${sablecc.is.uptodate}" match="true">
   <then target="echo"><param name="message" value="SableCC is up to date"/></then>
  </if>
 </target>

 <target name="compile.java.sablecc.preproc" depends="init,compile.java.sablecc.preproc.uptodate" unless="sablecc.is.uptodate">
  <mkdir dir="${root.build}/sablecc"/>
  <sablecc src="${root.source}/src/services/org/opennms/netmgt/filter" outputdirectory="${root.build}/sablecc" includes="*.grammar" />
 </target>

 <target name="castor.uptodate" depends="init">
  <uptodate property="${castor.xsd}.is.uptodate"
	targetfile="${castor.output.path}/${castor.xsd.path}/${castor.xsd}.build">
   <srcfiles dir="${castor.xsd.path}" includes="${castor.xsd}"/>
  </uptodate>
 </target>
 <target name="castor.uptodate." if="${castor.xsd}.is.uptodate">
  <antcall target="echo"><param name="message" value="${castor.xsd} is up to date"/></antcall>
 </target>

 <target name="castor" depends="init,castor.uptodate,castor.uptodate." unless="${castor.xsd}.is.uptodate">
  <mkdir dir="${castor.output.path}/${castor.xsd.path}"/>
  <touch file="${castor.output.path}/${castor.xsd.path}/${castor.xsd}.build"/>
  <java classname="org.exolab.castor.builder.SourceGenerator">
   <arg value="-dest"/>
   <arg value="${castor.output.path}"/>
   <arg value="-types"/>
   <arg value="j2"/>
   <arg value="-f"/>
   <arg value="-package"/>
   <arg value="${castor.package}"/>
   <arg value="-i"/>
   <arg value="${castor.xsd.path}/${castor.xsd}"/>
  </java>
 </target>

 <target name="compile.java.castor.preproc" depends="init" unless="castor.is.uptodate">
  <antcall target="print.header"><param name="print.headertext" value="Making XSD-Generated Code"/></antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.xml.event"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/schema/xsd"/>
   <param name="castor.xsd" value="event.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.report.availability"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/schema/xsd"/>
   <param name="castor.xsd" value="availability_report.xsd"/>
  </antcall>	
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.xml.eventconf"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/schema/xsd"/>
   <param name="castor.xsd" value="eventconf.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.xml.rtc"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/schema/xsd"/>
   <param name="castor.xsd" value="rtceui.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.filter"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="database-schema.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.service"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="service-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.discovery"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="discovery-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.actiond"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="actiond-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.trapd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="trapd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.poller"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="poller-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.collectd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="collectd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.vulnscand"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="vulnscand-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.collectd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="datacollection-config.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.threshd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="threshd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.threshd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="thresholding-config.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.outage"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="outage-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.rtc"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="rtc-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.poller"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="poll-outages.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.dhcpd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="dhcpd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.eventd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="eventd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.capsd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="capsd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.notifd"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="notifd-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.users"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="users.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.views"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="views.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.categories"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="categories.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.groups"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="groups.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.destinationPaths"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="destinationPaths.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.notifications"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="notifications.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.notificationCommands"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="notificationCommands.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.archiver.events"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="events-archiver-configuration.xsd"/>
  </antcall>
  <antcall target="castor">
   <param name="castor.package" value="org.opennms.netmgt.config.viewsdisplay"/>
   <param name="castor.output.path" value="${root.build}/castor"/>
   <param name="castor.xsd.path" value="${root.source}/src/services/org/opennms/netmgt/config"/>
   <param name="castor.xsd" value="viewsdisplay.xsd"/>
  </antcall>  
 </target>

 <!-- tests -->

 <target name="test.jsp" depends="install.jsp"
	description="compile the JSPs" unless="wasrpm">
  <antcall target="print.header"><param name="print.headertext" value="Generating and Test Compiling the JSPs"/></antcall>
  <mkdir dir="${root.build}/jspsource"/>
  <mkdir dir="${root.build}/jsp"/>
  <exec executable="/bin/sh">
   <arg value="${root.source}/jspcompile.sh"/>
   <arg value="${root.build}/jsp-java"/>
   <arg value="${root.build}/jsp-class"/>
   <arg value="${install.servlets}"/>
  </exec>
 </target>

 <!-- java build -->

 <target name="compile.java.test" depends="init,compile.java.castor.preproc,compile.java.sablecc.preproc" unless="compile.java.test.is.uptodate">
  <mkdir dir="${root.build.classes}"/>
  <javac destdir="${root.build.classes}"
         debug="${opennms.debug}"
         optimize="${opennms.optimize}"
         verbose="${opennms.verbose}"
         deprecation="${opennms.deprecation}">
   <src>
    <path refid="path.sources"/>
    <pathelement path="${root.source}/tests/src"/>
   </src>
   <include name="**/*.java"/>
  </javac>
  <copy todir="${root.build.classes}">
   <fileset dir="${root.build}/sablecc">
    <include name="**/*.dat"/>
   </fileset>
  </copy>
  <property name="compile.java.is.uptodate" value="true"/>
  <property name="compile.java.test.is.uptodate" value="true"/>
 </target>

 <target name="compile.java" depends="init,compile.java.castor.preproc,compile.java.sablecc.preproc" unless="compile.java.is.uptodate">
  <mkdir dir="${root.build.classes}"/>
  <antcall target="print.header"><param name="print.headertext" value="Building Java Code"/></antcall>
  <javac
        destdir="${root.build.classes}"
        debug="${opennms.debug}"
        optimize="${opennms.optimize}"
        verbose="${opennms.verbose}"
        deprecation="${opennms.deprecation}">
   <src>
    <path refid="path.sources"/>
   </src>
   <include name="**/*.java"/>
   <exclude name="work/**"/>
  </javac>
  <copy todir="${root.build.classes}">
   <fileset dir="${root.build}/sablecc">
    <include name="**/*.dat"/>
   </fileset>
  </copy>
  <property name="compile.java.is.uptodate" value="true"/>
 </target>

 <!-- native build -->

 <target name="compile.native" depends="init,compile.native.spoof,compile.native.postgresql,compile.native.jicmp,compile.native.jrrd"/>

 <target name="compile.native.osx.check">
  <mkdir dir="${root.build}/spoof" />
  <condition property="isOSX">
   <and>
    <os family="mac" />
    <os family="unix" />
   </and>
  </condition>
 </target>

 <target name="compile.native.spoof" depends="init,compile.native.osx.check" unless="isOSX">
  <apply executable="${compile.cc}" dir="${root.source}/tools/spoof" failonerror="true"
	dest="${root.build}/spoof">
   <arg line="${compile.cflags} -DZERO_LENGTH_PACKET=1 -D${compile.platform.define} -c -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.source}/tools/spoof" includes="*.c"/>
   <mapper type="glob" from="*.c" to="*.o"/>
  </apply>
  <apply executable="${compile.cc}" dir="${root.source}/tools/spoof" failonerror="true"
	dest="${root.build}/spoof">
   <arg line="${compile.cflags} -D${compile.platform.define} -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.build}/spoof" includes="*.o"/>
   <mapper type="glob" from="*.o" to="*"/>
  </apply>
 </target>

 <target name="compile.native.postgresql" depends="init">
  <mkdir dir="${root.build}/postgresql"/>
  <apply executable="${compile.cc}" dir="${root.source}/src/postgresql" failonerror="true"
	dest="${root.build}/postgresql">
   <arg line="-fpic ${compile.cflags} -I${compile.postgresql.include} -I${compile.postgresql.include}/server -D${compile.platform.define} -c -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.source}/src/postgresql" includes="*.c"/>
   <mapper type="glob" from="*.c" to="*.o"/>
  </apply>
  <apply executable="${compile.ld}" dir="${root.build}/postgresql" failonerror="true"
	dest="${root.build}/postgresql">
   <arg line="${compile.ld.dynamic} ${compile.ld.shared} -L${compile.postgresql.lib} -o"/>
   <targetfile/>
   <srcfile/>
   <arg line="${compile.otherlibs}"/>
   <fileset dir="${root.build}/postgresql" includes="*.o"/>
   <mapper type="glob" from="*.o" to="*.${compile.soext}.${opennms.version}"/>
  </apply>
 </target>

 <target name="compile.native.jicmp.javah" depends="init,compile.java">
  <mkdir dir="${root.build}/jicmp"/>
  <javah class="org.opennms.protocols.icmp.IcmpSocket" classpath="${root.build.classes}"
	outputFile="${root.build}/jicmp/IcmpSocket.h"/>
 </target>

 <target name="compile.native.jicmp" depends="init,compile.native.jicmp.osx,compile.native.jicmp.unix" />

 <target name="compile.native.jicmp.osx" depends="init,compile.native.jicmp.javah" if="isOSX">
  <mkdir dir="${root.build}/jicmp"/>

  <!-- generate .so files -->
  <apply executable="${compile.cc}" dir="${root.build}/jicmp" failonerror="true" dest="${root.build}/jicmp">
   <arg line="-bundle -framework JavaVM -I/System/Library/Frameworks/JavaVM.framework/Headers -I${env.JAVA_HOME}/include -I${env.JAVA_HOME}/${compile.platform} -I${env.JAVA_HOME}/include/${compile.platform} -I${root.build}/jicmp -I. -D${compile.platform.define} -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.build}/jicmp" includes="*.c"/>
   <mapper type="glob" from="IcmpSocket.c" to="libjicmp.${compile.jniext}.${opennms.version}"/>
  </apply>
 </target>

 <target name="compile.native.jicmp.unix" depends="init,compile.native.jicmp.javah" unless="isOSX">
  <mkdir dir="${root.build}/jicmp"/>

  <!-- generate .o files -->
  <apply executable="${compile.cc}" dir="${root.build}/jicmp" failonerror="true" dest="${root.build}/jicmp">
   <arg line="${compile.cflags} -fpic -I${env.JAVA_HOME}/include -I/System/Library/Frameworks/JavaVM.framework/Headers -I${env.JAVA_HOME}/${compile.platform} -I${env.JAVA_HOME}/include/${compile.platform} -I${root.build}/jicmp -D${compile.platform.define} -c -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.source}/src/services/org/opennms/protocols/icmp" includes="*.c"/>
   <mapper type="glob" from="*.c" to="*.o"/>
  </apply>

  <!-- generate .so files -->
  <apply executable="${compile.ld}" dir="${root.build}/jicmp" failonerror="true" dest="${root.build}/jicmp">
   <arg line="${compile.ld.dynamic} ${compile.ld.shared} ${compile.otherlibs} -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.build}/jicmp" includes="*.o"/>
   <mapper type="glob" from="IcmpSocket.o" to="libjicmp.${compile.jniext}.${opennms.version}"/>
  </apply>
 </target>

 <target name="compile.native.jrrd.javah" depends="init,compile.java">
  <mkdir dir="${root.build}/jrrd"/>
  <javah class="org.opennms.netmgt.rrd.Interface" classpath="${root.build.classes}"
	outputFile="${root.build}/jrrd/rrd_jinterface.h"/>
 </target>

 <target name="compile.native.jrrd" depends="compile.native.jrrd.osx,compile.native.jrrd.unix" />

 <target name="compile.native.jrrd.osx" depends="init,compile.native.jrrd.javah" if="isOSX">
  <mkdir dir="${root.build}/jrrd"/>

  <!-- generate .so files -->
  <copy todir="${root.build}/jrrd">
   <fileset dir="${root.source}/src/services/org/opennms/netmgt/rrd" includes="*.c"/>
  </copy>
  <apply executable="${compile.cc}" dir="${root.build}/jrrd" failonerror="true" dest="${root.build}/jrrd">
   <arg line="-bundle -framework JavaVM -I/System/Library/Frameworks/JavaVM.framework/Headers -I${env.JAVA_HOME}/include -I${env.JAVA_HOME}/${compile.platform} -I${env.JAVA_HOME}/include/${compile.platform} -I${root.build}/jrrd -I${compile.rrdtool.include} -I. -L${compile.rrdtool.lib} -D${compile.platform.define} -lrrd -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.build}/jrrd" includes="*.c"/>
   <mapper type="glob" from="rrd_jinterface.c" to="libjrrd.${compile.jniext}.${opennms.version}"/>
  </apply>
 </target>

 <target name="compile.native.jrrd.unix" depends="init,compile.native.jrrd.javah" unless="isOSX">
  <mkdir dir="${root.build}/jrrd"/>

  <!-- generate .o files -->
  <apply executable="${compile.cc}" dir="${root.build}/jrrd" failonerror="true" dest="${root.build}/jrrd">
   <arg line="${compile.cflags} -fpic -I/System/Library/Frameworks/JavaVM.framework/Headers -I${env.JAVA_HOME}/include -I${env.JAVA_HOME}/${compile.platform} -I${env.JAVA_HOME}/include/${compile.platform} -I${root.build}/jrrd -I${compile.rrdtool.include} -D${compile.platform.define} -c -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.source}/src/services/org/opennms/netmgt/rrd" includes="*.c"/>
   <mapper type="glob" from="*.c" to="*.o"/>
  </apply>

  <!-- generate .so files -->
  <apply executable="${compile.ld}" dir="${root.build}/jrrd" failonerror="true" dest="${root.build}/jrrd">
   <arg line="${compile.ld.dynamic} ${compile.ld.shared} -L${compile.rrdtool.lib} -lrrd -o"/>
   <targetfile/>
   <srcfile/>
   <fileset dir="${root.build}/jrrd" includes="*.o"/>
   <mapper type="glob" from="rrd_jinterface.o" to="libjrrd.${compile.jniext}.${opennms.version}"/>
  </apply>
 </target>

 <!-- create JAR files -->
 
 <target name="jar.copyxml" depends="init">
  <mkdir dir="${root.build}/opennms/xmlfiles"/>
  <copy todir="${root.build}/opennms/xmlfiles">
   <fileset dir="${root.source}/src/services">
    <include name="**/*.xml"/>
   </fileset>
  </copy>
 </target>

 <target name="jar.copyconfig" depends="init">
  <mkdir dir="${root.build}/opennms/configfiles"/>
  <copy todir="${root.build}/opennms/configfiles">
   <fileset dir="${root.source}/etc"/>
  </copy>
 </target>

 <target name="jar.build" depends="init">
  <mkdir dir="${root.build}/jars"/>
  <jar jarfile="${root.build}/jars/${jarfile}.jar">
   <fileset dir="${root.build.classes}" includesfile="${root.source}/src/${pattern}/classlist"/>
  </jar>
 </target>
 
 <target name="jar" depends="init,compile.java,jar.copyxml,jar.copyconfig" description="create jar files">
  <mkdir dir="${root.build}/jars"/>
  <antcall target="jar.build">
   <param name="jarfile" value="opennms_core" />
   <param name="pattern" value="core" />
  </antcall>
  <antcall target="jar.build">
   <param name="jarfile" value="opennms_joesnmp" />
   <param name="pattern" value="joesnmp" />
  </antcall>
  <antcall target="jar.build">
   <param name="jarfile" value="opennms_services" />
   <param name="pattern" value="services" />
  </antcall>
  <antcall target="jar.build">
   <param name="jarfile" value="opennms_web" />
   <param name="pattern" value="web" />
  </antcall>

  <!-- jar anything that isn't caught and put it in jcommon -->
  <jar jarfile="${root.build}/jars/opennms_common.jar">
   <fileset dir="${root.build.classes}">
    <patternset refid="not.core"/>
    <patternset refid="not.joesnmp"/>
    <patternset refid="not.services"/>
    <patternset refid="not.web"/>        
   </fileset>
   <fileset dir="${root.build}/opennms/xmlfiles"/>
   <fileset dir="${root.build}/opennms/configfiles"/>
  </jar>
 </target>

 <!-- documentation -->

 <target name="docs" depends="docs.javadoc,docs.html" description="build documentation"/>
 
 <target name="docs.javadoc.uptodate">
  <uptodate property="javadoc.is.uptodate"
        targetfile="${root.build}/docs/javadoc/index.html">
   <srcfiles dir="${root.source}/src" includes="**/*.java"/>
  </uptodate>
  <if value="${javadoc.is.uptodate}" match="true">
   <then target="echo"><param name="message" value="JavaDOC is up to date"/></then>
  </if>
 </target>
 
 <target name="docs.javadoc"
	depends="init,compile.java.castor.preproc,compile.java.sablecc.preproc,docs.javadoc.uptodate"
	unless="javadoc.is.uptodate">
  <mkdir dir="${root.build}/docs/javadoc"/>
  <javadoc
        destdir="${root.build}/docs/javadoc"
        packagenames="HelpFrame.*,ToolTipTree.*,org.opennms.*"
        author="true"
        version="true"
        use="true"
        private="true"
        windowtitle="OpenNMS API"
        doctitle="OpenNMS API ${o.version.opennms}"
        header="OpenNMS API ${o.version.opennms}"
        footer="OpenNMS API ${o.version.opennms}"
        bottom="Generated by ${user.name} on ${TODAY} ${TSTAMP}."
        splitindex="true"
        failonerror="true"
        maxmemory="128m" >
   <sourcepath>
    <path refid="path.sources"/>
   </sourcepath>
   <link href="http://java.sun.com/j2se/1.3/docs/api/"/>
   <!-- <link href="http://jakarta.apache.org/log4j/docs/api/"/> broken -->
  </javadoc>
 </target>
 
 <target name="docs.filter" depends="init">
  <mkdir dir="${root.build}/docs.filter"/>
  <copy todir="${root.build}/docs.filter" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/docs"/>
  </copy>
 </target>

 <target name="docs.html" depends="init,docs.filter">
  <mkdir dir="${root.build}/docs"/>
  <style basedir="${root.build}/docs.filter"
	destdir="${root.build}/docs"
	style="${root.build}/docs.filter/xsl/man2html.xsl"
	includes="*/book.xml"
	/>
 </target>
 
 <target name="docs.fot.uptodate" depends="init">
  <uptodate property="fot.is.uptodate" targetfile="${root.build}/work/docs/releasenotes/book.fot">
   <srcfiles dir="${root.source}/docs">
    <include name="**/book.xml"/>
    <include name="**/bookinfo.xml"/>
    <include name="**/preface.xml"/>
    <include name="**/chap*.xml"/>
   </srcfiles>
  </uptodate>
  <if value="${fot.is.uptodate}" match="true">
   <then target="echo"><param name="message" value="FOT templates are up to date"/></then>
  </if>
 </target>

 <target name="docs.fot" depends="init,docs.filter,docs.fot.uptodate" unless="fot.is.uptodate">
  <mkdir dir="${root.build}/docs"/>
  <style basedir="${root.build}/docs.filter"
	destdir="${root.build}/docs"
	style="${root.build}/docs.filter/xsl/docbook/fo/docbook.xsl"
	includes="**/book.xml"
	classpath="${root.source}/lib/xalan231.jar"
	extension=".fot"
	/>
 </target>

 <target name="docs.pdf" depends="init,docs.fot">
  <apply executable="${java.home}/bin/java" dir="${root.build}/docs">
   <arg line="-classpath '${root.source}/lib/fop0203.jar:${root.source}/lib/batik.jar:${java.class.path}' org.apache.fop.apps.Fop"/>
   <arg value="-fo"/>
   <srcfile/>
   <arg value="-pdf"/>
   <targetfile/>
   <fileset dir="${root.build}/docs">
    <include name="**/*.fot"/>
   </fileset>
   <mapper type="glob" from="*.fot" to="work/docs/*.pdf"/>
  </apply>
 </target>
 
 <!-- copy web UI JSPs to the webapp directory -->
 <target name="install.jsp" depends="init">
  <mkdir dir="${install.servlets}"/>
  <copy todir="${install.servlets}" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/src/web/web">
    <include name="**/*"/>
    <exclude name="**/*.jar"/>
    <exclude name="**/*.png"/>
    <exclude name="**/*.jpg"/>
    <exclude name="**/*.gif"/>    
   </fileset>
  </copy>
  <copy todir="${install.servlets}" filtering="no">
   <fileset dir="${root.source}/src/web/web">
    <include name="**/*.jar"/>
    <include name="**/*.png"/>
    <include name="**/*.jpg"/>
    <include name="**/*.gif"/>        
   </fileset>
  </copy>
 </target>

 <!-- copy web UI to the webapp directory -->
 <target name="install.servlet" depends="init,jar,install.jsp">
  <mkdir dir="${install.servlets}/WEB-INF"/>
  <copy todir="${install.servlets}/WEB-INF" filtering="yes" overwrite="${filter.overwrite}">
   <fileset dir="${root.source}/src/web/etc">
    <include name="**/*"/>
   </fileset>
  </copy>
  <mkdir dir="${install.servlets}/WEB-INF/lib"/>
  <copy todir="${install.servlets}/WEB-INF/lib" filtering="no">
   <fileset dir="${root.source}/lib">
    <patternset refid="web.jars"/>    
   </fileset>
   <fileset dir="${install}/lib">
    <include name="opennms_*.jar" />
   </fileset>
  </copy>
 </target>

</project>

//
// This file is part of the OpenNMS(R) Application.
//
// OpenNMS(R) is Copyright (C) 2002-2003 The OpenNMS Group, Inc. All rights reserved.
// OpenNMS(R) is a derivative work, containing both original code, included code and modified
// code that was published under the GNU General Public License. Copyrights for modified
// and included code are below.
//
// OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
//
// Modifications:
//
// 2004 May 05: Switch from SocketChannel to Socket with connection timeout.
// 2004 Mar 23: Fixed an omission with RRD and null banners.
// 2003 Jul 21: Explicitly closed socket.
// 2003 Jul 18: Enabled retries for monitors.
// 2003 Jun 11: Added a "catch" for RRD update errors. Bug #748.
// 2003 Jan 31: Added the ability to imbed RRA information in poller packages.
// 2003 Jan 31: Cleaned up some unused imports.
// 2003 Jan 29: Added response times to certain monitors.
// 2002 Nov 14: Used non-blocking I/O socket channel classes.
//
// Original code base Copyright (C) 1999-2001 Oculan Corp. All rights reserved.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// For more information contact:
//      OpenNMS Licensing <license@opennms.org>
//      http://www.opennms.org/
//      http://www.opennms.com/
//
// Tab Size = 8
//

package org.opennms.netmgt.poller.monitors;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InterruptedIOException;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NoRouteToHostException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Level;
import org.opennms.netmgt.mock.MockMonitoredService;
import org.opennms.netmgt.model.PollStatus;
import org.opennms.netmgt.poller.Distributable;
import org.opennms.netmgt.poller.MonitoredService;
import org.opennms.netmgt.poller.NetworkInterface;
import org.opennms.netmgt.poller.NetworkInterfaceNotSupportedException;
import org.opennms.netmgt.utils.ParameterMap;

import org.metastatic.rsync.*;
import org.metastatic.rsync.v2.*;

/**
 * This class is designed to be used by the service poller framework to test the
 * availability of a generic TCP service on remote interfaces. The class
 * implements the ServiceMonitor interface that allows it to be used along with
 * other plug-ins by the service poller framework.
 * 
 * @author <A HREF="mailto:tarus@opennms.org">Tarus Balog </A>
 * @author <A HREF="mike@opennms.org">Mike </A>
 * @author Weave
 * @author <A HREF="http://www.opennms.org/">OpenNMS </A>
 * 
 */

@Distributable
final public class RsyncMonitor extends IPv4Monitor {

    /**
     * Default port.
     */
    private static final int DEFAULT_PORT = 873;

    /**
     * Default retries.
     */
    private static final int DEFAULT_RETRY = 0;

    /**
     * Default timeout. Specifies how long (in milliseconds) to block waiting
     * for data from the monitored interface.
     */
    private static final int DEFAULT_TIMEOUT = 3000; // 3 second timeout on
                                                        // read()

    /**
     * Poll the specified address for service availability.
     * 
     * During the poll an attempt is made to connect on the specified port. If
     * the connection request is successful, the banner line generated by the
     * interface is parsed and if the banner text indicates that we are talking
     * to Provided that the interface's response is valid we set the service
     * status to SERVICE_AVAILABLE and return.
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * @throws java.lang.RuntimeException
     *             Thrown if the interface experiences errors during the poll.
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        //
        // Process parameters
        //

        //
        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_IPV4)
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        // Port
        //
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);

        // File
        String path = (String)parameters.get("path");

        // Get the address instance.
        //
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();

        if (log().isDebugEnabled())
            log().debug("poll: address = " + ipv4Addr.getHostAddress() + ", port = " + port + ", " + tracker);

        PollStatus serviceStatus = PollStatus.unavailable();

        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {
            Socket socket = null;
            try {
                
                tracker.startAttempt();

                socket = new Socket();
                socket.connect(new InetSocketAddress(ipv4Addr, port), tracker.getConnectionTimeout());
                socket.setSoTimeout(tracker.getSoTimeout());
                log().debug("RsyncMonitor: connected to host: " + ipv4Addr + " on port: " + port);

                // We're connected, so upgrade status to unresponsive
                serviceStatus = PollStatus.unresponsive();

                MultiplexedInputStream in = new MultiplexedInputStream(new BufferedInputStream(socket.getInputStream()), false);
                MultiplexedOutputStream out = new MultiplexedOutputStream(new BufferedOutputStream(socket.getOutputStream()), false);
                if (in == null || out == null) {
                	break;
                }
            	Statistics stats = new Statistics();
                in.setStats(stats);
                out.setStats(stats);
                Util.writeASCII(out, Client.RSYNCD_GREETING + Client.PROTOCOL_VERSION + '\n');
                out.flush();
                String greeting = Util.readLine(in);
                System.err.println("greeting = " + greeting);
                if (!greeting.startsWith(Client.RSYNCD_GREETING)) {
                	serviceStatus = logDown(Level.ERROR, "unknown greeting: " + greeting);
                	break;
                }
                int remoteVersion = -1;
                try {
                    remoteVersion = Integer.parseInt(greeting.substring(Client.RSYNCD_GREETING.length()));
                } catch (NumberFormatException nfe) {
                	serviceStatus = logDown(Level.ERROR, "unable to parse RSYNCD version in greeting: " + greeting);
                	break;
                }
                System.err.println("remote version = " + remoteVersion);
                
                if (remoteVersion < Client.MIN_PROTOCOL_VERSION || remoteVersion > Client.MAX_PROTOCOL_VERSION) {
                	serviceStatus = logDown(Level.WARN, "unhandled protocol version " + remoteVersion);
                	break;
                }
                System.err.println("remote version is OK");

                String line = null;
                String module = path;
                if (module.indexOf('/') > 0) {
                	module = module.substring(0, module.indexOf('/'));
                }
                Util.writeASCII(out, module + '\n');
                out.flush();
                
                if ((line = Util.readLine(in)) == null) {
                	serviceStatus = logDown(Level.ERROR, "did not receive server startup line");
                	break;
                }
                System.err.println("read line = " + line);

                if (line.startsWith(Client.RSYNCD_AUTHREQD)) {
                	serviceStatus = logDown(Level.WARN, "rsync authorization not implemented");
                	break;
                }
                if (line.equals(Client.RSYNCD_EXIT)) {
                	serviceStatus = logDown(Level.WARN, "rsync exited without data");
                	break;
                }
                if (line.startsWith(Client.AT_ERROR)) {
                	serviceStatus = logDown(Level.ERROR, "rsync returned an error: " + line);
                	break;
                }

                LinkedList<String> argv = new LinkedList<String>();
                argv.add("--server");
                argv.add("--sender");
                argv.add(".");
                argv.add(path);

                System.err.println("writing " + argv);
                for (String s : argv) {
                	Util.writeASCII(out, s + "\n");
                }
                Util.writeASCII(out, "\n");
                out.flush();

            	Configuration config = new Configuration();
                config.weakSum = new Checksum32();
                try {
                    Security.addProvider(new JarsyncProvider());
                    config.strongSum = MessageDigest.getInstance("BrokenMD4");
                } catch (NoSuchAlgorithmException nsae) {
                    System.err.println("RsyncMonitor: could not create MD4 instance:");
                    nsae.printStackTrace();
                    break;
                }
                config.strongSumLength = 2;
                config.blockLength = Constants.BLOCK_LENGTH;

                config.checksumSeed = new byte[4];
                in.read(config.checksumSeed);
                System.err.println("checksum = " + Util.toHexString(config.checksumSeed));

                stats.total_read = 0;
                stats.total_written = 0;

//                if (remoteVersion >= 23) {
//                	in.setMultiplex(true);
//                }

                FileList flist = new FileList(in, out, remoteVersion, false, new Options());
                flist.setStatistics(stats);
                final List<FileInfo> files = flist.receiveFileList();
                System.err.println("read file list");
                stats.flist_size = (int) stats.total_read;
                Collections.sort(files, new Comparator<FileInfo>() {
					public int compare(FileInfo a, FileInfo b) {
						return a.filename().compareTo(b.filename());
					}
				});
                for (FileInfo f : files) {
                	System.err.println(f);
                }
				out.writeInt(-1); // End generator phase 0.
				out.flush();
				in.readInt(); // End receiver phase 0.
				out.writeInt(-1); // End generator phase 1.
				out.flush();
				in.readInt(); // End receiver phase 1.
				if (remoteVersion >= 24) {
					out.writeInt(-1); // Final goodbye.
					out.flush();
				}
				// return readStats();
                
                /*
				 * Client.setupSocket(path, new String[](), 0);
				 * 
				 * if (strBannerMatch == null || strBannerMatch.length() == 0 ||
				 * strBannerMatch.equals("*")) { serviceStatus =
				 * PollStatus.available(tracker.elapsedTimeInMillis()); break; }
				 * 
				 * BufferedReader rdr = new BufferedReader(new
				 * InputStreamReader(socket.getInputStream()));
				 *  // // Tokenize the Banner Line, and check the first // line
				 * for a valid return. // String response = rdr.readLine();
				 * double responseTime = tracker.elapsedTimeInMillis();
				 * 
				 * if (response == null) continue; if (log().isDebugEnabled()) {
				 * log().debug("poll: banner = " + response); log().debug("poll:
				 * responseTime= " + responseTime + "ms"); }
				 * 
				 * if (response.indexOf(strBannerMatch) > -1) { serviceStatus =
				 * PollStatus.available(responseTime); } else serviceStatus =
				 * PollStatus.unavailable("Banner: '"+response+"' does not
				 * contain match string '"+strBannerMatch+"'");
				 * 
				 */
            } catch (NoRouteToHostException e) {
            	serviceStatus = logDown(Level.WARN, "No route to host exception for address " + ipv4Addr.getHostAddress(), e);
                break; // Break out of for(;;)
            } catch (InterruptedIOException e) {
            	serviceStatus = logDown(Level.DEBUG, "did not connect to host with " + tracker);
            } catch (ConnectException e) {
            	serviceStatus = logDown(Level.DEBUG, "Connection exception for address: " + ipv4Addr, e);
            } catch (IOException e) {
            	serviceStatus = logDown(Level.DEBUG, "IOException while polling address: " + ipv4Addr, e);
			} finally {
                try {
                    // Close the socket
                    if (socket != null)
                        socket.close();
                } catch (IOException e) {
                    e.fillInStackTrace();
                    if (log().isDebugEnabled())
                        log().debug("poll: Error closing socket.", e);
                }
            }
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

    public static void main(String[] args) throws UnknownHostException {
		RsyncMonitor rsm = new RsyncMonitor();
		MonitoredService ms = new MockMonitoredService(0, "localhost", "127.0.0.1", "rsync");
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("port", "873");
		parameters.put("path", "test/");
		PollStatus ps = rsm.poll(ms, parameters);
		System.out.println("status = " + ps.getStatusName() + " (" + ps.getReason() + ")");
	}
}

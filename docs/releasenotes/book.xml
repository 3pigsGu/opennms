<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1/EN"
"../dtd/docbookx.dtd">
<book id="book" lang="en">
  <bookinfo id="bookinfo">
    <title>OpenNMS Release Notes</title>

    <subtitle>Information About OpenNMS Release @opennms-version@</subtitle>

    <authorgroup>
      <corpauthor>Tarus Balog, Ben Reed</corpauthor>
    </authorgroup>

    <pubdate>2003 September 4</pubdate>

    <pubsnumber>Revision: @opennms.version@</pubsnumber>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.1 or any later version published by the Free Software Foundation; with
      no Invariant Sections, with no Front-Cover Texts and with no Back-Cover
      Texts. A copy of the license is available at <ulink
      url="http://www.gnu.org/copyleft/fdl.html">http://www.gnu.org/copyleft/fdl.html</ulink>.</para>

      <para>OpenNMS and the OpenNMS logo are trademarks of <ulink url="???">Blast
      Internet Services, Inc.</ulink> All rights reserved.</para>
    </legalnotice>

    <copyright>
      <year>2003 Blast Internet Services, Inc.</year>
    </copyright>

    <corpname>Blast Internet Services, Inc.</corpname>

    <keywordset>
      <keyword>OpenNMS</keyword>

      <keyword>readme</keyword>

      <keyword>release</keyword>

      <keyword>notes</keyword>
    </keywordset>
  </bookinfo>

  <preface id="preface">
    <title>Preface</title>

    <subtitle>Acknowledgments and Copyrights</subtitle>

    <formalpara>
      <title>Copyrights</title>

      <para>The following copyrights are relevant to OpenNMS code or
      documentation:</para>
    </formalpara>

    <itemizedlist>
      <listitem>
        <para>Copyright © 2002-2003 Blast Internet Services, Inc. All rights
        reserved.</para>
      </listitem>

      <listitem>
        <para>Copyright © 2003 Tavve Software Company, Inc. All rights
        reserved.</para>
      </listitem>

      <listitem>
        <para>Copyright © 2003 Networked Knowledge Systems, Inc. All rights
        reserved.</para>
      </listitem>

      <listitem>
        <para>Copyright © 2002 Scott McCrory</para>
      </listitem>

      <listitem>
        <para>Copyright © 1999-2001 Oculan Corp. All rights reserved.</para>
      </listitem>

      <listitem>
        <para>Copyright © 1996-2001 PostgreSQL, Inc.</para>
      </listitem>

      <listitem>
        <para>Copyright © 1994 Regents of California, Inc.</para>
      </listitem>

      <listitem>
        <para>Copyright © 1994-2001 Sun Microsystems, Inc</para>
      </listitem>

      <listitem>
        <para>Copyright © 1994-2001 IBM Corporation</para>
      </listitem>

      <listitem>
        <para>Copyright © 2001 Microsoft Corporation</para>
      </listitem>

      <listitem>
        <para>Copyright © 2001 Netscape</para>
      </listitem>

      <listitem>
        <para>Copyright © 2001 Red Hat, Inc.</para>
      </listitem>

      <listitem>
        <para>Copyright © 1999-2001 ExoLab Group</para>
      </listitem>

      <listitem>
        <para>Copyright © 1999-2001 Apache Software Foundation</para>
      </listitem>

      <listitem>
        <para>Copyright © 1998-2001 The Mozilla Organization</para>
      </listitem>
    </itemizedlist>

    <formalpara>
      <title>Useful links for information</title>

      <para>The following URLs are relevant to OpenNMS code or documentation:</para>
    </formalpara>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://www.w3.org/TR/xsl/">XSLFO Spec, Oct 2000</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://www.ibiblio.org/xml/books/bible/updates/15.html">XSLFO
        Bible</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.xslinfo.com/">XSL Info Site</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.xml.org/">XML Organization</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.docbook.org/">Docbook Organization</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://www.oreilly.com/catalog/docbook/chapter/book/docbook.html">O&#39;Reilly&#39;s
        DocBook: The Definitive Guide</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.opennms.org/">OpenNMS.org</ulink> -
        OpenNMS web site</para>
      </listitem>

      <listitem>
        <para><ulink url="http://xml.apache.org/">apache.org</ulink> - home of
        Xerces, XML4J etc</para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.sun.com/">Sun</ulink> - home of JAVA</para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.w3.org/">W3C Organization</ulink> - home
        of XSLFO and XML</para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.postgresql.org/">PostgreSQL</ulink> -
        home of PostgreSQL</para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.sortova.com/">Blast Internet Services</ulink>
        - Commercial Services for OpenNMS</para>
      </listitem>
    </itemizedlist>
  </preface>

  <chapter id="chap1" label="1.">
    <title>Introduction</title>

    <subtitle>About This Release</subtitle>

    <para>OpenNMS 1.1.2 adds several new features and bug fixes. New features
    include a JDBC poller, a script-based poller and script-based event
    handler, as well as contributed support for a map.</para>

    <para>OpenNMS 1.1.1 is the next step towards the production 1.2 release.
    It contains a number of new features and bug fixes.</para>

    <para>OpenNMS 1.1 extends the work that was begun with 1.0 to make OpenNMS
    more powerful and easier to use. Almost all of the new functionality was
    suggested by current OpenNMS users. It is hoped that these improvements
    will prove useful, and will lead to even more suggestions on how to
    improve the product.</para>

    <para>OpenNMS 1.0.2 is a maintenance release that fixes several code
    issues.</para>

    <para>OpenNMS 1.0.1 is a maintenance release that fixes several code
    issues.</para>

    <para>Please, let us know if you have any problems at all at the <ulink
    url="http://bugzilla.opennms.org/">OpenNMS Bugzilla</ulink> page.</para>
  </chapter>

  <chapter id="chap2" label="2.">
    <title>What&#39;s New?</title>

    <subtitle>Changes in This OpenNMS</subtitle>

    <para>OpenNMS 1.1.0 represents a refinement of the functionality
    introduced in 1.0.0. The 1.1 tree is a development, or &#34;unstable&#34;
    tree, implementing a number of new features but without the testing that
    went into 1.0. When 1.1 is mature enough, it will become 1.2, the next
    production or &#34;stable&#34; release.</para>

    <sect1 id="chap2sect1" label="2.1.">
      <title>Changes in OpenNMS 1.1.2 and Above</title>

      <para>The following features were added in 1.1.2:</para>

      <bridgehead>Poller Improvements</bridgehead>

      <para>There are three new pollers available:</para>

      <para><emphasis role="bold">Ssh:</emphasis> Previously, the SSH service
      was polled and discovered using the generic TCP class. This worked fine,
      except that SSH expects a version to be sent with the query. This causes
      numerous logs, thus the TCP class was modified into an SSH class that
      sends the correct version string.</para>

      <para><emphasis role="bold">JDBC:</emphasis> The database pollers also
      use the TCP class to connect to well known ports. Jose Nunez Vicente
      Zuleta created a poller that uses the particular JDBC database driver to
      make a connection, get the system catelogs, and if successful, mark the
      database service as &#34;up&#34;. Since this requires a valid username
      and password that can access the database, it is not the default class,
      but it is pretty simple to set up.</para>

      <para>In order to automatically detect and monitor databases, a few
      changes need to be made to both the network and the OpenNMS
      configuration. First, be sure that the username and password you plan to
      use actually works from the OpenNMS server. This will involve changes to
      pg_hba.conf for PostgreSQL, and I am not sure about others.</para>

      <para>Second, you will need to insure that you have a jar file with the
      JDBC driver for your particular database. Copy it to $OPENNMS_HOME/lib
      (the one for PostgreSQL is already included).</para>

      <para>Okay, now you need to modify the capsd configuration to discover
      the service and modify the poller configuration to poll the service.</para>

      <para>capsd: Here&#39;s an example for Sybase:</para>

      <para><programlisting>&#60;protocol-plugin protocol=&#34;Sybase-JDBC&#34; class-name=&#34;org.opennms.netmgt.capsd.JDBCPlugin&#34; scan=&#34;on&#34;&#62;
        &#60;property key=&#34;user&#34; value=&#34;sa&#34;/&#62;
        &#60;property key=&#34;password&#34; value=&#34;XXXX&#34;/&#62;
        &#60;property key=&#34;retry&#34; value=&#34;3&#34;/&#62;
        &#60;property key=&#34;timeout&#34; value=&#34;5000&#34;/&#62;
        &#60;property key=&#34;driver&#34; value=&#34;com.sybase.jdbc2.jdbc.SybDriver&#34;/&#62;
        &#60;!-- jdbc:sybase:Tds::/ --&#62;
        &#60;property key=&#34;url&#34; value=&#34;jdbc:sybase:Tds:OPENNMS_JDBC_HOSTNAME:4100/tempdb&#34;/&#62;
&#60;/protocol-plugin&#62;</programlisting></para>

      <para>and one for MySql:<programlisting>&#60;protocol-plugin protocol=&#34;MySQL-JDBC&#34; class-name=&#34;org.opennms.netmgt.capsd.JDBCPlugin&#34; scan=&#34;on&#34;&#62;
        &#60;property key=&#34;user&#34; value=&#34;root&#34;/&#62;
        &#60;property key=&#34;password&#34; value=&#34;XXXX&#34;/&#62;
        &#60;property key=&#34;retry&#34; value=&#34;3&#34;/&#62;
        &#60;property key=&#34;timeout&#34; value=&#34;5000&#34;/&#62;
        &#60;property key=&#34;driver&#34; value=&#34;org.gjt.mm.mysql.Driver&#34;/&#62;
        &#60;!-- jdbc:mysql://[&#60;:3306&#62;]/ --&#62;
        &#60;property key=&#34;url&#34; value=&#34;jdbc:mysql://OPENNMS_JDBC_HOSTNAME:3306/mysql&#34;/&#62;
&#60;/protocol-plugin&#62;</programlisting></para>

      <para>and one for PostgreSQL:</para>

      <programlisting>&#60;protocol-plugin protocol=&#34;PostgreSQL-JDBC&#34; class-name=&#34;org.opennms.netmgt.capsd.JDBCPlugin&#34; scan=&#34;on&#34;&#62;
        &#60;property key=&#34;user&#34; value=&#34;opennms&#34;/&#62;
        &#60;property key=&#34;password&#34; value=&#34;opennms&#34;/&#62;
        &#60;property key=&#34;retry&#34; value=&#34;3&#34;/&#62;
        &#60;property key=&#34;timeout&#34; value=&#34;5000&#34;/&#62;
        &#60;property key=&#34;driver&#34; value=&#34;org.postgresql.Driver&#34;/&#62;
        &#60;!-- jdbc:postgresql:[[:&#60;5432&#62;/]] --&#62;
        &#60;property key=&#34;url&#34; value=&#34;jdbc:postgresql://OPENNMS_JDBC_HOSTNAME:5432/opennms&#34;/&#62; 
&#60;/protocol-plugin&#62;</programlisting>

      <para>Note that the service names for all three of these examples have
      &#34;-JDBC&#34; added to the end of their names. This means you can run
      them separately from the standard database protocols, or if you like,
      you can completely replace the standard protocols. In fact, if you wish,
      you can use the standard port check in capsd, and then use the JDBC
      poller configuration to do the actual polling.</para>

      <para>Here are the poller configuration examples:</para>

      <programlisting>    &#60;service name=&#34;Sybase-JDBC&#34; user-defined=&#34;false&#34; interval=&#34;6000&#34; status=&#34;on&#34;&#62;
        &#60;parameter key=&#34;user&#34; value=&#34;sa&#34;/&#62;
        &#60;parameter key=&#34;password&#34; value=&#34;XXXX&#34;/&#62;
        &#60;parameter key=&#34;timeout&#34; value=&#34;3000&#34;/&#62;
        &#60;parameter key=&#34;driver&#34; value=&#34;com.sybase.jdbc2.jdbc.SybDriver&#34;/&#62;
        &#60;!-- jdbc:sybase:Tds::/ --&#62;
        &#60;parameter key=&#34;url&#34; value=&#34;jdbc:sybase:Tds:OPENNMS_JDBC_HOSTNAME:4100/tempdb&#34;/&#62;
    &#60;/service&#62;</programlisting>

      <programlisting>    &#60;service name=&#34;MySQL-JDBC&#34; user-defined=&#34;false&#34; interval=&#34;6000&#34; status=&#34;on&#34;&#62;
        &#60;parameter key=&#34;user&#34; value=&#34;root&#34;/&#62;
        &#60;parameter key=&#34;password&#34; value=&#34;XXXX&#34;/&#62;
        &#60;parameter key=&#34;timeout&#34; value=&#34;3000&#34;/&#62;
        &#60;parameter key=&#34;driver&#34; value=&#34;org.gjt.mm.mysql.Driver&#34;/&#62;
        &#60;!-- jdbc:mysql://[&#60;:3306&#62;]/ --&#62;
        &#60;parameter key=&#34;url&#34; value=&#34;jdbc:mysql:// OPENNMS_JDBC_HOSTNAME:3306/mysql&#34;/&#62;
    &#60;/service&#62;</programlisting>

      <programlisting>   &#60;service name=&#34;PostgreSQL-JDBC&#34; user-defined=&#34;false&#34; interval=&#34;9000&#34; status=&#34;on&#34;&#62;
        &#60;parameter key=&#34;user&#34; value=&#34;opennms&#34;/&#62;
        &#60;parameter key=&#34;password&#34; value=&#34;opennms&#34;/&#62;
        &#60;parameter key=&#34;timeout&#34; value=&#34;9000&#34;/&#62;
        &#60;parameter key=&#34;driver&#34; value=&#34;org.postgresql.Driver&#34;/&#62;
        &#60;!-- jdbc:postgresql:[[:&#60;5432&#62;/]] --&#62;
        &#60;parameter key=&#34;url&#34; value=&#34;jdbc:postgresql://OPENNMS_JDBC_HOSTNAME:5432/opennms&#34;/&#62;
    &#60;/service&#62;</programlisting>

      <para>One more thing in the poller-configuration file, you&#39;ll need
      to add &#60;monitor&#62; tags at the bottom:</para>

      <programlisting>  &#60;monitor service=&#34;Sybase-JDBC&#34; class-name=&#34;org.opennms.netmgt.poller.JDBCMonitor&#34;/&#62;
  &#60;monitor service=&#34;MySQL-JDBC&#34; class-name=&#34;org.opennms.netmgt.poller.JDBCMonitor&#34;/&#62;
  &#60;monitor service=&#34;PostgreSQL-JDBC&#34; class-name=&#34;org.opennms.netmgt.poller.JDBCMonitor&#34;/&#62;</programlisting>

      <para>Hats off to Jose for this work.</para>

      <para><emphasis role="bold">General Purpose Script Poller:</emphasis>
      Bill Ayres has written a poller that will execute a script, and based on
      the response from that script it will mark the service as being
      &#34;up&#34; or &#34;down&#34;, called the &#34;General Purpose&#34; or
      &#34;Gp&#34; Poller. He has used it to monitor RADIUS servers, for
      example.</para>

      <para>GpPlugin and GpMonitor work much like TcpPlugin and TcpMonitor in
      that you can use them to define as many custom services as you need,
      each with a unique service name.</para>

      <para>GpPlugin and GpMonitor call an external script or program to test
      a particular service. The script will be passed the IP address of the
      interface OpenNMS is testing ( as --hostname [IP Address]), followed by
      the timeout (as --timeout [timeout]), followed by any optional arguments
      that may need to passed.</para>

      <para>The script is expected to return a string as standard output which
      is then compared to the banner property or parameter to determine
      success or failure of the test.</para>

      <para>The timeout is implemented in GpPlugin and GpMonitor. However,
      some scripts may want to know how long OpenNMS is going to wait for a
      reply, so the timeout value is passed to the script, and can be ignored
      by the script if it is not needed.</para>

      <para>GpPlugin and GpMonitor also check the exit status of the script or
      program. If it is not zero, then the test fails. They will also gather
      and log any standard error output from the script, but the presence of
      error output does not prevent the test from succeeding if the banner
      matches the standard output.</para>

      <para>Example poller parameters are shown below. All of these are
      optional except script, which is required, and will cause an exception
      to be logged if it&#39;s missing.</para>

      <para>Example plugin properties are also shown below. All of these are
      optional except script, which is required, and will cause an exception
      to be logged if it&#39;s missing.</para>

      <para>These programs use the exec method from Java&#39;s Runtime class.
      Exec is known to have pitfalls. (See <ulink url="???">When
      Runtime.exec() won&#39;t</ulink>) Also, exec doesn&#39;t have a built-in
      timeout feature. In deciding what to do about these shortcomings, Bill
      discovered that Scott McCrory has already done it with his ExecRunner
      class. ExecRunner and StreamGobbler are at <ulink url="???">Sourceforge</ulink>
      as part of <ulink url="???">Spumoni</ulink>.</para>

      <para>One more word about the timeout. ExecRunner expects the timeout in
      integer seconds, not milliseconds, and a value of zero means wait
      indefinitely. To avoid confusion, Bill maintained the OpenNMS practice
      of specifying the timeout in milliseconds. Before passing it on to
      ExecRunner, it gets converted to seconds in the following manner: Zero
      remains zero, 1 thru 1999 gets converted to 1 second, 2000 thru 2999
      -&#62; 2 seconds, 3000 thru 3999 -&#62; 3 seconds, etc.</para>

      <para>Included in contrib is a simple perl test script,
      <filename>gptest.pl</filename>, that is handy for testing, since
      it&#39;s easy to edit and change its behaviour.</para>

      <para>To implement Gp, add the following entries, substituting your
      information as needed.</para>

      <para>For capsd configuration:</para>

      <programlisting>&#60;protocol-plugin protocol=&#34;GPtest&#34; class-name=&#34;org.opennms.netmgt.capsd.GpPlugin&#34; scan=&#34;on&#34; user-defined=&#34;true&#34;&#62;
   &#60;property key=&#34;script&#34; value=&#34;/opt/OpenNMS/contrib/gptest.pl&#34;/&#62;
   &#60;property key=&#34;banner&#34; value=&#34;success&#34;/&#62;
   &#60;property key=&#34;args&#34; value=&#34;caps-arg1 caps-arg2&#34;/&#62;
   &#60;property key=&#34;timeout&#34; value=&#34;3000&#34;/&#62;
   &#60;property key=&#34;retry&#34; value=&#34;1&#34;/&#62;
&#60;/protocol-plugin&#62;</programlisting>

      <para>And for poller configuration:</para>

      <programlisting>&#60;service name=&#34;GPtest&#34; interval=&#34;300000&#34; user-defined=&#34;false&#34; status=&#34;on&#34;&#62;
   &#60;parameter key=&#34;script&#34; value=&#34;/opt/OpenNMS/contrib/gptest.pl&#34;/&#62;
   &#60;parameter key=&#34;banner&#34; value=&#34;successful&#34;/&#62;
   &#60;parameter key=&#34;args&#34; value=&#34;poll-arg1 poll-arg2&#34;/&#62;
   &#60;parameter key=&#34;retry&#34; value=&#34;1&#34;/&#62;
   &#60;parameter key=&#34;timeout&#34; value=&#34;2000&#34;/&#62;
   &#60;parameter key=&#34;rrd-repository&#34; value=&#34;/var/opennms/rrd/response&#34;/&#62;
   &#60;parameter key=&#34;ds-name&#34; value=&#34;GPtest&#34;/&#62;
&#60;/service&#62;</programlisting>

      <para>and the monitor service entry:</para>

      <programlisting>&#60;monitor service=&#34;GPtest&#34;   class-name=&#34;org.opennms.netmgt.poller.GpMonitor&#34;/&#62;</programlisting>

      <para>Hats off to Bill for this work, and to Scott for ExecRunner.</para>

      <bridgehead>Script Daemon</bridgehead>

      <para>Speaking of scripts, Jim Doble has written a daemon that will
      execute scripts based on events received or generated by OpenNMS, called
      ScriptD. This process, governed as usual from a configuration file,
      allows one to generally or specifically execute actions based on events
      in OpenNMS.</para>

      <para>The scripting language, as I understand it, is <ulink url="???">beanshell</ulink>.
      As Jim writes: <quote>You will notice that BeanShell is a lot like Java,
      but with some relaxed syntax. For example you don&#39;t have to define
      types for your variables, and attributes for which there are simple get
      methods can be accessed as properties (i.e. you can say event.uei or
      event.getUei() interchangably.) </quote></para>

      <para>There are 4 types of scripts that can be run: start-script,
      reload-script, stop-script, and event-script. When ScriptD starts it
      will run all of the commands in the <varname>&#60;start-script&#62;</varname>
      tags. Likewise, when ScriptD stops, it will run all of the commands in
      the <varname>&#60;stop-script&#62;</varname> tags. Also, there is a new
      event, <varname>uei.opennms.org/internal/reloadScriptConfig</varname>,
      which when received will run all of the <varname>&#60;reload-script&#62;</varname>
      tags.</para>

      <para>The final script type, <varname>&#60;event-script&#62;</varname>
      gets run when events are received. Event scripts can have one or more
      UEI elements, which specify the UEI&#39;s for which that script should
      run. If no UEI element is present, the script will run for all events.</para>

      <para>The scripts can make use of the <varname>SnmpTrapHelper</varname>
      class, which is a utility to make it easier to manipulate traps from a
      script.</para>

      <para>There is an example <filename>scriptd-configuration.xml
      </filename>file included in the <filename>$OPENNMS_HOME/etc</filename>
      directory.</para>

      <para>If you want to forward all SNMP traps to another machine as an
      SNMP trap, you would use the following event script:</para>

      <programlisting>        &#60;event-script language=&#34;beanshell&#34;&#62;

                event = bsf.lookupBean(&#34;event&#34;);

                if (event.snmp != null) {
                        log.debug(&#34;forwarding a trap&#34;);
                        snmpTrapHelper.forwardTrap(event, &#34;10.1.1.1&#34;, 162);
                }

        &#60;/event-script&#62;</programlisting>

      <para>This will forward the trap to 10.1.1.1, port 162. Note that the
      event will have SNMP information if the event is indeed an SNMP trap.
      Since internal OpenNMS events do not, you could use that to forward
      OpenNMS events as an SNMP trap to another system:</para>

      <programlisting>&#60;event-script language=&#34;beanshell&#34;&#62;

        event = bsf.lookupBean(&#34;event&#34;);

        if (event.snmp == null)
        {

                try {

                log.debug(&#34;Forwarding an OpenNMS event.&#34;);

                SnmpPduTrap trap = snmpTrapHelper.createV1Trap(&#34;.1.3.6.1.4.1.5813.1&#34;, &#34;10.1.1.16&#34;, 6, 1, 0);

                t_dbid = new Integer(event.dbid).toString();
                if (t_dbid != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.1&#34;, &#34;OctetString&#34;, &#34;text&#34;, t_dbid);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.1&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.distPoller != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.2&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.distPoller);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.2&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.creationTime != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.3&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.creationTime);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.3&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.masterStation != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.4&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.masterStation);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.4&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.uei != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.6&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.uei);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.6&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.source != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.7&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.source);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.7&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                t_nodeid = new Long(event.nodeid).toString();
                if (t_nodeid != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.8&#34;, &#34;OctetString&#34;, &#34;text&#34;, t_nodeid);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.8&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.time != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.9&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.time);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.9&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.host != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.10&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.host);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.10&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                t_interface = event.getInterface();
                if (t_interface != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.11&#34;, &#34;OctetString&#34;, &#34;text&#34;, t_interface);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.11&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.snmphost != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.12&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.snmphost);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.12&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;forge.blast.com&#34;);
                if (event.service != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.13&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.service);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.13&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.descr != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.16&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.descr);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.16&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.severity != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.18&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.severity);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.18&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.pathoutage != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.19&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.pathoutage);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.19&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);
                if (event.operinstruct != null)
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.20&#34;, &#34;OctetString&#34;, &#34;text&#34;, event.operinstruct);
                else
                        snmpTrapHelper.addVarBinding(trap, &#34;.1.3.6.1.4.1.5813.2.20&#34;, &#34;OctetString&#34;, &#34;text&#34;, &#34;null&#34;);

                snmpTrapHelper.sendTrap(&#34;public&#34;, trap, &#34;10.1.1.15&#34;, 162);

                }

                catch (e) {
                    sw = new StringWriter();
                    pw = new PrintWriter(sw);
                    e.printStackTrace(pw);
                    log.debug(sw.toString());
                }
        }

        &#60;/event-script&#62;</programlisting>

      <para>This will send an newly defined OpenNMS trap with the important
      event information embedded as varbinds.</para>

      <para>If you wanted to limit the forwarded OpenNMS events to
      <varname>nodeLostService</varname> and <varname>nodeRegainedService</varname>,
      you can add a <varname>&#60;uei&#62;</varname> tag:</para>

      <programlisting>        &#60;event-script language=&#34;beanshell&#34;&#62;
                &#60;uei name=&#34;uei.opennms.org/nodes/nodeLostService&#34;/&#62;
                &#60;uei name=&#34;uei.opennms.org/nodes/nodeRegainedService&#34;/&#62;
</programlisting>

      <para>To the first part of the <varname>&#60;event-script&#62;</varname>
      tag.</para>

      <para>Hats off to Jim for this work.</para>

      <bridgehead>Maps</bridgehead>

      <para>Okay, let&#39;s get this out in the open. I don&#39;t care for
      maps in network management. Yes, they are nice looking, but truely
      useful maps cannot be automated, and the manual process of generating
      maps takes more time than they are worth.</para>

      <para>That said, my opinions don&#39;t mean much in this project (grin)
      and if someone is willing to put in some work and write solid code I am
      more than willing to accept it. Thus, Derek Glidden decided to go and
      write a mapping system for OpenNMS.</para>

      <para>This will display the nodes as icons, and the current availability
      is displayed in color underneath it. You can view it in a tree mode or
      just as a list of icons, and the image will automatically refresh. The
      parenting relationships have to be manually set.</para>

      <para>The image is built and displayed using Scalable Vector Graphics
      (SVG). I think this is a great decision, but the downside is that the
      only SVG viewer I was able to get to work was from Adobe for Internet
      Explorer on Windows. I was not able to get SVG to work with Mozilla or
      Safari (on Mac). Using the system on IE was very clean and fast.</para>

      <para>There is the option to convert the SVG image to a PNG image. This
      is extremely processor intensive, takes a long time on a network of any
      size, and often fails. It is not recommended.</para>

      <para>Scared yet? (grin)</para>

      <para>For these reasons I am treating the current map implementation as
      contributed code (i.e. not supported). It is hoped, however, that Derek
      and others will work to make more improvements to the system.</para>

      <para>Okay, to get started, read the <filename>map.disable</filename>
      file in <filename>$OPENNMS_HOME/etc</filename>. You will need to copy
      this file to <filename>map.enable</filename>. This will add a
      &#34;Map&#34; menu item in the WebUI.</para>

      <para>You will also have to make some changes to the tomcat4
      configuration. First, you need to set <varname>headless</varname> equal
      to <varname>true</varname>, and second you should probably increase the
      memory available to Tomcat (especially if you are trying to use the SVG
      to PNG transcoder). <varname>OutOfMemory</varname> exceptions in Tomcat
      are indicative of a too small memory setting when trying to render the
      map.</para>

      <para>I know this whole things sounds a bit negative, but that is no
      reflection on Derek&#39;s work. He wrote very clean code and I like the
      architecture (SVG especially) that he came up with. The icons are cool,
      too. So hats off to Derek.</para>

      <para>But I am bracing myself for the onslaught of questions like
      <quote>&#34;Can I add a background?&#34;</quote>, <quote>&#34;Can I
      change the icons based on systemOID?&#34;</quote>, and <quote>&#34;Can I
      make submaps?&#34;</quote>. Patience, please.</para>

      <bridgehead>Nice Little Things</bridgehead>

      <para>The following little changes and improvements have been made:</para>

      <itemizedlist>
        <listitem>
          <para>Added RFC2325 to the data collection configuration</para>
        </listitem>

        <listitem>
          <para>Added a &#34;bits&#34; report (to replace bytes) and made it
          the default report for KSC reports.</para>
        </listitem>

        <listitem>
          <para>Added the ability to define a &#34;null&#34; filter (can speed
          up OpenNMS starting)</para>
        </listitem>

        <listitem>
          <para>Added new Cisco and UCD-SNMP reports (Thanks Tony and Stuart)</para>
        </listitem>

        <listitem>
          <para>Added new trap definitions for IBM and Intel</para>
        </listitem>
      </itemizedlist>

      <bridgehead>Bugs</bridgehead>

      <para>As we move toward the next stable release of OpenNMS, a number of
      bugs have been fixed, including:</para>

      <itemizedlist>
        <listitem>
          <para>Added a check to handle null terminated strings in traps
          (Thanks Dave W.)</para>
        </listitem>

        <listitem>
          <para>Corrected issues with day/week/month/year buttons in WebUI on
          various browsers</para>
        </listitem>

        <listitem>
          <para>Changed the open count in notifications to reflect those for
          the user instead of the system</para>
        </listitem>

        <listitem>
          <para>Fixed a typo in <filename>mail.pl</filename> in the
          <filename>contrib</filename> directory</para>
        </listitem>

        <listitem>
          <para>Added a small fix to the HTTP and HTTPS monitors that could
          cause a <varname>ClassCastException</varname> (Thanks Jim)</para>
        </listitem>

        <listitem>
          <para>Added an ORDER BY statement to insure that categories reflect
          the correct values.</para>
        </listitem>

        <listitem>
          <para>Added code to explicitly close sockets in plugins and monitors
          (see the Known Issues below for Java 1.4.2)</para>
        </listitem>

        <listitem>
          <para>Bug 708: Fixed issues with viewing events when nodes are
          deleted</para>
        </listitem>

        <listitem>
          <para>Bug 715: Added security roles to <filename>web.xml</filename>
          (Thanks DJ)</para>
        </listitem>

        <listitem>
          <para>Bug 741: Fixed issues with the SNMP admin page and null
          <varname>issnmpprimary</varname> values.</para>
        </listitem>

        <listitem>
          <para>Bug 748: Added code to catch <varname>rrdUpdate</varname>
          exceptions that could cause false <varname>nodeDown</varname> events</para>
        </listitem>

        <listitem>
          <para>Bug 752: Fixed a bug that caused certain rules to match all
          events</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="chap2sect2" label="2.2.">
      <title>Changes in OpenNMS 1.1.1 and Above</title>

      <para>The following features were added in 1.1.1:</para>

      <bridgehead>Trap Handling</bridgehead>

      <para>SNMP Traps will now be associated with nodes if the IP address in
      the trap matches a known IP address in the database.</para>

      <para>If the IP Address is not known, OpenNMS will generate a newSuspect
      event to attempt to discover the device. This behavior can be disabled
      in the trapd-configuration.xml file.</para>

      <para>Added new trap definitions for Dell OpenManage, Foundry Networks
      and ADIC. Also added an updated mib2opennms program which improves the
      look of the output.</para>

      <bridgehead>Reports</bridgehead>

      <para>Added a new custom reporting module which allows one to create and
      save custom performance reports. It is called the Key SNMP Custom (KSC)
      Reporting Tool.</para>

      <para>Added buttons on the standard Performance and Response Time pages
      to allow the range to be changed between the last Day/Week/Month/Year.</para>

      <bridgehead>Response Time</bridgehead>

      <para>Added the ability to collect response time on the following
      pollers: Citrix, FTP, HTTPS, IMAP, POP3, SMTP and TCP.</para>

      <para>The RRAs for Response Time data are now part of the poller
      configuration file.</para>

      <bridgehead>Web Improvements</bridgehead>

      <para>There is now a Response Time link on the node and interface pages.</para>

      <para>If a node or interface supports HTTP, there is now a link to that
      service.</para>

      <para>Added a two minute refresh to the event listing page.</para>

      <bridgehead>Other Features</bridgehead>

      <para>Added non-blocking I/O to the HTTPS service. Now all monitors and
      plug-ins should be non-blocking.</para>

      <para>If you set the IP Address in a poll-outages calendar to
      &#34;match-any&#34; it will match all addresses in the poller package
      that uses that calendar.</para>

      <para>Increased the size of the contactinfo field in the usersnotified
      table, and changed create.sql to make this easier.</para>

      <bridgehead>Fixed Bugs</bridgehead>

      <para>Fixed numerous bugs, including 650 where &#34;down&#34; events
      could be written to the database after the corresponding &#34;up&#34;
      event. See the CHANGELOG for a full list.</para>

      <bridgehead>Tomcat4</bridgehead>

      <para>For a variety of reasons, OpenNMS 1.1.1 and beyond will require
      Tomcat4 version 4.1.18 or higher.</para>
    </sect1>

    <sect1 id="chap2sect3" label="2.3.">
      <title>Changes in OpenNMS 1.1.0 and Above</title>

      <para>There were many changes to OpenNMS between 1.0 and 1.1. Here are a
      few listed by functional area.</para>

      <bridgehead>Events and Event Handling</bridgehead>

      <para>The events and notifications part of OpenNMS saw the most changes
      with 1.1.0. First, there was a new tag added to the
      <filename>eventconf.xml</filename> file called &#60;event-file&#62;.
      This allows for external files to be included in the event
      configuration.</para>

      <para>Also, the order in which events appear is now strictly enforced.
      When trying to match an event with an event definition, OpenNMS takes
      the first match. The events in the <filename>eventconf.xml</filename>
      are read first, followed by the files identified by &#60;event-file&#62;
      tags (in the order in which they are listed). In the configuration that
      ships with OpenNMS, the file with the default events is loaded last. Be
      sure to add any custom files before that one.</para>

      <para>Prior to this release, the SNMP generic traps 0-5 (coldStart,
      warmStart, linkDown, etc.) were hard-coded. Now they must be defined
      (and that definition is included in the default events file), but this
      allows for generic traps other than type 6 to be configured differently
      for, say, different hosts.</para>

      <para>Speaking of event files, over 2750 events were added out of the
      box, including those from vendors such as Cisco, HP and 3Com. Please let
      us know if anything is misconfigured or if we need to add some events.</para>

      <para>The ability to configure events based on parameters (varbinds) was
      also added. This is best demonstrated with an example. In the new HP
      event definitions there is an event called hpicfFaultFinderTrap. It is
      defined as: <programlisting>&#60;event&#62; 
    &#60;mask&#62;
        &#60;maskelement&#62; 
            &#60;mename&#62;id&#60;/mename&#62;
            &#60;mevalue&#62;.1.3.6.1.4.1.11.2.14.12.1&#60;/mevalue&#62;
        &#60;/maskelement&#62; 
        &#60;maskelement&#62;
            &#60;mename&#62;generic&#60;/mename&#62;
            &#60;mevalue&#62;6&#60;/mevalue&#62; &#60;/maskelement&#62;
        &#60;maskelement&#62; 
            &#60;mename&#62;specific&#60;/mename&#62;
            &#60;mevalue&#62;5&#60;/mevalue&#62; 
        &#60;/maskelement&#62;
    &#60;/mask&#62;
    &#60;uei&#62;uei.opennms.org/vendor/HP/traps/hpicfFaultFinderTrap&#60;/uei&#62;
    &#60;event-label&#62;HP-ICF-FAULT-FINDER-MIB defined trap event: hpicfFaultFinderTrap&#60;/event-label&#62; 
    &#60;descr&#62;
      &#60;p&#62;This notification is sent whenever the Fault Finder creates
      an entry in the hpicfFfLogTable.&#60;/p&#62; 
      &#60;table&#62;
          &#60;tr&#62; 
          &#60;td&#62;&#60;b&#62;hpicfFfLogFaultType&#60;/b&#62;&#60;/td&#62; 
          &#60;td&#62;%parm[#1]%&#60;/td&#62; 
          &#60;td&#62;&#60;p&#62; badDriver(1) badXcvr(2)
              badCable(3) tooLongCable(4) overBandwidth(5) bcastStorm(6) partition(7)
              misconfiguredSQE(8) polarityReversal(9) networkLoop(10) lossOfLink(11)
              portSecurityViolation(12) backupLinkTransition(13) meshingFault(14)
              fanFault(15) rpsFault(16) stuck10MbFault(17) lossOfStackMember(18)
              hotSwapReboot(19) &#60;/p&#62;&#60;/td&#62; 
          &#60;/tr&#62; 
          &#60;tr&#62;
          &#60;td&#62;&#60;b&#62; hpicfFfLogAction&#60;/b&#62;&#60;/td&#62;
          &#60;td&#62;%parm[#2]% &#60;/td&#62; 
          &#60;td&#62;&#60;p;&#62; none(1)
              warn(2) warnAndDisable(3) warnAndSpeedReduce(4)
              warnAndSpeedReduceAndDisable(5) &#60;/p&#62;&#60;/td;&#62; 
          &#60;/tr&#62;
          &#60;tr&#62; 
          &#60;td&#62;&#60;b&#62;hpicfFfLogSeverity&#60;/b&#62;&#60;/td&#62; 
          &#60;td&#62;%parm[#3]%&#60;/td&#62; 
          &#60;td&#62;&#60;p&#62; informational(1) medium(2)
              critical(3) &#60;/p&#62;&#60;/td;&#62; 
          &#60;/tr&#62; 
          &#60;tr&#62;
          &#60;td&#62;&#60;b&#62; hpicfFfFaultInfoURL&#60;/b&#62;&#60;/td&#62;
          &#60;td&#62;%parm[#4]%&#60;/td&#62;
          &#60;td&#62;&#60;p;&#62;&#60;/p&#62;&#60;/td;&#62;
          &#60;/tr&#62; 
       &#60;/table&#62; 
    &#60;/descr&#62; 
    &#60;logmsg dest=&#39;logndisplay&#39;&#62;&#60;p&#62;HP Event: ICF Hub Fault Found.&#60;/p&#62;&#60;/logmsg&#62;
    &#60;severity&#62;Warning&#60;/severity&#62; 
&#60;/event&#62;
      </programlisting></para>

      <para>Note that the third parameter denotes the severity of the event.
      By default this event has a severity of Warning, but what if it was
      desired to make the &#34;critical&#34; event a severity of Major? Using
      the new varbind extension to the mask tag:
      <programlisting>&#60;event&#62; 
    &#60;mask&#62; 
        &#60;maskelement&#62;
            &#60;mename&#62;id&#60;/mename&#62;
            &#60;mevalue&#62;.1.3.6.1.4.1.11.2.14.12.1&#60;/mevalue&#62;
        &#60;/maskelement&#62; &#60;maskelement&#62;
            &#60;mename&#62;generic&#60;/mename&#62;
            &#60;mevalue&#62;6&#60;/mevalue&#62; 
        &#60;/maskelement&#62;
        &#60;maskelement&#62; &#60;mename&#62;specific&#60;/mename&#62;
            &#60;mevalue&#62;5&#60;/mevalue&#62; 
        &#60;/maskelement&#62;
        &#60;varbind&#62; 
            &#60;vbnumber&#62;specific&#60;/vbnumber&#62;
            &#60;vbvalue&#62;5&#60;/vbvalue&#62; 
        &#60;/varbind&#62; 
    &#60;/mask&#62;
    &#60;uei&#62;uei.opennms.org/vendor/HP/traps/hpicfFaultFinderTrap&#60;/uei&#62;
    &#60;event-label&#62;HP-ICF-FAULT-FINDER-MIB defined trap event: hpicfFaultFinderTrap&#60;/event-label&#62;
    &#60;descr&#62;
        &#60;p&#62;This notification is sent whenever the Fault
           Finder creates an entry in the
           hpicfFfLogTable.&#60;/p&#62;
        &#60;table&#62;
            &#60;tr&#62;
            &#60;td&#62;&#60;b&#62;hpicfFfLogFaultType&#60;/b&#62;&#60;/td&#62;
            &#60;td&#62;%parm[#1]%&#60;/td&#62;
            &#60;td&#62;&#60;p&#62; badDriver(1) badXcvr(2)
                badCable(3) tooLongCable(4) overBandwidth(5) bcastStorm(6) partition(7)
                misconfiguredSQE(8) polarityReversal(9) networkLoop(10) lossOfLink(11)
                portSecurityViolation(12) backupLinkTransition(13) meshingFault(14)
                fanFault(15) rpsFault(16) stuck10MbFault(17) lossOfStackMember(18)
                hotSwapReboot(19)&#60;/p&#62;&#60;/td&#62;
            &#60;/tr&#62;
            &#60;tr&#62;
            &#60;td&#62;&#60;b&#62;hpicfFfLogAction&#60;/b&#62;&#60;/td&#62;
            &#60;td&#62;%parm[#2]%&#60;/td&#62;
            &#60;td&#62;&#60;p&#62; none(1) warn(2) warnAndDisable(3)
                warnAndSpeedReduce(4) warnAndSpeedReduceAndDisable(5)&#60;/p&#62;&#60;/td&#62;
            &#60;/tr&#62;
            &#60;tr&#62;
            &#60;td&#62;&#60;b&#62;hpicfFfLogSeverity&#60;/b&#62;&#60;/td&#62;
            &#60;td&#62;%parm[#3]%&#60;/td&#62;
            &#60;td&#62;&#60;p;&#62; informational(1) medium(2)
                critical(3)&#60;/p&#62;&#60;/td;&#62;
            &#60;/tr&#62;
            &#60;tr&#62;
            &#60;td&#62;&#60;b&#62;hpicfFfFaultInfoURL&#60;/b&#62;&#60;/td&#62;
            &#60;td&#62;%parm[#4]%&#60;/td&#62;
            &#60;td&#62;&#60;p;&#62;&#60;/p&#62;&#60;/td;&#62;
            &#60;/tr&#62;
        &#60;/table&#62;
    &#60;/descr&#62; 
    &#60;logmsg dest=&#39;logndisplay&#39;&#62;&#60;p&#62;HP Event: ICF Hub Fault Found.&#60;/p&#62;&#60;/logmsg&#62;
    &#60;severity&#62;Major&#60;/severity&#62; &#60;/event&#62;
      </programlisting></para>

      <para>This event, when added before the previous event since it is more
      specific, will try to match on the enterprise id, the generic trap value
      of 6, the specific trap value of 5 <emphasis>and</emphasis> the value of
      the third parameter, or varbind, of 3.</para>

      <para>There was also the addition of a low and high threshold rearm
      events. When a threshold is exceeded in consecutive polls equal to the
      trigger number, the threshold event is generated. Another event will not
      be generated until the polled value drops below the rearm number. The
      rearm event is thus similar to a &#34;cleared&#34; event. Since the
      first parameter passed with the threshold event is the data source name,
      using the &#34;varbind&#34; tag above, each data source can now have its
      own event.</para>

      <para>One of the more noticeable changes is that the Unique Event
      Identifier no longer contains &#34;http://&#34;. The original intent was
      that the UEI would act something like an XML namespace, but in practice
      it is just a label, so the &#34;http://&#34; was removed to avoid
      confusion.</para>

      <para>Notifications also received some attention with this release. Due
      to popular demand, the tags %nodelabel% and %interfaceresolve% are now
      available. The former will display the label of the nodeid associated
      with the event, and the latter will attempt to resolve the name
      associated with the IP Address of the interface of the event.</para>

      <para>In <filename>notifd-configuration.xml</filename> there are now two
      new attributes. In the global properties, there is &#34;match-all&#34;.
      By default, this is set to false, which means that the first
      notification that matches an event will be the only notification sent.
      If it is set to true, then all notifications that match a given event
      will be sent. (Thanks Nick) In the auto-acknowledge section, there is a
      new attribute called &#34;clear&#34;. By adding &#34;clear=true&#34; to
      the auto-acknowledge tag, both the event being auto acknowledged
      <emphasis>and</emphasis> the event that caused the acknowledgement will
      be acknowledged. Thus the &#34;up&#34; event that clears a
      &#34;down&#34; will also be cleared.</para>

      <para>In addition to these enhancements, various bugs were fixed.
      Notification rules now actually work, and you can filter node level
      events via IP address. Also, threshold events can now generate
      notifications.</para>

      <bridgehead>Polling</bridgehead>

      <para>The biggest change to polling would have to be the addition of
      response time information for DHCP, DNS, HTTP and ICMP based pollers.
      Similar to data collection, the response time information can be graphed
      and it can have threshold alarms placed on it.</para>

      <para>Also, all of the plugins and monitors (except HTTPS) have been
      re-written to use the non-blocking I/O available in the 1.4 JDK.</para>

      <bridgehead>Discovery</bridgehead>

      <para>There has been some discussion on how OpenNMS determines node
      labels. Currently, this is set to the resolved SNMP Primary Interface IP
      Address. However, it is common practice on routers to have a
      software-loopback address. OpenNMS will now discover such interfaces (as
      long as they do not have an address that starts with 127) and mark them
      as the primary SNMP Interface. Note that no services will be polled on
      such interfaces.</para>

      <bridgehead>The Web User Interface</bridgehead>

      <para>A few changes were made to the WebUI. There is now a
      webui-colors.xml file that will allow for dynamic changes to the
      background colors used in the categories list on the main page (more
      pages to follow). Also under &#34;Admin&#34; the ability to delete nodes
      was added.</para>

      <para>In addition, there is a new Admin page that will allow one to
      choose which non-IP interfaces will be used in data collection. By
      setting the snmpStorageFlag in <filename>datacollection-config.xml</filename>
      to &#34;select&#34; (now the default), OpenNMS will only store data from
      those interfaces that could serve as a primary SNMP interface. One can
      then select which other interfaces to collect on using the GUI. The
      previous values of snmpStorageFlag (&#34;primary&#34; and &#34;all&#34;)
      still work.</para>

      <para>Also, the &#34;Destination Path&#34; interface now has the ability
      to choose NOT to include a service (thanks Nick) which will create a
      rule like &#34;match the events where service is NOT FTP&#34;, and by
      placing the mouse over the categories on the main page, the last time
      the category was updated should be displayed.</para>

      <bridgehead>Fixed Service Deletion in Downtime Model</bridgehead>

      <para>The poller downtime model allows for a service to be deleted if it
      has been down for a certain amount of time. This did not work correctly
      and has been fixed.</para>

      <bridgehead>Reduced the Amount of Data Initially Collected from the
      ifTable</bridgehead>

      <para>During discovery, the ifTable is collected from each device that
      is found to support SNMP. On some HP switches, this would fail due to a
      limitation on the SNMP maximum packet size. All non-essential ifTable
      elements were removed from the request that appears to resolve the
      problem.</para>

      <bridgehead>Removed Spaces in Notification Path Names</bridgehead>

      <para>Spaces in Notification Path names have been known to cause
      problems. The Web UI was modified to disallow spaces in path names. Bug
      657.</para>

      <bridgehead>Fixed the AM/PM Ordering on Performance Report UI.</bridgehead>

      <para>In the Custom Performance Report Web UI, 11 PM was followed by 12
      PM, when it should have been 12 AM. This has been corrected. Bug 515.</para>

      <bridgehead>Added a &#34;contrib&#34; Directory</bridgehead>

      <para>The &#34;contrib&#34; directory now contains code, such as nifty
      utilities, that exists outside of the main OpenNMS source but may prove
      useful. One such example is Tomas Carlsson&#39;s &#34;mib2opennms&#34;
      program. These programs are not supported.</para>

      <bridgehead>Removed Duplicate Entries in <filename>capsd-configuration.xml</filename></bridgehead>

      <para>Both LDAP and Citrix protocol plug-ins were listed twice. This
      would slow down the capabilities scan considerably.</para>

      <bridgehead>Updated Data Collection and Graphing</bridgehead>

      <para>Added new entries to <filename>datacollection-config.xml</filename>
      and <filename>snmp-graph.properties</filename>.</para>

      <bridgehead>Bugfixes</bridgehead>

      <para>Many bugfixes, including allowing Threshold events to generate
      notifications, AdminStatus and OperStatus values causing exceptions, and
      rescans with certain devices.</para>
    </sect1>

    <sect1 id="chap2sect4" label="2.4.">
      <title>Changes in OpenNMS 1.0.0 and Above</title>

      <para>The following major changes occurred between 0.9.9 and 1.0.0:</para>

      <bridgehead>OpenSSH service is now &#34;SSH&#34;</bridgehead>

      <para>The OpenSSH service has been renamed to &#34;SSH&#34; and changed
      to detect common versions of SSH servers other than OpenSSH. Upgrades
      will retain the &#34;OpenSSH&#34; service as well for the sake of
      reports.</para>

      <bridgehead>&#34;Service Unresponsive&#34; support</bridgehead>

      <para>There is now the possibility of having a state between
      &#34;up&#34; and &#34;down&#34; that flags a service as being
      unresponsive. This state can be reached when the service&#39;s port can
      be connected to, but it doesn&#39;t respond in a reasonable amount of
      time.</para>

      <bridgehead>Bugfixes</bridgehead>

      <para>Many small bugfixes, including the &#34;Calculating...&#34;
      problem if RTC hasn&#39;t come up yet when tomcat starts.</para>
    </sect1>
  </chapter>

  <chapter id="chap3" label="3.">
    <title>Known Issues and Caveats</title>

    <subtitle>Known Problems And Workarounds In This Release</subtitle>

    <para>Here is the list of known issues in this release of OpenNMS.</para>

    <sect1 id="chap3sect1" label="3.1.">
      <title>Java SDK Issues</title>

      <para>There seems to be a problem with the 1.4.1 SDK that causes OpenNMS
      to suddenly stop after some amount of time (depending on the size of the
      monitored network). Use 1.4.0-02 (which can be found on the archive
      section of the Sun Java page). For more info, see the FAQ entry: <ulink
      url="???">http://faq.opennms.org/faq/fom-serve/cache/129.html</ulink>.</para>

      <para>Also, there have been large changes to garbage collection and
      sockets in Java 1.4.2. Basically, garbage collection will no longer idle
      sockets, and thus any socket opened must be explicitly closed. While
      OpenNMS 1.1.2 includes some changes to address this, it appears that we
      haven&#39;t caught them all, and after a time, OpenNMs on 1.4.2 will die
      with OutOfMemory exceptions.</para>
    </sect1>

    <sect1 id="chap3sect2" label="3.2.">
      <title>New Requirements for Tomcat and PostgreSQL</title>

      <para>Version 1.1.2 and beyond of OpenNMS will require at a minimum
      Tomcat version 4.1.18 and PostgreSQL 7.2. OpenNMS will no longer supply
      &#34;onms&#34; versions of these applications, and instead will use main
      distributions from their maintainers.</para>

      <para>Note that upgrading these programs is not simple.</para>

      <bridgehead>Tomcat4</bridgehead>

      <para>For Tomcat, the best thing to do is uninstall version 4.0 and then
      install 4.1. Version 4.1 is not seen as an upgrade to 4.0, but is
      instead seen as a separate product by rpm and apt. You will need to make
      the following changes to the tomcat4.conf file (located in /etc/tomcat4
      on Red Hat):</para>

      <programlisting># you could also override JAVA_HOME here
# Where your java installation lives
# JAVA_HOME=&#34;/usr/java/jdk&#34;
# JAVA_HOME=&#34;/opt/IBMJava2-131&#34;
JAVA_HOME=&#34;[location of your Java Home dir&#34;

# What user should run tomcat
TOMCAT_USER=&#34;root&#34;</programlisting>

      <para>You do not have to run Tomcat as root if you change the
      permissions on <filename>$OPENNMS/logs</filename> and
      <filename>$OPENNMS/etc</filename> so that the Tomcat user can write to
      them.</para>

      <bridgehead>PostgreSQL</bridgehead>

      <para>Two main changes need to be made to the Postgres configuration in
      order to allow OpenNMS to access it properly. Postgres needs to have
      been started at least once to create the &#34;data&#34; directory that
      will contain the configuration files.</para>

      <para>Edit <filename>postgresql.conf</filename> (located in
      <filename>/var/pgsql/data</filename> on Red Hat) and insure the
      following values exist:<programlisting> tcpip_socket = true 
 max_connections = 256
 shared_buffers = 1024 </programlisting></para>

      <para>Edit <filename>pg_hba.conf</filename> (host based authentication)
      to allow all users to access the database from the local host by
      un-commenting:</para>

      <programlisting># TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK           METHOD

local   all         all                                             trust
host    all         all         127.0.0.1         255.255.255.255   trust</programlisting>

      <para>and you may need to uncomment:</para>

      <programlisting># Using sockets credentials for improved security. Not available everywhere,
# but works on Linux, *BSD (and probably some others)

# local  all    all             ident   sameuser</programlisting>

      <para>Note that this opens up Postgres to all users on the system (as
      long as they know the database password). Contact your database
      administrator if you want to limit this to a specific user, like root.</para>
    </sect1>
  </chapter>

  <chapter id="chap4" label="4.">
    <title>Supported Systems</title>

    <subtitle>Supported UNIX-like OSes</subtitle>

    <para>OpenNMS is written almost entirely in Java, and should be able to
    run on any system that suuports the Java 1.4 Virtual Machine. There are
    requirements for other programs such as PostgreSQL, Perl, RRDTool and
    Tomcat4, but the 1.4 JDK is the key requirement (as most of the other
    packages can be compiled from source).</para>

    <para>The following are the systems that support or are known to run
    OpenNMS.</para>

    <sect1 id="chap4sect1" label="4.1.">
      <title>Fully Supported</title>

      <para>The following Linux distributions and other unix-like systems are
      supported out-of-the-box with native installation packages.</para>

      <bridgehead>Red Hat Linux 7.x, Red Hat Linux 8 and Red Hat Linux 9</bridgehead>

      <para>PostgreSQL 7.2 and later has shipped with Red Hat Linux since
      version 7.3. Be sure to follow the above instructions.</para>

      <formalpara>
        <title>Debian Woody on Intel</title>

        <para>Debian packages should be available on ftp.opennms.org, and at
        the following apt-repository:<programlisting>deb http://debian.opennms.org/apt debian/opennms stable</programlisting></para>
      </formalpara>

      <para>Special Tomcat 4.1 packages were created, since only 4.0 is
      supported in stable. For instructions see this <ulink
      url="http://opennms.netstatz.com/Debian_ONMS_HOWTO.html#toc2">How-To</ulink>
      written by Ian MacDonald.</para>

      <formalpara>
        <title>Solaris 8 and Solaris 9 on x86 and SPARC</title>

        <para>Packages are available at ftp.opennms.org for Solaris 8 and
        Solaris 9 running on SPARC and Solaris 9 running on x86.</para>
      </formalpara>

      <formalpara>
        <title>Mandrake 8.x and Mandrake 9.x</title>

        <para>Please note that while we build packages for Mandrake 8.x, we do
        not do any formal testing on it. Packages are provided as a
        convenience.</para>
      </formalpara>

      <formalpara>
        <title>MacOSX 10.2</title>

        <para>On MacOSX, the Fink distribution packages of OpenNMS are
        supported. See <ulink url="http://fink.sf.net/">the Fink web site</ulink>
        for more information on installing and using Fink.</para>
      </formalpara>

      <para>Also note that on MacOSX, PostgreSQL must be configured in the
      same manner as above for Linux. <emphasis>However</emphasis>, to do so
      you will need to update the SHM settings so that the OS allows enough
      resources for PostgreSQL to run with larger buffers.</para>

      <para>To do so, you must edit <emphasis>/System/Library/StartupItems/SystemTuning/SystemTuning</emphasis>
      so that the sysctl lines look like so (at a minimum):
      <programlisting> sysctl -w kern.sysv.shmmax=16777216 sysctl -w
      kern.sysv.shmmin=1 sysctl -w kern.sysv.shmmni=128 sysctl -w
      kern.sysv.shmseg=32 sysctl -w kern.sysv.shmall=4096 </programlisting></para>
    </sect1>

    <sect1 id="chap4sect2" label="4.2.">
      <title>Unsupported</title>

      <para>The following UNIX systems are unsupported, but have been known to
      work.</para>

      <formalpara>
        <title>Debian Woody on SPARC</title>

        <para>OpenNMS is known to run on Debian on SPARC</para>
      </formalpara>

      <formalpara>
        <title>Red Hat 6.2</title>

        <para>No special cases known.</para>
      </formalpara>

      <formalpara>
        <title>Solaris 7</title>

        <para>There have been reports of OpenNMS building and running on
        Solaris on the discuss list.</para>
      </formalpara>

      <formalpara>
        <title>SuSE 8.1</title>

        <para>OpenNMS is known to build and run on SuSE 8.1.</para>
      </formalpara>
    </sect1>
  </chapter>
</book>